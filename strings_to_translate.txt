1. "
        
        # Phân tích RAM
        ram_tier = "
2. "
        
        # Thêm phân tích khả năng sử dụng
        self.show_hardware_capability(hw_info)
        
        result_text = t("
3. "
        
        # Tạo capabilities dựa trên tổng hợp CPU + GPU + RAM
        capabilities = []
        
        if cpu_tier in ["
4. "
        cpu_upper = cpu_name.upper()
        
        import re
        
        # Phát hiện thế hệ Intel (tất cả từ Gen 1-15+)
        intel_gen = 0
        if "
5. "
    import time
    
    try:
        cpu_count = multiprocessing.cpu_count()
        cpu_msg = f'Phát hiện {cpu_count} lõi CPU. Đang đo baseline...' if CURRENT_LANG == "
6. " else f'Detected {cpu_count} CPU cores. Measuring baseline...'
        queue.put({'type': 'status', 'message': cpu_msg})
        
        # Enhanced baseline measurement
        time.sleep(1)
        baseline_cpu = psutil.cpu_percent(interval=1)
        baseline_temp = get_cpu_temperature()
        baseline_freq, max_freq = get_cpu_frequency()
        
        queue.put({'type': 'baseline', 'data': {
            'cpu_cores': cpu_count,
            'baseline_cpu': baseline_cpu,
            'baseline_temp': baseline_temp,
            'baseline_freq': baseline_freq,
            'max_freq': max_freq
        }})
        
        # Start stress test
        stress_msg = 'Bắt đầu stress test với tải 100%...' if CURRENT_LANG == "
7. " in cpu_upper:
            # Cách 1: i3-12400, i5-10400, i7-8750H
            gen_match = re.search(r'I[3579]-?(\d{1,2})\d{3}', cpu_upper)
            if gen_match:
                intel_gen = int(gen_match.group(1))
            else:
                # Cách 2: "
8. " in line:
                    ram_match = re.search(r'([\d.]+)\s*GB', line)
                    ram_gb = float(ram_match.group(1)) if ram_match else 0
        
        # Dùng hàm chung từ HardwareFingerprintStep
        hw_step = HardwareFingerprintStep(None)
        capabilities = hw_step._analyze_capabilities(cpu_name, gpu_name, ram_gb)
        
        return capabilities, cpu_name
    
    def display_summary(self, results):
        for widget in self.action_frame.winfo_children(): 
            widget.destroy()
        
        self.create_simple_summary(results)
    
    def create_simple_summary(self, results):
        # Use action_frame directly (already scrollable)
        scroll_frame = self.action_frame
        
        # Header with logo - TO, RỘNG, ĐẸP
        header_frame = ctk.CTkFrame(scroll_frame, fg_color=Theme.ACCENT, corner_radius=12, height=120)
        header_frame.pack(fill="
9. ")

    def start_listening(self):
        try:
            self.listening = True
            # Chặn chỉ Print Screen, không chặn tất cả
            keyboard.hook(self.on_key_event, suppress=False)
            
            # Thêm hook riêng cho Print Screen
            keyboard.block_key('print screen')
        except Exception as e:
            self.listening = False
            if "
10. ")
        
        # Control buttons ở bên phải - tăng kích thước
        controls_frame = ctk.CTkFrame(self.header, fg_color="
11. ")
        
        # Quick stats - TO HƠN
        stats_frame = ctk.CTkFrame(scroll_frame, fg_color=Theme.FRAME, corner_radius=12, height=140)
        stats_frame.pack(fill="
12. ")
        
        # Trích xuất RAM GB
        ram_match = re.search(r'([\d.]+)\s*GB', ram_str)
        ram_gb = float(ram_match.group(1)) if ram_match else 0
        
        capabilities = self._analyze_capabilities(cpu_name, gpu_name, ram_gb)
        
        if not capabilities:
            return
        
        # Hiển thị capabilities
        cap_frame = ctk.CTkFrame(self.action_frame, fg_color="
13. ")
        except:
            pass
        
        # Thông tin cột 2 - có dịch
        self.title_label = ctk.CTkLabel(left_frame, text="
14. ")
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_rowconfigure(1, weight=1)
        
        # Loại bỏ hoàn toàn khối này - thông tin đã được di chuyển lên header
        
        # App introduction section đơn giản
        intro_frame = ctk.CTkFrame(main_frame, fg_color="
15. ")
        queue.put({'type': 'status', 'message': stress_msg})
        
        running = True
        
        while running and (time.time() - start_time < duration):
            dt = clock.tick(60) / 1000.0
            current_time = time.time() - start_time
            progress = current_time / duration
            
            for event in pygame.event.get():
                if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                    running = False
                    stop_msg = 'Test bị dừng bởi người dùng (ESC)' if CURRENT_LANG == "
16. ")
        return parts

# Global secure executor
_secure_executor = SecureCommandExecutor()

# ============================================================================
# AI ANALYZER - Model-specific warnings
# ============================================================================
class LaptopAIDiagnoser:
    def __init__(self):
        self.model_warnings = {
            'thinkpad x1': '⚠️ ThinkPad X1: Kiểm tra kỹ bản lề - dễ bị lỏng',
            'thinkpad t480': '⚠️ T480: Pin có thể bị chai nhanh',
            'xps': '⚠️ Dell XPS: Dễ bị coil whine và throttling',
            'macbook pro 2016': '⚠️ MacBook Pro 2016-2017: Bàn phím butterfly dễ hỏng',
            'pavilion': '⚠️ HP Pavilion: Quạt tản nhiệt dễ bị bụi',
            'rog': '⚠️ ASUS ROG: GPU có thể bị artifacts',
        }
    
    def analyze_model(self, model_name):
        model_lower = model_name.lower()
        for key, warning in self.model_warnings.items():
            if key in model_lower:
                return warning
        return None

_ai_diagnoser = LaptopAIDiagnoser()

# ============================================================================
# AUDIO WORKER - stereo_test.mp3 integration
# ============================================================================
def play_stereo_test_audio(status_callback=None):
    if not pygame:
        return False
    
    stereo_test_path = os.path.join(os.path.dirname(__file__), "
17. ")
        self.header.grid_columnconfigure(1, weight=1)
        
        # Layout table: Logo cột 1, thông tin cột 2
        left_frame = ctk.CTkFrame(self.header, fg_color="
18. "))
        self.state('zoomed')
        self.minsize(1400, 900)
        
        self.icon_manager = IconManager()
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=20)
        self.current_main_frame = None
        self.all_results = {}

        # Header với layout mới
        self.header = ctk.CTkFrame(self, fg_color="
19. "), font=Theme.BODY_FONT)
        self.recording_status.pack(pady=10)
        
        self.show_result_choices()
    
    def play_test_music(self):
        def test_audio():
            self.music_playing = True
            
            # Import audio worker
            try:
                from worker_audio import run_audio_test
                
                def status_update(msg):
                    if self.music_playing:
                        self.recording_status.configure(text=msg)
                
                # Chạy audio test với stereo_test.mp3
                success = run_audio_test(status_update)
                
                if success:
                    self.recording_status.configure(text=t("
20. "), font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Cách vào BIOS
        access_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        access_frame.pack(fill="
21. "), font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Vỏ máy & Bản lề
        section1 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section1.pack(fill="
22. "), text_color=color).pack(pady=(0, 15))
        
        # Overall assessment - TO HƠN
        assessment_frame = ctk.CTkFrame(scroll_frame, corner_radius=12, height=100)
        assessment_frame.pack(fill="
23. ", True, (255, 255, 255))
            
            screen.blit(elapsed_text, (10, 10))
            screen.blit(fps_text, (10, 40))
            screen.blit(particles_text, (10, 70))
            screen.blit(progress_text, (10, 100))
            
            # Progress bar
            bar_width = 300
            bar_height = 10
            bar_x = 10
            bar_y = 200
            pygame.draw.rect(screen, (50, 50, 50), (bar_x, bar_y, bar_width, bar_height))
            pygame.draw.rect(screen, (0, 255, 0), (bar_x, bar_y, int(bar_width * progress), bar_height))

            pygame.display.flip()
            
            if frame_count % 30 == 0:  # Update every 30 frames for smoother charts
                queue.put({
                    'type': 'update',
                    'progress': progress,
                    'fps': fps,
                    'particles': len(particles),
                    'frame_count': frame_count
                })

        pygame.quit()
        
        # Calculate results
        avg_fps = sum(fps_readings) / len(fps_readings) if fps_readings else 0
        min_fps = min(fps_readings) if fps_readings else 0
        max_fps = max(fps_readings) if fps_readings else 0
        
        result_data = {
            'duration': current_time,
            'total_frames': frame_count,
            'average_fps': round(avg_fps, 2),
            'min_fps': round(min_fps, 2),
            'max_fps': round(max_fps, 2),
            'stable_performance': min_fps > 30 and avg_fps > 45
        }
        
        queue.put({'type': 'result', 'data': result_data})
        queue.put({'type': 'done'})

    except Exception as e:
        try:
            pygame.quit()
        except:
            pass
        gpu_error_msg = f'Lỗi GPU stress test: {str(e)}' if CURRENT_LANG == "
24. ", padx=10, pady=1)
        
        # Bảo mật khác
        security_frame = ctk.CTkFrame(checklist_frame, fg_color="
25. ", padx=25, pady=1)
        
        # Cảnh báo mật khẩu BIOS
        password_warning = ctk.CTkFrame(checklist_frame, fg_color="
26. ", padx=25, pady=1)
        
        # Cổng kết nối
        section2 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section2.pack(fill="
27. ", padx=25, pady=1)
        
        # Hiệu năng CPU
        cpu_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        cpu_frame.pack(fill="
28. ", padx=25, pady=1)
        
        # ThinkPad đặc biệt
        thinkpad_frame = ctk.CTkFrame(checklist_frame, fg_color="
29. ", padx=25, pady=1)
        
        # Ốc vít & Tem
        section3 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section3.pack(fill="
30. ", padx=Theme.PADDING, pady=Theme.PADDING)
        left_frame.grid_columnconfigure(1, weight=1)
        
        # Logo cột 1 - kích thước bằng 5 dòng thông tin
        try:
            logo_img = ctk.CTkImage(Image.open(asset_path("
31. ", pady=10)
            
            status = drive_data.get('Trạng thái', 'Không rõ')
            good_text = t("
32. "BIOS chứa các cài đặt nền tảng. Kiểm tra để đảm bảo hiệu năng tối ưu và không bị khóa bởi các tính năng doanh nghiệp."
33. "BÁO CÁO KIỂM TRA LAPTOP"
34. "Bài test sẽ tạo ra một cửa sổ đồ họa nặng trong 60 giây. Hãy quan sát có hiện tượng chớp giật, sọc ngang, hay các đốm màu lạ không?"
35. "Bình thường"
36. "Bảo mật & Định danh"
37. "Bắt đầu"
38. "CPU không ổn định"
39. "CPU ổn định"
40. "Chuyên gia"
41. "Chọn chế độ"
42. "Click trái: {self.mouse_clicks['left']}, Click phải: {self.mouse_clicks['right']}"
43. "Copy thành công"
44. "CÔNG CỤ CHUYÊN NGHIỆP BỔ SUNG"
45. "Cài đặt chính xác"
46. "Cách thực hiện:"
47. "Có lỗi"
48. "Có một số vấn đề nhỏ, cần kiểm tra kỹ trước khi quyết định."
49. "Có vấn đề"
50. "Có vấn đề với BIOS"
51. "Có ổ cứng lỗi"
52. "Công suất"
53. "Cơ bản"
54. "Dừng"
55. "Dừng Test"
56. "Ghi âm"
57. "Giao diện"
58. "Giám sát hệ thống"
59. "Giám sát nhiệt độ và cảm biến"
60. "Hiệu năng"
61. "Hoạt động tốt"
62. "HƯỚNG DẪN SỬ DỤNG CÔNG CỤ"
63. "Hệ thống âm thanh có vấn đề"
64. "Hệ thống âm thanh tốt"
65. "Không có vấn đề"
66. "Không hoạt động"
67. "Không rõ"
68. "Không thể bắt sự kiện bàn phím do thiếu quyền Admin/root. Vui lòng chạy lại ứng dụng với quyền quản trị viên."
69. "Không ổn định"
70. "Kiểm Tra Cài Đặt BIOS"
71. "Kiểm tra RAM lỗi (USB boot)"
72. "Kiểm tra S.M.A.R.T ổ cứng chi tiết"
73. "Kiểm tra bản quyền Windows"
74. "Kiểm tra mạng"
75. "Kiểm tra thông tin phần cứng từ BIOS"
76. "Kết nối mạng"
77. "LAPTOP CÓ VẤN ĐỀ NGHIÊM TRỌNG"
78. "LAPTOP CẦN CHÚ Ý"
79. "LAPTOP TÌNH TRẠNG TỐT"
80. "Laptop hoạt động ổn định, có thể mua với giá hợp lý."
81. "LaptopTester Pro - Kiểm tra laptop toàn diện"
82. "Lệnh cài đặt:"
83. "Lỗi Worker"
84. "Lỗi: {e}"
85. "Màn hình bình thường"
86. "Một CPU quá nhiệt sẽ tự giảm hiệu năng (throttling) gây giật lag. Bài test này sẽ đẩy CPU lên 100% tải để kiểm tra khả năng tản nhiệt."
87. "Ngôn ngữ"
88. "Nhiều lỗi phát hiện, không khuyến nghị mua hoặc cần giảm giá mạnh."
89. "Nhiệt độ & Hiệu năng"
90. "Nhấn 'Bắt đầu Test' trong 2-5 phút. Theo dõi nhiệt độ. Nếu nhiệt độ ổn định dưới 95°C và không có hiện tượng treo máy, hệ thống tản nhiệt hoạt động tốt."
91. "Phát"
92. "Phân tích khả năng sử dụng dựa trên thông tin phần cứng từ BIOS"
93. "Phân tích pin hoàn thành"
94. "Phân tích toàn diện tình trạng phần cứng"
95. "Phần cứng"
96. "Pin tốt"
97. "Stress test GPU chuyên nghiệp"
98. "Sẵn sàng"
99. "Sức khỏe pin"
100. "Sức khỏe ổ cứng (S.M.A.R.T)"
101. "THÔNG TIN BẢO MẬT"
102. "Test hoàn thành"
103. "Test riêng lẻ"
104. "Thiết bị nhập tốt"
105. "Thoát"
106. "Thông tin CPU, RAM, Mainboard"
107. "Thông tin card đồ họa chi tiết"
108. "Thông tin cấu hình hệ thống"
109. "Thực thi command an toàn"
110. "Thực thi command với validation"
111. "Tiếp"
112. "Tiếp tục"
113. "Trang chủ"
114. "Trước"
115. "Trắng"
116. "Tại sao cần test?"
117. "Tải từ trang chủ"
118. "Tất cả đều tốt"
119. "Tần số"
120. "Tốc độ"
121. "Tốc độ tốt"
122. "Tối"
123. "Tổng Test"
124. "Tổng kết"
125. "Tổng quan"
126. "Tỷ Lệ Đạt"
127. "Webcam có lỗi"
128. "Webcam hoạt động tốt"
129. "Webcam test sẵn sàng"
130. "XUẤT BÁO CÁO"
131. "Xanh Dương"
132. "Xanh Lá"
133. "Xem checklist bên dưới để kiểm tra từng mục trong BIOS"
134. "Xuất Excel"
135. "Xuất PDF"
136. "Xóa vết vẽ"
137. "kích hoạt vĩnh viễn"
138. "sẽ hết hạn"
139. "Âm thanh rõ ràng"
140. "Đang chạy"
141. "Đang kiểm tra"
142. "Đang test"
143. "Đang tải"
144. "Đã copy báo cáo vào clipboard!"
145. "Đã hiển thị checklist"
146. "Để kiểm tra sâu hơn, hãy sử dụng các công cụ chuyên nghiệp sau:"
147. "Ổn định"
148. "⚠️ Pin Trung Bình (60-80%)"
149. "✓ Pin Tốt"
150. "✓ Pin Tốt (>80%)"
151. "❌ Lỗi camera: {e}"
152. "❌ Pin Yếu (<60%)"
153. "🎵 Phát stereo_test.mp3 ({elapsed}s)"
154. "📊 Tốc độ: {speed_mbps:.1f} Mbps ({downloaded/1024/1024:.1f}MB/{duration:.1f}s)"
155. "📷 Độ phân giải tối đa: {actual_width}x{actual_height}"
