
        
        # Phân tích RAM
        ram_tier = 

        
        # Thêm phân tích khả năng sử dụng
        self.show_hardware_capability(hw_info)
        
        result_text = t(

        
        # Tạo capabilities dựa trên tổng hợp CPU + GPU + RAM
        capabilities = []
        
        if cpu_tier in [

        cpu_upper = cpu_name.upper()
        
        import re
        
        # Phát hiện thế hệ Intel (tất cả từ Gen 1-15+)
        intel_gen = 0
        if 

    import time
    
    try:
        cpu_count = multiprocessing.cpu_count()
        cpu_msg = f'Phát hiện {cpu_count} lõi CPU. Đang đo baseline...' if CURRENT_LANG == 
 else f'Detected {cpu_count} CPU cores. Measuring baseline...'
        queue.put({'type': 'status', 'message': cpu_msg})
        
        # Enhanced baseline measurement
        time.sleep(1)
        baseline_cpu = psutil.cpu_percent(interval=1)
        baseline_temp = get_cpu_temperature()
        baseline_freq, max_freq = get_cpu_frequency()
        
        queue.put({'type': 'baseline', 'data': {
            'cpu_cores': cpu_count,
            'baseline_cpu': baseline_cpu,
            'baseline_temp': baseline_temp,
            'baseline_freq': baseline_freq,
            'max_freq': max_freq
        }})
        
        # Start stress test
        stress_msg = 'Bắt đầu stress test với tải 100%...' if CURRENT_LANG == 
 in cpu_upper:
            # Cách 1: i3-12400, i5-10400, i7-8750H
            gen_match = re.search(r'I[3579]-?(\d{1,2})\d{3}', cpu_upper)
            if gen_match:
                intel_gen = int(gen_match.group(1))
            else:
                # Cách 2: 
 in line:
                    ram_match = re.search(r'([\d.]+)\s*GB', line)
                    ram_gb = float(ram_match.group(1)) if ram_match else 0
        
        # Dùng hàm chung từ HardwareFingerprintStep
        hw_step = HardwareFingerprintStep(None)
        capabilities = hw_step._analyze_capabilities(cpu_name, gpu_name, ram_gb)
        
        return capabilities, cpu_name
    
    def display_summary(self, results):
        for widget in self.action_frame.winfo_children(): 
            widget.destroy()
        
        self.create_simple_summary(results)
    
    def create_simple_summary(self, results):
        # Use action_frame directly (already scrollable)
        scroll_frame = self.action_frame
        
        # Header with logo - TO, RỘNG, ĐẸP
        header_frame = ctk.CTkFrame(scroll_frame, fg_color=Theme.ACCENT, corner_radius=12, height=120)
        header_frame.pack(fill=
)

    def start_listening(self):
        try:
            self.listening = True
            # Chặn chỉ Print Screen, không chặn tất cả
            keyboard.hook(self.on_key_event, suppress=False)
            
            # Thêm hook riêng cho Print Screen
            keyboard.block_key('print screen')
        except Exception as e:
            self.listening = False
            if 
)
        
        # Control buttons ở bên phải - tăng kích thước
        controls_frame = ctk.CTkFrame(self.header, fg_color=
)
        
        # Quick stats - TO HƠN
        stats_frame = ctk.CTkFrame(scroll_frame, fg_color=Theme.FRAME, corner_radius=12, height=140)
        stats_frame.pack(fill=
)
        
        # Trích xuất RAM GB
        ram_match = re.search(r'([\d.]+)\s*GB', ram_str)
        ram_gb = float(ram_match.group(1)) if ram_match else 0
        
        capabilities = self._analyze_capabilities(cpu_name, gpu_name, ram_gb)
        
        if not capabilities:
            return
        
        # Hiển thị capabilities
        cap_frame = ctk.CTkFrame(self.action_frame, fg_color=
)
        except:
            pass
        
        # Thông tin cột 2 - có dịch
        self.title_label = ctk.CTkLabel(left_frame, text=
)
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_rowconfigure(1, weight=1)
        
        # Loại bỏ hoàn toàn khối này - thông tin đã được di chuyển lên header
        
        # App introduction section đơn giản
        intro_frame = ctk.CTkFrame(main_frame, fg_color=
)
        queue.put({'type': 'status', 'message': stress_msg})
        
        running = True
        
        while running and (time.time() - start_time < duration):
            dt = clock.tick(60) / 1000.0
            current_time = time.time() - start_time
            progress = current_time / duration
            
            for event in pygame.event.get():
                if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
                    running = False
                    stop_msg = 'Test bị dừng bởi người dùng (ESC)' if CURRENT_LANG == 
)
        return parts

# Global secure executor
_secure_executor = SecureCommandExecutor()

# ============================================================================
# AI ANALYZER - Model-specific warnings
# ============================================================================
class LaptopAIDiagnoser:
    def __init__(self):
        self.model_warnings = {
            'thinkpad x1': '⚠️ ThinkPad X1: Kiểm tra kỹ bản lề - dễ bị lỏng',
            'thinkpad t480': '⚠️ T480: Pin có thể bị chai nhanh',
            'xps': '⚠️ Dell XPS: Dễ bị coil whine và throttling',
            'macbook pro 2016': '⚠️ MacBook Pro 2016-2017: Bàn phím butterfly dễ hỏng',
            'pavilion': '⚠️ HP Pavilion: Quạt tản nhiệt dễ bị bụi',
            'rog': '⚠️ ASUS ROG: GPU có thể bị artifacts',
        }
    
    def analyze_model(self, model_name):
        model_lower = model_name.lower()
        for key, warning in self.model_warnings.items():
            if key in model_lower:
                return warning
        return None

_ai_diagnoser = LaptopAIDiagnoser()

# ============================================================================
# AUDIO WORKER - stereo_test.mp3 integration
# ============================================================================
def play_stereo_test_audio(status_callback=None):
    if not pygame:
        return False
    
    stereo_test_path = os.path.join(os.path.dirname(__file__), 
)
        self.header.grid_columnconfigure(1, weight=1)
        
        # Layout table: Logo cột 1, thông tin cột 2
        left_frame = ctk.CTkFrame(self.header, fg_color=
))
        self.state('zoomed')
        self.minsize(1400, 900)
        
        self.icon_manager = IconManager()
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=20)
        self.current_main_frame = None
        self.all_results = {}

        # Header với layout mới
        self.header = ctk.CTkFrame(self, fg_color=
), font=Theme.BODY_FONT)
        self.recording_status.pack(pady=10)
        
        self.show_result_choices()
    
    def play_test_music(self):
        def test_audio():
            self.music_playing = True
            
            # Import audio worker
            try:
                from worker_audio import run_audio_test
                
                def status_update(msg):
                    if self.music_playing:
                        self.recording_status.configure(text=msg)
                
                # Chạy audio test với stereo_test.mp3
                success = run_audio_test(status_update)
                
                if success:
                    self.recording_status.configure(text=t(
), font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Cách vào BIOS
        access_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        access_frame.pack(fill=
), font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Vỏ máy & Bản lề
        section1 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section1.pack(fill=
), text_color=color).pack(pady=(0, 15))
        
        # Overall assessment - TO HƠN
        assessment_frame = ctk.CTkFrame(scroll_frame, corner_radius=12, height=100)
        assessment_frame.pack(fill=
, True, (255, 255, 255))
            
            screen.blit(elapsed_text, (10, 10))
            screen.blit(fps_text, (10, 40))
            screen.blit(particles_text, (10, 70))
            screen.blit(progress_text, (10, 100))
            
            # Progress bar
            bar_width = 300
            bar_height = 10
            bar_x = 10
            bar_y = 200
            pygame.draw.rect(screen, (50, 50, 50), (bar_x, bar_y, bar_width, bar_height))
            pygame.draw.rect(screen, (0, 255, 0), (bar_x, bar_y, int(bar_width * progress), bar_height))

            pygame.display.flip()
            
            if frame_count % 30 == 0:  # Update every 30 frames for smoother charts
                queue.put({
                    'type': 'update',
                    'progress': progress,
                    'fps': fps,
                    'particles': len(particles),
                    'frame_count': frame_count
                })

        pygame.quit()
        
        # Calculate results
        avg_fps = sum(fps_readings) / len(fps_readings) if fps_readings else 0
        min_fps = min(fps_readings) if fps_readings else 0
        max_fps = max(fps_readings) if fps_readings else 0
        
        result_data = {
            'duration': current_time,
            'total_frames': frame_count,
            'average_fps': round(avg_fps, 2),
            'min_fps': round(min_fps, 2),
            'max_fps': round(max_fps, 2),
            'stable_performance': min_fps > 30 and avg_fps > 45
        }
        
        queue.put({'type': 'result', 'data': result_data})
        queue.put({'type': 'done'})

    except Exception as e:
        try:
            pygame.quit()
        except:
            pass
        gpu_error_msg = f'Lỗi GPU stress test: {str(e)}' if CURRENT_LANG == 
, padx=10, pady=1)
        
        # Bảo mật khác
        security_frame = ctk.CTkFrame(checklist_frame, fg_color=
, padx=25, pady=1)
        
        # Cảnh báo mật khẩu BIOS
        password_warning = ctk.CTkFrame(checklist_frame, fg_color=
, padx=25, pady=1)
        
        # Cổng kết nối
        section2 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section2.pack(fill=
, padx=25, pady=1)
        
        # Hiệu năng CPU
        cpu_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        cpu_frame.pack(fill=
, padx=25, pady=1)
        
        # ThinkPad đặc biệt
        thinkpad_frame = ctk.CTkFrame(checklist_frame, fg_color=
, padx=25, pady=1)
        
        # Ốc vít & Tem
        section3 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section3.pack(fill=
, padx=Theme.PADDING, pady=Theme.PADDING)
        left_frame.grid_columnconfigure(1, weight=1)
        
        # Logo cột 1 - kích thước bằng 5 dòng thông tin
        try:
            logo_img = ctk.CTkImage(Image.open(asset_path(
, pady=10)
            
            status = drive_data.get('Trạng thái', 'Không rõ')
            good_text = t(
1-2 phút
BIOS chứa các cài đặt nền tảng. Kiểm tra để đảm bảo hiệu năng tối ưu và không bị khóa bởi các tính năng doanh nghiệp.
BÁO CÁO KIỂM TRA LAPTOP
Bài test sẽ tạo ra một cửa sổ đồ họa nặng trong 60 giây. Hãy quan sát có hiện tượng chớp giật, sọc ngang, hay các đốm màu lạ không?
Bài test sẽ tạo ra một cửa sổ đồ họa nặng trong 60 giây. Hãy quan sát có hiện tượng chớp giật, sọc ngang, hay các đốm màu lạ không? Máy có bị treo hoặc tự khởi động lại không?
Bàn phím & Touchpad
Bình thường
Bước này hiển thị thông tin cấu hình mà Windows nhận diện và tự động so sánh với thông tin từ BIOS để phát hiện sai lệch.
Bản quyền Windows
Bảo mật & Định danh
Bắt đầu
Bắt đầu Test
Bỏ qua
CPU có vấn đề
CPU không ổn định
CPU ổn định
Chi tiết
Chuyên gia
Chú ý đến mục 'Trạng thái'. 'Tốt' là bình thường. 'Lỗi/Cảnh báo' là rủi ro cao. Bước tiếp theo sẽ kiểm tra tốc độ thực tế.
Chưa kích hoạt
Chỉ hỗ trợ Windows
Chọn chế độ
Chức năng đang phát triển
Click trái: {self.mouse_clicks['left']}, Click phải: {self.mouse_clicks['right']}
Code: VS, Android Studio, Docker\nVM: 3-4 máy ảo\n50+ Chrome tabs
Copy thành công
CÔNG CỤ CHUYÊN NGHIỆP BỔ SUNG
Cài đặt chính xác
Cách thực hiện:
Có lỗi
Có một số vấn đề nhỏ, cần kiểm tra kỹ trước khi quyết định.
Có sai lệch
Có vấn đề
Có vấn đề với BIOS
Có ổ cứng lỗi
Công suất
Cơ bản
Cảnh báo
Cấu hình hệ thống
Cấu hình khớp
Dừng
Dừng Test
Dựa trên phân tích trên, đánh giá tình trạng pin:
ESC để dừng
GPU có vấn đề
GPU không ổn định
GPU là trái tim của đồ họa và game. Một GPU lỗi hoặc quá nhiệt có thể gây ra hiện tượng 'rác' hình (artifacts), treo máy hoặc sụt giảm FPS nghiêm trọng.
GPU ổn định
Ghi âm
Giao diện
Giám sát hệ thống
Giám sát nhiệt độ và cảm biến
Giám sát nhiệt độ và hiệu năng real-time giúp phát hiện vấn đề tản nhiệt, throttling và hiệu năng không ổn định.
Gõ lần lượt tất cả các phím. Phím bạn gõ sẽ sáng lên màu xanh dương, và chuyển sang xanh lá khi được nhả ra. Vẽ trên vùng test touchpad, thử click trái/phải.
Hiển thị nhận định khả năng sử dụng phần cứng
Hiệu năng
Hoàn thành
Hoạt động tốt
Hàm chung phân tích khả năng phần cứng
HƯỚNG DẪN SỬ DỤNG CÔNG CỤ
Hệ thống âm thanh có vấn đề
Hệ thống âm thanh quan trọng cho giải trí và họp trực tuyến. Loa bị rè, micro không hoạt động sẽ ảnh hưởng đến trải nghiệm multimedia.
Hệ thống âm thanh tốt
Học Tập
Không có vấn đề
Không hoạt động
Không rõ
Không thể bắt sự kiện bàn phím do thiếu quyền Admin/root. Vui lòng chạy lại ứng dụng với quyền quản trị viên.
Không ổn định
Kiểm Tra Cài Đặt BIOS
Kiểm tra RAM lỗi (USB boot)
Kiểm tra S.M.A.R.T ổ cứng chi tiết
Kiểm tra bản quyền Windows
Kiểm tra màn hình
Kiểm tra mạng
Kiểm tra thông tin phần cứng từ BIOS
Kết nối mạng
Kết nối mạng ổn định quan trọng cho công việc và giải trí. Test này kiểm tra tốc độ, độ trễ và chất lượng kết nối WiFi/Ethernet.
Kết quả
LAPTOP CÓ VẤN ĐỀ NGHIÊM TRỌNG
LAPTOP CẦN CHÚ Ý
LAPTOP TÌNH TRẠNG TỐT
Laptop hoạt động ổn định, có thể mua với giá hợp lý.
LaptopTester Pro - Kiểm tra laptop toàn diện
Lưu báo cáo Excel
Lưu báo cáo PDF
Lệnh cài đặt:
Lỗi
Lỗi Worker
Lỗi khi chạy lệnh kiểm tra
Lỗi: {e}
Model Ổ Cứng
Màn hình bình thường
Màn hình là một trong những linh kiện đắt tiền và dễ hỏng nhất. Lỗi điểm chết, hở sáng, ám màu hay 'ung thư panel' (chớp giật ở cạnh viền) là những vấn đề nghiêm trọng.
Một CPU quá nhiệt sẽ tự giảm hiệu năng (throttling) gây giật lag. Bài test này sẽ đẩy CPU lên 100% tải để kiểm tra khả năng tản nhiệt.
Một máy tính có bản quyền Windows hợp lệ đảm bảo bạn nhận được các bản cập nhật bảo mật quan trọng và tránh các rủi ro pháp lý.
Một phím bị liệt, kẹt, hoặc touchpad bị loạn/mất cử chỉ đa điểm sẽ làm gián đoạn hoàn toàn công việc.
Ngày BIOS
Ngôn ngữ
Nhiều lỗi phát hiện, không khuyến nghị mua hoặc cần giảm giá mạnh.
Nhiệt độ
Nhiệt độ & Hiệu năng
Nhấn 'Bắt đầu Test' trong 2-5 phút. Theo dõi nhiệt độ. Nếu nhiệt độ ổn định dưới 95°C và không có hiện tượng treo máy, hệ thống tản nhiệt hoạt động tốt.
Nhấn 'Bắt đầu Test' để chạy lệnh kiểm tra trạng thái kích hoạt Windows. Kết quả sẽ hiển thị bên dưới.
Nhấn 'Bắt đầu Test' để chạy test màn hình tự động. Test sẽ hiển thị các màu khác nhau, nhấn ESC để dừng bất cứ lúc nào.
Nhấn 'Bắt đầu Test' để kiểm tra kết nối Internet, DNS, tốc độ mạng và thông tin WiFi.
Nhấn 'Bắt đầu Test' để mở camera. Kiểm tra chất lượng hình ảnh, độ phân giải và che camera để test phát hiện vật cản.
Nhấn 'Start Monitor' để bắt đầu giám sát. Có thể chạy Stress Test để kiểm tra khả năng tản nhiệt dưới tải cao.
Phát
Phát bài nhạc test và kiểm tra micro với biểu đồ sóng âm.
Phân tích khả năng sử dụng dựa trên thông tin phần cứng từ BIOS
Phân tích pin hoàn thành
Phân tích toàn diện tình trạng phần cứng
Phần cứng
Pin là nguồn năng lượng di động của laptop. Pin hỏng hoặc chai sẽ giảm thời gian sử dụng và có thể gây nguy hiểm.
Pin tốt
Stress test GPU chuyên nghiệp
Sẵn sàng
Sẵn sàng test
Sức khỏe pin
Sức khỏe ổ cứng
Sức khỏe ổ cứng (S.M.A.R.T)
THÔNG TIN BẢO MẬT
Test hoàn thành
Test riêng lẻ
Thiết bị nhập tốt
Thoát
Thông tin CPU, RAM, Mainboard
Thông tin card đồ họa chi tiết
Thông tin cấu hình hệ thống
Thông tin pin sẽ được tự động thu thập. Kiểm tra các thông số dưới đây và đánh giá tình trạng pin.
Thực thi command an toàn
Thực thi command với validation
Tiếp
Tiếp tục
Trang chủ
Trước
Trạng thái
Trắng
Tại sao cần test?
Tải từ trang chủ
Tất cả đều tốt
Tần số
Tốc độ
Tốc độ tốt
Tốc độ ổ cứng
Tối
Tốt
Tổng Test
Tổng kết
Tổng quan
Tỷ Lệ Đạt
Văn Phòng
Văn Phòng & Code
Webcam có lỗi
Webcam cần thiết cho video call và họp trực tuyến. Camera không hoạt động hoặc chất lượng kém sẽ ảnh hưởng đến giao tiếp.
Webcam hoạt động tốt
Webcam test sẵn sàng
Windows chưa được kích hoạt
Windows được kích hoạt vĩnh viễn
XUẤT BÁO CÁO
Xanh Dương
Xanh Lá
Xem checklist bên dưới để kiểm tra từng mục trong BIOS
Xuất Excel
Xuất PDF
Xóa vết vẽ
Zoom, Teams\nWord, PPT\nTra cứu web
kích hoạt vĩnh viễn
sẽ hết hạn
Âm thanh rõ ràng
Đang chạy
Đang kiểm tra
Đang test
Đang tải
Đã copy báo cáo vào clipboard!
Đã hiển thị checklist
Đã kích hoạt vĩnh viễn
Đạt
Để kiểm tra sâu hơn, hãy sử dụng các công cụ chuyên nghiệp sau:
Định danh phần cứng
Đối chiếu thông tin dưới đây với bước trước và với thông tin quảng cáo. Nếu mọi thứ khớp, chọn 'Cấu hình khớp'.
Đồ Họa Pro
Ổ cứng
Ổ cứng sắp hỏng là mối rủi ro mất dữ liệu cực lớn. Bước này đọc 'báo cáo y tế' (S.M.A.R.T.) của ổ cứng để đánh giá độ bền.
Ổn định
⚠️ Pin Trung Bình (60-80%)
✅ Hoàn thành phát file stereo test
✅ Phát tone test 440Hz
✓ CPU Tốt
✓ Chấp Nhận
✓ Pin Tốt
✓ Pin Tốt (>80%)
✗ CPU Có Vấn Đề
✗ Có vấn đề
❌ Không tìm thấy camera hoạt động
❌ Lỗi camera: {e}
❌ OpenCV không có sẵn. Cài đặt: pip install opencv-python
❌ Pin Yếu (<60%)
🎵 Phát file stereo_test.mp3...
🎵 Phát stereo_test.mp3 ({elapsed}s)
📊 Tốc độ: {speed_mbps:.1f} Mbps ({downloaded/1024/1024:.1f}MB/{duration:.1f}s)
📷 Độ phân giải tối đa: {actual_width}x{actual_height}
🔋 Phân Tích Pin Chi Tiết
