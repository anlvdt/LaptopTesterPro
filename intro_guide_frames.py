# -*- coding: utf-8 -*-
"""
Intro and Guide Frames for LaptopTester
C√°c m√†n h√¨nh gi·ªõi thi·ªáu v√† h∆∞·ªõng d·∫´n chi ti·∫øt
"""

import customtkinter as ctk
import tkinter as tk
from PIL import Image
import webbrowser
import threading
import time

# Import theme and utilities from main app
try:
    from laptoptester import Theme, get_text, CURRENT_LANG
except ImportError:
    # Fallback theme if import fails
    class Theme:
        BACKGROUND = "#FAFBFC"
        FRAME = "#FFFFFF"
        CARD = "#F8FAFC"
        BORDER = "#E1E5E9"
        TEXT = "#1A202C"
        TEXT_SECONDARY = "#718096"
        ACCENT = "#4299E1"
        SUCCESS = "#38A169"
        WARNING = "#D69E2E"
        ERROR = "#E53E3E"
        TITLE_FONT = ("Segoe UI", 32, "bold")
        HEADING_FONT = ("Segoe UI", 24, "bold")
        SUBHEADING_FONT = ("Segoe UI", 18, "bold")
        BODY_FONT = ("Segoe UI", 14)
        SMALL_FONT = ("Segoe UI", 12)
        CORNER_RADIUS = 12
        PADDING_X = 20
        PADDING_Y = 16
        BUTTON_HEIGHT = 40
        CARD_PADDING = 16
        SECTION_SPACING = 12
        ELEMENT_SPACING = 8
    
    def get_text(key):
        return key
    
    CURRENT_LANG = "vi"

class IntroFrame(ctk.CTkFrame):
    """M√†n h√¨nh gi·ªõi thi·ªáu ·ª©ng d·ª•ng"""
    
    def __init__(self, master, on_continue=None, on_skip=None):
        super().__init__(master, fg_color="transparent")
        self.on_continue = on_continue
        self.on_skip = on_skip
        self.setup_ui()
    
    def setup_ui(self):
        # Main container
        main_container = ctk.CTkScrollableFrame(self, fg_color=Theme.BACKGROUND)
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Hero section with gradient background
        hero_frame = ctk.CTkFrame(main_container, fg_color="#667EEA", corner_radius=Theme.CORNER_RADIUS)
        hero_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        # Logo and title
        title_frame = ctk.CTkFrame(hero_frame, fg_color="transparent")
        title_frame.pack(pady=40)
        
        # Large logo/icon
        logo_label = ctk.CTkLabel(title_frame, text="üíª", font=("Segoe UI", 80))
        logo_label.pack(pady=(0, 20))
        
        ctk.CTkLabel(title_frame, text="LaptopTester Pro", 
                    font=("Segoe UI", 36, "bold"), text_color="white").pack()
        
        ctk.CTkLabel(title_frame, text="Ph·∫ßn m·ªÅm ki·ªÉm tra laptop to√†n di·ªán h√†ng ƒë·∫ßu Vi·ªát Nam", 
                    font=("Segoe UI", 18), text_color="#E2E8F0").pack(pady=(10, 0))
        
        # Version and build info
        version_frame = ctk.CTkFrame(hero_frame, fg_color="transparent")
        version_frame.pack(pady=(0, 30))
        
        ctk.CTkLabel(version_frame, text="Phi√™n b·∫£n 2.0 | Build 2024.12", 
                    font=Theme.BODY_FONT, text_color="#CBD5E0").pack()
        
        # Features overview
        features_frame = ctk.CTkFrame(main_container, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        features_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(features_frame, text="üåü T√≠nh nƒÉng n·ªïi b·∫≠t", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        # Features grid
        features_grid = ctk.CTkFrame(features_frame, fg_color="transparent")
        features_grid.pack(fill="x", padx=30, pady=(0, 30))
        features_grid.grid_columnconfigure((0, 1), weight=1)
        
        features = [
            ("üé®", "Giao di·ªán hi·ªán ƒë·∫°i", "CustomTkinter v·ªõi animation m∆∞·ª£t m√†"),
            ("üìä", "Ki·ªÉm tra to√†n di·ªán", "15+ b∆∞·ªõc ki·ªÉm tra t·ª´ ph·∫ßn c·ª©ng ƒë·∫øn ph·∫ßn m·ªÅm"),
            ("üîÑ", "T·ª± ƒë·ªông h√≥a cao", "T√≠ch h·ª£p c√°c tools chuy√™n nghi·ªáp"),
            ("üì±", "Responsive", "Giao di·ªán th√≠ch ·ª©ng v·ªõi nhi·ªÅu k√≠ch th∆∞·ªõc m√†n h√¨nh"),
            ("üéØ", "B√°o c√°o chi ti·∫øt", "Export k·∫øt qu·∫£ d∆∞·ªõi nhi·ªÅu ƒë·ªãnh d·∫°ng"),
            ("üîß", "ƒêa n·ªÅn t·∫£ng", "H·ªó tr·ª£ Windows (t·ªëi ∆∞u), Linux, macOS")
        ]
        
        for i, (icon, title, desc) in enumerate(features):
            row, col = i // 2, i % 2
            
            feature_card = ctk.CTkFrame(features_grid, fg_color=Theme.CARD, corner_radius=8)
            feature_card.grid(row=row, column=col, padx=10, pady=8, sticky="ew")
            
            # Icon
            ctk.CTkLabel(feature_card, text=icon, font=("Segoe UI", 24)).pack(pady=(15, 5))
            
            # Title
            ctk.CTkLabel(feature_card, text=title, font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.TEXT).pack(pady=(0, 5))
            
            # Description
            ctk.CTkLabel(feature_card, text=desc, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY, wraplength=250, 
                        justify="center").pack(pady=(0, 15))
        
        # What's new section
        whats_new_frame = ctk.CTkFrame(main_container, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        whats_new_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(whats_new_frame, text="üÜï C√≥ g√¨ m·ªõi trong phi√™n b·∫£n 2.0", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        new_features = [
            "‚ú® Giao di·ªán ho√†n to√†n m·ªõi v·ªõi CustomTkinter",
            "ü§ñ T√≠ch h·ª£p AI ph√¢n t√≠ch model laptop",
            "üìä Bi·ªÉu ƒë·ªì real-time cho thermal monitoring",
            "üé• Webcam test v·ªõi ph√°t hi·ªán v·∫≠t c·∫£n",
            "üîä Audio test v·ªõi waveform visualization",
            "‚ö° T·ªëi ∆∞u hi·ªáu nƒÉng v√† t·ªëc ƒë·ªô test",
            "üåê H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ (Vi·ªát/English)",
            "üì± Responsive design cho nhi·ªÅu ƒë·ªô ph√¢n gi·∫£i"
        ]
        
        for feature in new_features:
            feature_item = ctk.CTkFrame(whats_new_frame, fg_color="transparent")
            feature_item.pack(fill="x", padx=30, pady=2)
            
            ctk.CTkLabel(feature_item, text=feature, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT).pack(anchor="w")
        
        # System requirements
        requirements_frame = ctk.CTkFrame(main_container, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        requirements_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(requirements_frame, text="üíª Y√™u c·∫ßu h·ªá th·ªëng", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        req_grid = ctk.CTkFrame(requirements_frame, fg_color="transparent")
        req_grid.pack(fill="x", padx=30, pady=(0, 30))
        req_grid.grid_columnconfigure((0, 1), weight=1)
        
        requirements = [
            ("H·ªá ƒëi·ªÅu h√†nh", "Windows 10/11 (khuy·∫øn ngh·ªã), Linux, macOS"),
            ("Python", "3.8 tr·ªü l√™n"),
            ("RAM", "4GB+ (8GB khuy·∫øn ngh·ªã)"),
            ("·ªî c·ª©ng", "500MB+ dung l∆∞·ª£ng tr·ªëng"),
            ("Quy·ªÅn truy c·∫≠p", "Administrator (Windows) cho m·ªôt s·ªë t√≠nh nƒÉng"),
            ("K·∫øt n·ªëi", "Internet (cho AI analysis v√† updates)")
        ]
        
        for i, (label, value) in enumerate(requirements):
            row = i // 2
            col = i % 2
            
            req_item = ctk.CTkFrame(req_grid, fg_color=Theme.CARD, corner_radius=8)
            req_item.grid(row=row, column=col, padx=10, pady=5, sticky="ew")
            
            ctk.CTkLabel(req_item, text=label, font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.ACCENT).pack(pady=(15, 5))
            
            ctk.CTkLabel(req_item, text=value, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY, wraplength=300, 
                        justify="center").pack(pady=(0, 15))
        
        # Action buttons
        self.create_action_buttons(main_container)
    
    def create_action_buttons(self, parent):
        """T·∫°o c√°c n√∫t h√†nh ƒë·ªông"""
        button_frame = ctk.CTkFrame(parent, fg_color="transparent")
        button_frame.pack(fill="x", pady=30)
        
        # Continue button
        continue_btn = ctk.CTkButton(
            button_frame, 
            text="üöÄ B·∫Æt ƒê·∫¶U S·ª¨ D·ª§NG", 
            command=self.handle_continue,
            font=("Segoe UI", 16, "bold"), 
            height=55, 
            corner_radius=28,
            fg_color="#16A34A", 
            hover_color="#15803D", 
            text_color="white",
            border_width=2, 
            border_color="white"
        )
        continue_btn.pack(side="left", padx=(0, 20), fill="x", expand=True)
        
        # Skip intro button
        skip_btn = ctk.CTkButton(
            button_frame, 
            text="‚è≠Ô∏è B·ªé QUA GI·ªöI THI·ªÜU", 
            command=self.handle_skip,
            font=("Segoe UI", 14, "bold"), 
            height=45, 
            corner_radius=22,
            fg_color="#6B7280", 
            hover_color="#4B5563", 
            text_color="white"
        )
        skip_btn.pack(side="right", padx=(20, 0))
    
    def handle_continue(self):
        """X·ª≠ l√Ω khi nh·∫•n Continue"""
        if self.on_continue:
            self.on_continue()
    
    def handle_skip(self):
        """X·ª≠ l√Ω khi nh·∫•n Skip"""
        if self.on_skip:
            self.on_skip()

class GuideFrame(ctk.CTkFrame):
    """M√†n h√¨nh h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    
    def __init__(self, master, on_back=None):
        super().__init__(master, fg_color="transparent")
        self.on_back = on_back
        self.setup_ui()
    
    def setup_ui(self):
        # Header with back button
        header_frame = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=80, corner_radius=Theme.CORNER_RADIUS)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        header_frame.pack_propagate(False)
        header_frame.grid_columnconfigure(1, weight=1)
        
        # Back button
        back_btn = ctk.CTkButton(
            header_frame, 
            text="‚Üê QUAY L·∫†I", 
            command=self.handle_back,
            width=120, 
            height=40, 
            font=("Segoe UI", 12, "bold"),
            fg_color="#ED4245", 
            hover_color="#C73E41", 
            text_color="white",
            corner_radius=20, 
            border_width=2, 
            border_color="white"
        )
        back_btn.grid(row=0, column=0, padx=20, pady=20)
        
        # Title
        ctk.CTkLabel(header_frame, text="üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).grid(row=0, column=1, pady=20)
        
        # Main content
        main_container = ctk.CTkScrollableFrame(self, fg_color=Theme.BACKGROUND)
        main_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Quick start guide
        self.create_quick_start_section(main_container)
        
        # Detailed guides
        self.create_detailed_guides_section(main_container)
        
        # Tips and tricks
        self.create_tips_section(main_container)
        
        # Troubleshooting
        self.create_troubleshooting_section(main_container)
    
    def create_quick_start_section(self, parent):
        """T·∫°o ph·∫ßn h∆∞·ªõng d·∫´n nhanh"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(section_frame, text="üöÄ B·∫Øt ƒë·∫ßu nhanh", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        steps = [
            ("1Ô∏è‚É£", "Ch·ªçn ch·∫ø ƒë·ªô", "Basic Mode cho ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng, Expert Mode cho chuy√™n gia"),
            ("2Ô∏è‚É£", "B·∫Øt ƒë·∫ßu test", "Ch·ªçn 'Test To√†n Di·ªán' ho·∫∑c 'Test T·ª´ng Ph·∫ßn'"),
            ("3Ô∏è‚É£", "L√†m theo h∆∞·ªõng d·∫´n", "ƒê·ªçc k·ªπ h∆∞·ªõng d·∫´n ·ªü panel b√™n tr√°i m·ªói b∆∞·ªõc"),
            ("4Ô∏è‚É£", "ƒê√°nh gi√° k·∫øt qu·∫£", "Xem b√°o c√°o t·ªïng k·∫øt v√† export n·∫øu c·∫ßn")
        ]
        
        for icon, title, desc in steps:
            step_frame = ctk.CTkFrame(section_frame, fg_color=Theme.CARD, corner_radius=8)
            step_frame.pack(fill="x", padx=30, pady=8)
            
            content_frame = ctk.CTkFrame(step_frame, fg_color="transparent")
            content_frame.pack(fill="x", padx=20, pady=15)
            content_frame.grid_columnconfigure(1, weight=1)
            
            # Icon
            ctk.CTkLabel(content_frame, text=icon, font=("Segoe UI", 24)).grid(row=0, column=0, padx=(0, 15))
            
            # Title and description
            text_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
            text_frame.grid(row=0, column=1, sticky="ew")
            
            ctk.CTkLabel(text_frame, text=title, font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.TEXT).pack(anchor="w")
            ctk.CTkLabel(text_frame, text=desc, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY, wraplength=600).pack(anchor="w")
    
    def create_detailed_guides_section(self, parent):
        """T·∫°o ph·∫ßn h∆∞·ªõng d·∫´n chi ti·∫øt"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(section_frame, text="üìã H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        # Create tabview for different test categories
        guide_tabview = ctk.CTkTabview(section_frame, width=800, height=400)
        guide_tabview.pack(padx=30, pady=(0, 30))
        
        # Basic tests tab
        guide_tabview.add("üîß Tests C∆° B·∫£n")
        basic_tab = guide_tabview.tab("üîß Tests C∆° B·∫£n")
        
        basic_tests = [
            ("ƒê·ªãnh danh ph·∫ßn c·ª©ng", "ƒê·ªçc th√¥ng tin t·ª´ BIOS, kh√≥ l√†m gi·∫£. So s√°nh v·ªõi qu·∫£ng c√°o."),
            ("B·∫£n quy·ªÅn Windows", "Ki·ªÉm tra license h·ª£p l·ªá. Quan tr·ªçng cho updates b·∫£o m·∫≠t."),
            ("C·∫•u h√¨nh h·ªá th·ªëng", "So s√°nh th√¥ng tin Windows v·ªõi BIOS ƒë·ªÉ ph√°t hi·ªán sai l·ªách."),
            ("S·ª©c kh·ªèe ·ªï c·ª©ng", "ƒê·ªçc S.M.A.R.T data ƒë·ªÉ ƒë√°nh gi√° ƒë·ªô b·ªÅn ·ªï c·ª©ng."),
            ("Ki·ªÉm tra m√†n h√¨nh", "Test pixel ch·∫øt, h·ªü s√°ng, √°m m√†u v·ªõi c√°c m√†u chu·∫©n."),
            ("B√†n ph√≠m & Touchpad", "Test t·ª´ng ph√≠m v√† c·ª≠ ch·ªâ touchpad v·ªõi visual feedback."),
            ("C·ªïng k·∫øt n·ªëi", "Ki·ªÉm tra USB, HDMI, audio, s·∫°c v·ªõi checklist chi ti·∫øt."),
            ("Pin laptop", "ƒê√°nh gi√° s·ª©c kh·ªèe pin, chu k·ª≥ s·∫°c, dung l∆∞·ª£ng th·ª±c t·∫ø."),
            ("Loa & Micro", "Test √¢m thanh v·ªõi waveform, ph√°t hi·ªán r√®, m√©o ti·∫øng."),
            ("Webcam", "Test camera v·ªõi ph√°t hi·ªán v·∫≠t c·∫£n v√† ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng.")
        ]
        
        for test_name, description in basic_tests:
            test_item = ctk.CTkFrame(basic_tab, fg_color=Theme.BACKGROUND, corner_radius=6)
            test_item.pack(fill="x", padx=10, pady=4)
            
            ctk.CTkLabel(test_item, text=f"‚Ä¢ {test_name}", font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.ACCENT).pack(anchor="w", padx=15, pady=(10, 5))
            ctk.CTkLabel(test_item, text=description, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY, wraplength=700).pack(anchor="w", padx=15, pady=(0, 10))
        
        # Expert tests tab
        guide_tabview.add("üî• Tests Chuy√™n Gia")
        expert_tab = guide_tabview.tab("üî• Tests Chuy√™n Gia")
        
        expert_tests = [
            ("CPU Stress Test", "ƒê·∫©y CPU l√™n 100% t·∫£i ƒë·ªÉ test thermal throttling v√† ·ªïn ƒë·ªãnh."),
            ("GPU Stress Test", "Test ƒë·ªì h·ªça n·∫∑ng ƒë·ªÉ ph√°t hi·ªán artifacts v√† qu√° nhi·ªát GPU."),
            ("T·ªëc ƒë·ªô ·ªï c·ª©ng", "Benchmark read/write speed th·ª±c t·∫ø v·ªõi file test 100MB."),
            ("Thermal Monitor", "Gi√°m s√°t nhi·ªát ƒë·ªô real-time v·ªõi bi·ªÉu ƒë·ªì v√† c·∫£nh b√°o."),
            ("Ki·ªÉm tra BIOS", "H∆∞·ªõng d·∫´n v√†o BIOS v√† ki·ªÉm tra c√°c c√†i ƒë·∫∑t quan tr·ªçng."),
            ("Ki·ªÉm tra ngo·∫°i h√¨nh", "Checklist chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng v·∫≠t l√Ω v√† d·∫•u hi·ªáu h∆∞ h·ªèng.")
        ]
        
        for test_name, description in expert_tests:
            test_item = ctk.CTkFrame(expert_tab, fg_color=Theme.BACKGROUND, corner_radius=6)
            test_item.pack(fill="x", padx=10, pady=4)
            
            ctk.CTkLabel(test_item, text=f"üî• {test_name}", font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.ERROR).pack(anchor="w", padx=15, pady=(10, 5))
            ctk.CTkLabel(test_item, text=description, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY, wraplength=700).pack(anchor="w", padx=15, pady=(0, 10))
    
    def create_tips_section(self, parent):
        """T·∫°o ph·∫ßn m·∫πo v√† th·ªß thu·∫≠t"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(section_frame, text="üí° M·∫πo v√† th·ªß thu·∫≠t", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        tips = [
            ("üéØ", "ƒê·ªçc k·∫øt qu·∫£", "Xanh = T·ªët, V√†ng = C·∫£nh b√°o, ƒê·ªè = L·ªói nghi√™m tr·ªçng"),
            ("‚ö°", "T·ªëi ∆∞u test", "Ch·∫°y v·ªõi quy·ªÅn Admin ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t"),
            ("üîç", "So s√°nh th√¥ng tin", "Lu√¥n ƒë·ªëi chi·∫øu v·ªõi th√¥ng tin qu·∫£ng c√°o c·ªßa ng∆∞·ªùi b√°n"),
            ("üìä", "Export b√°o c√°o", "L∆∞u k·∫øt qu·∫£ ƒë·ªÉ tham kh·∫£o sau ho·∫∑c g·ª≠i cho chuy√™n gia"),
            ("üõ°Ô∏è", "An to√†n", "T·∫•t c·∫£ tests ƒë·ªÅu non-destructive, kh√¥ng l√†m h·ªèng m√°y"),
            ("üîÑ", "Test l·∫°i", "C√≥ th·ªÉ ch·∫°y l·∫°i b·∫•t k·ª≥ test n√†o n·∫øu k·∫øt qu·∫£ kh√¥ng ch·∫Øc ch·∫Øn")
        ]
        
        tips_grid = ctk.CTkFrame(section_frame, fg_color="transparent")
        tips_grid.pack(fill="x", padx=30, pady=(0, 30))
        tips_grid.grid_columnconfigure((0, 1), weight=1)
        
        for i, (icon, title, desc) in enumerate(tips):
            row, col = i // 2, i % 2
            
            tip_card = ctk.CTkFrame(tips_grid, fg_color=Theme.CARD, corner_radius=8)
            tip_card.grid(row=row, column=col, padx=10, pady=8, sticky="ew")
            
            ctk.CTkLabel(tip_card, text=icon, font=("Segoe UI", 24)).pack(pady=(15, 5))
            ctk.CTkLabel(tip_card, text=title, font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.TEXT).pack(pady=(0, 5))
            ctk.CTkLabel(tip_card, text=desc, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY, wraplength=250, 
                        justify="center").pack(pady=(0, 15))
    
    def create_troubleshooting_section(self, parent):
        """T·∫°o ph·∫ßn kh·∫Øc ph·ª•c s·ª± c·ªë"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(section_frame, text="üîß Kh·∫Øc ph·ª•c s·ª± c·ªë", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        issues = [
            ("Import errors", "C√†i ƒë·∫∑t l·∫°i: pip install -r requirements.txt"),
            ("Permission denied", "Ch·∫°y v·ªõi quy·ªÅn Administrator (Run as Admin)"),
            ("Worker timeouts", "TƒÉng timeout trong settings ho·∫∑c restart app"),
            ("UI not responsive", "Update CustomTkinter: pip install --upgrade customtkinter"),
            ("Camera kh√¥ng ho·∫°t ƒë·ªông", "Ki·ªÉm tra driver camera v√† quy·ªÅn truy c·∫≠p"),
            ("Audio test l·ªói", "Ki·ªÉm tra driver √¢m thanh v√† microphone permissions"),
            ("Stress test crash", "Gi·∫£m th·ªùi gian test ho·∫∑c ki·ªÉm tra thermal throttling"),
            ("BIOS kh√¥ng v√†o ƒë∆∞·ª£c", "Th·ª≠ c√°c ph√≠m kh√°c: F2, F12, Del, ESC t√πy h√£ng")
        ]
        
        for issue, solution in issues:
            issue_frame = ctk.CTkFrame(section_frame, fg_color=Theme.CARD, corner_radius=8)
            issue_frame.pack(fill="x", padx=30, pady=5)
            
            content_frame = ctk.CTkFrame(issue_frame, fg_color="transparent")
            content_frame.pack(fill="x", padx=20, pady=15)
            content_frame.grid_columnconfigure(1, weight=1)
            
            # Problem icon
            ctk.CTkLabel(content_frame, text="‚ùå", font=("Segoe UI", 20)).grid(row=0, column=0, padx=(0, 15))
            
            # Problem and solution
            text_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
            text_frame.grid(row=0, column=1, sticky="ew")
            
            ctk.CTkLabel(text_frame, text=f"V·∫•n ƒë·ªÅ: {issue}", font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.ERROR).pack(anchor="w")
            ctk.CTkLabel(text_frame, text=f"Gi·∫£i ph√°p: {solution}", font=Theme.BODY_FONT, 
                        text_color=Theme.SUCCESS, wraplength=600).pack(anchor="w")
        
        # Contact support
        support_frame = ctk.CTkFrame(section_frame, fg_color="#E3F2FD", corner_radius=8)
        support_frame.pack(fill="x", padx=30, pady=(20, 30))
        
        ctk.CTkLabel(support_frame, text="üìû C·∫ßn h·ªó tr·ª£ th√™m?", 
                    font=Theme.SUBHEADING_FONT, text_color="#1565C0").pack(pady=(15, 10))
        
        ctk.CTkLabel(support_frame, text="Email: support@laptoptester.com | GitHub Issues | Community Forum", 
                    font=Theme.BODY_FONT, text_color="#424242").pack(pady=(0, 15))
    
    def handle_back(self):
        """X·ª≠ l√Ω khi nh·∫•n Back"""
        if self.on_back:
            self.on_back()

class AboutFrame(ctk.CTkFrame):
    """M√†n h√¨nh th√¥ng tin v·ªÅ ·ª©ng d·ª•ng"""
    
    def __init__(self, master, on_back=None):
        super().__init__(master, fg_color="transparent")
        self.on_back = on_back
        self.setup_ui()
    
    def setup_ui(self):
        # Header with back button
        header_frame = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=80, corner_radius=Theme.CORNER_RADIUS)
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        header_frame.pack_propagate(False)
        header_frame.grid_columnconfigure(1, weight=1)
        
        # Back button
        back_btn = ctk.CTkButton(
            header_frame, 
            text="‚Üê QUAY L·∫†I", 
            command=self.handle_back,
            width=120, 
            height=40, 
            font=("Segoe UI", 12, "bold"),
            fg_color="#ED4245", 
            hover_color="#C73E41", 
            text_color="white",
            corner_radius=20, 
            border_width=2, 
            border_color="white"
        )
        back_btn.grid(row=0, column=0, padx=20, pady=20)
        
        # Title
        ctk.CTkLabel(header_frame, text="‚ÑπÔ∏è TH√îNG TIN ·ª®NG D·ª§NG", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).grid(row=0, column=1, pady=20)
        
        # Main content
        main_container = ctk.CTkScrollableFrame(self, fg_color=Theme.BACKGROUND)
        main_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # App info section
        self.create_app_info_section(main_container)
        
        # Team section
        self.create_team_section(main_container)
        
        # License section
        self.create_license_section(main_container)
        
        # Changelog section
        self.create_changelog_section(main_container)
    
    def create_app_info_section(self, parent):
        """T·∫°o ph·∫ßn th√¥ng tin ·ª©ng d·ª•ng"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        # App logo and basic info
        info_frame = ctk.CTkFrame(section_frame, fg_color="transparent")
        info_frame.pack(pady=30)
        
        # Large logo
        ctk.CTkLabel(info_frame, text="üíª", font=("Segoe UI", 80)).pack(pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text="LaptopTester Pro", 
                    font=("Segoe UI", 32, "bold"), text_color=Theme.ACCENT).pack()
        
        ctk.CTkLabel(info_frame, text="Ph·∫ßn m·ªÅm ki·ªÉm tra laptop to√†n di·ªán", 
                    font=Theme.SUBHEADING_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=(10, 20))
        
        # Version info
        version_grid = ctk.CTkFrame(section_frame, fg_color="transparent")
        version_grid.pack(fill="x", padx=30, pady=(0, 30))
        version_grid.grid_columnconfigure((0, 1), weight=1)
        
        version_info = [
            ("Phi√™n b·∫£n", "2.0.0"),
            ("Build", "2024.12.15"),
            ("Python", "3.8+"),
            ("Framework", "CustomTkinter"),
            ("N·ªÅn t·∫£ng", "Windows, Linux, macOS"),
            ("Gi·∫•y ph√©p", "Commercial License")
        ]
        
        for i, (label, value) in enumerate(version_info):
            row, col = i // 2, i % 2
            
            info_card = ctk.CTkFrame(version_grid, fg_color=Theme.CARD, corner_radius=8)
            info_card.grid(row=row, column=col, padx=10, pady=5, sticky="ew")
            
            ctk.CTkLabel(info_card, text=label, font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.ACCENT).pack(pady=(15, 5))
            ctk.CTkLabel(info_card, text=value, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT).pack(pady=(0, 15))
    
    def create_team_section(self, parent):
        """T·∫°o ph·∫ßn th√¥ng tin team"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(section_frame, text="üë• ƒê·ªôi ng≈© ph√°t tri·ªÉn", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        team_members = [
            ("üßë‚Äçüíª", "Lead Developer", "Ph√°t tri·ªÉn core engine v√† UI"),
            ("üé®", "UI/UX Designer", "Thi·∫øt k·∫ø giao di·ªán v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng"),
            ("üî¨", "QA Engineer", "Ki·ªÉm th·ª≠ ch·∫•t l∆∞·ª£ng v√† t·ªëi ∆∞u hi·ªáu nƒÉng"),
            ("üìù", "Technical Writer", "Vi·∫øt t√†i li·ªáu v√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        ]
        
        team_grid = ctk.CTkFrame(section_frame, fg_color="transparent")
        team_grid.pack(fill="x", padx=30, pady=(0, 30))
        team_grid.grid_columnconfigure((0, 1), weight=1)
        
        for i, (icon, role, desc) in enumerate(team_members):
            row, col = i // 2, i % 2
            
            member_card = ctk.CTkFrame(team_grid, fg_color=Theme.CARD, corner_radius=8)
            member_card.grid(row=row, column=col, padx=10, pady=8, sticky="ew")
            
            ctk.CTkLabel(member_card, text=icon, font=("Segoe UI", 32)).pack(pady=(20, 10))
            ctk.CTkLabel(member_card, text=role, font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.TEXT).pack(pady=(0, 5))
            ctk.CTkLabel(member_card, text=desc, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY, wraplength=250, 
                        justify="center").pack(pady=(0, 20))
    
    def create_license_section(self, parent):
        """T·∫°o ph·∫ßn th√¥ng tin gi·∫•y ph√©p"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(section_frame, text="üìÑ Gi·∫•y ph√©p v√† b·∫£n quy·ªÅn", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        license_text = """
Copyright ¬© 2024 LaptopTester Team. All rights reserved.

Ph·∫ßn m·ªÅm n√†y ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi lu·∫≠t b·∫£n quy·ªÅn. Vi·ªác s·ª≠ d·ª•ng, sao ch√©p, 
ph√¢n ph·ªëi ho·∫∑c ch·ªânh s·ª≠a ph·∫ßn m·ªÅm n√†y c·∫ßn c√≥ s·ª± cho ph√©p b·∫±ng vƒÉn b·∫£n 
t·ª´ LaptopTester Team.

ƒê·ªÉ s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch th∆∞∆°ng m·∫°i, vui l√≤ng li√™n h·ªá:
üìß licensing@laptoptester.com
üì± Hotline: 1900-xxxx-xxx

Ph·∫ßn m·ªÅm ƒë∆∞·ª£c cung c·∫•p "nh∆∞ hi·ªán t·∫°i" m√† kh√¥ng c√≥ b·∫•t k·ª≥ b·∫£o ƒë·∫£m n√†o.
        """
        
        license_display = ctk.CTkTextbox(section_frame, height=200, font=Theme.BODY_FONT, 
                                        fg_color=Theme.BACKGROUND, text_color=Theme.TEXT)
        license_display.pack(fill="x", padx=30, pady=(0, 30))
        license_display.insert("0.0", license_text.strip())
        license_display.configure(state="disabled")
    
    def create_changelog_section(self, parent):
        """T·∫°o ph·∫ßn changelog"""
        section_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        section_frame.pack(fill="x", pady=(0, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(section_frame, text="üìã L·ªãch s·ª≠ c·∫≠p nh·∫≠t", 
                    font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(30, 20))
        
        changelog_data = [
            ("v2.0.0", "2024-12-15", [
                "Giao di·ªán ho√†n to√†n m·ªõi v·ªõi CustomTkinter",
                "T√≠ch h·ª£p AI ph√¢n t√≠ch model laptop", 
                "Th√™m thermal monitoring real-time",
                "C·∫£i thi·ªán webcam v√† audio tests",
                "H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ"
            ]),
            ("v1.5.2", "2024-11-20", [
                "S·ª≠a l·ªói stress test tr√™n m·ªôt s·ªë CPU",
                "C·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c battery test",
                "Th√™m h·ªó tr·ª£ cho GPU m·ªõi"
            ]),
            ("v1.5.0", "2024-10-15", [
                "Th√™m GPU stress test",
                "C·∫£i thi·ªán UI/UX",
                "T·ªëi ∆∞u hi·ªáu nƒÉng"
            ])
        ]
        
        for version, date, changes in changelog_data:
            version_frame = ctk.CTkFrame(section_frame, fg_color=Theme.CARD, corner_radius=8)
            version_frame.pack(fill="x", padx=30, pady=8)
            
            # Version header
            header_frame = ctk.CTkFrame(version_frame, fg_color="transparent")
            header_frame.pack(fill="x", padx=20, pady=(15, 10))
            header_frame.grid_columnconfigure(1, weight=1)
            
            ctk.CTkLabel(header_frame, text=version, font=Theme.SUBHEADING_FONT, 
                        text_color=Theme.ACCENT).grid(row=0, column=0, sticky="w")
            ctk.CTkLabel(header_frame, text=date, font=Theme.BODY_FONT, 
                        text_color=Theme.TEXT_SECONDARY).grid(row=0, column=1, sticky="e")
            
            # Changes list
            for change in changes:
                change_frame = ctk.CTkFrame(version_frame, fg_color="transparent")
                change_frame.pack(fill="x", padx=20, pady=2)
                
                ctk.CTkLabel(change_frame, text=f"‚Ä¢ {change}", font=Theme.BODY_FONT, 
                            text_color=Theme.TEXT).pack(anchor="w")
            
            # Add bottom padding
            ctk.CTkFrame(version_frame, fg_color="transparent", height=10).pack()
    
    def handle_back(self):
        """X·ª≠ l√Ω khi nh·∫•n Back"""
        if self.on_back:
            self.on_back()

# Utility function to create home button
def create_home_button(parent, command, **kwargs):
    """T·∫°o n√∫t Home chu·∫©n ƒë·ªÉ quay v·ªÅ m√†n h√¨nh ch√≠nh"""
    default_kwargs = {
        "text": "üè† TRANG CH·ª¶",
        "font": ("Segoe UI", 12, "bold"),
        "width": 140,
        "height": 40,
        "fg_color": "#5865F2",
        "hover_color": "#4752C4",
        "text_color": "white",
        "corner_radius": 20,
        "border_width": 2,
        "border_color": "white",
        "command": command
    }
    default_kwargs.update(kwargs)
    
    return ctk.CTkButton(parent, **default_kwargs)

if __name__ == "__main__":
    # Test the frames
    app = ctk.CTk()
    app.title("Test Intro/Guide Frames")
    app.geometry("1200x800")
    
    def show_intro():
        frame = IntroFrame(app, on_continue=show_guide, on_skip=lambda: print("Skipped"))
        frame.pack(fill="both", expand=True)
    
    def show_guide():
        for widget in app.winfo_children():
            widget.destroy()
        frame = GuideFrame(app, on_back=show_intro)
        frame.pack(fill="both", expand=True)
    
    show_intro()
    app.mainloop()