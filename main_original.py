#!/usr/bin/env python3
"""
LaptopTester Pro - Original Version
Kh√¥i ph·ª•c phi√™n b·∫£n g·ªëc v·ªõi checklist ƒë·∫ßy ƒë·ªß
"""

import multiprocessing
import sys
import os
import platform
import threading
import time
import tkinter as tk
import customtkinter as ctk
import psutil
from PIL import Image
import wmi
import pythoncom

# Theme definition
class Theme:
    # Colors - Modern design system
    BACKGROUND="#F8FAFC"; FRAME="#FFFFFF"; CARD="#FFFFFF"; BORDER="#E2E8F0"; SEPARATOR = "#F1F5F9"
    TEXT="#0F172A"; TEXT_SECONDARY="#64748B"; ACCENT="#3B82F6"; ACCENT_HOVER="#2563EB"
    SUCCESS="#10B981"; WARNING="#F59E0B"; ERROR="#EF4444"; SKIP="#94A3B8"; SKIP_HOVER="#64748B"
    INFO="#06B6D4"; GRADIENT_START="#3B82F6"; GRADIENT_END="#8B5CF6"
    # Typography - Improved hierarchy
    TITLE_FONT=("Segoe UI", 42, "bold"); HEADING_FONT=("Segoe UI", 28, "bold"); SUBHEADING_FONT=("Segoe UI", 22, "bold")
    BODY_FONT=("Segoe UI", 16); SMALL_FONT=("Segoe UI", 14); KEY_FONT = ("Segoe UI", 11)
    BUTTON_FONT=("Segoe UI", 14)
    # Layout - Better spacing
    CORNER_RADIUS = 12; PADDING_X = 24; PADDING_Y = 20; BUTTON_HEIGHT = 48
    CARD_PADDING = 20; SECTION_SPACING = 16; ELEMENT_SPACING = 12

class IconManager:
    def __init__(self):
        self.CHECK = None; self.CROSS = None; self.SKIP_ICON = None; self.WHY = None; self.HOW = None
        self.LOGO_SMALL = None

def asset_path(rel_path):
    return os.path.join(os.path.dirname(__file__), 'assets', rel_path)

# Enhanced BaseStepFrame
class BaseStepFrame(ctk.CTkFrame):
    def __init__(self, master, title, why_text, how_text, **kwargs):
        super().__init__(master, fg_color="transparent")
        self.grid_columnconfigure(1, weight=1); self.grid_rowconfigure(0, weight=1)
        self.title = title
        # Extract callbacks from kwargs
        self.record_result = kwargs.get("record_result_callback")
        self.enable_next_callback = kwargs.get("enable_next_callback")
        self.go_to_next_step_callback = kwargs.get("go_to_next_step_callback")
        self.icon_manager = kwargs.get("icon_manager")
        self.all_results = kwargs.get("all_results")
        
        self._completed, self._skipped = False, False
        self.after_id = None

        # Layout c√¢n b·∫±ng v√† t·∫≠n d·ª•ng kh√¥ng gian
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=2)  # Guide panel
        self.grid_columnconfigure(1, weight=3)  # Action panel - r·ªông h∆°n
        
        # Guide container (left panel)
        guide_container = ctk.CTkFrame(self, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        guide_container.grid(row=0, column=0, sticky="nsew", padx=(Theme.PADDING_X, Theme.ELEMENT_SPACING), pady=Theme.PADDING_Y)
        guide_container.grid_columnconfigure(0, weight=1)
        guide_container.grid_rowconfigure(0, weight=1)
        guide_container.grid_rowconfigure(1, weight=0)
        guide_container.grid_rowconfigure(2, weight=1)
        guide_container.grid_rowconfigure(3, weight=0)  # Tips frame
        
        why_frame = ctk.CTkFrame(guide_container, fg_color="transparent")
        why_frame.grid(row=0, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.CARD_PADDING)
        ctk.CTkLabel(why_frame, image=self.icon_manager.WHY if self.icon_manager else None, text=" T·∫°i sao c·∫ßn test?", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT, compound="left").pack(anchor="w")
        ctk.CTkLabel(why_frame, text=why_text, font=Theme.BODY_FONT, wraplength=380, justify="left", text_color=Theme.TEXT).pack(anchor="w", pady=(Theme.ELEMENT_SPACING,0))
        
        ctk.CTkFrame(guide_container, height=1, fg_color=Theme.SEPARATOR).grid(row=1, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.ELEMENT_SPACING)
        
        how_frame = ctk.CTkFrame(guide_container, fg_color="transparent")
        how_frame.grid(row=2, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.CARD_PADDING)
        ctk.CTkLabel(how_frame, image=self.icon_manager.HOW if self.icon_manager else None, text=" H∆∞·ªõng d·∫´n th·ª±c hi·ªán:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT, compound="left").pack(anchor="w")
        ctk.CTkLabel(how_frame, text=how_text, font=Theme.BODY_FONT, wraplength=380, justify="left", text_color=Theme.TEXT).pack(anchor="w", pady=(Theme.ELEMENT_SPACING,0))
        
        # Action container (right panel)
        action_container = ctk.CTkFrame(self, fg_color="transparent")
        action_container.grid(row=0, column=1, sticky="nsew", padx=(Theme.ELEMENT_SPACING, Theme.PADDING_X), pady=Theme.PADDING_Y)
        action_container.grid_columnconfigure(0, weight=1)
        action_container.grid_rowconfigure(0, weight=1)
        
        # Action frame
        self.action_frame = ctk.CTkFrame(action_container, fg_color=Theme.CARD, corner_radius=Theme.CORNER_RADIUS)
        self.action_frame.grid(row=0, column=0, sticky="nsew")
        self.action_frame.grid_columnconfigure(0, weight=1)

    def is_ready_to_proceed(self): return self._completed or self._skipped
    def mark_completed(self, result_data, auto_advance=False):
        self._completed = True
        self._skipped = False
        if self.record_result:
            self.record_result(self.title, result_data)
        if auto_advance and self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def mark_skipped(self, result_data): 
        self._skipped = True; self._completed = False
        if self.record_result:
            self.record_result(self.title, result_data)
        if self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def handle_result_generic(self, is_ok, ok_data, bad_data):
        if hasattr(self, 'btn_yes'):
            self.btn_yes.configure(state="disabled")
        if hasattr(self, 'btn_no'):
            self.btn_no.configure(state="disabled")
        result = ok_data if is_ok else bad_data
        if is_ok:
            if hasattr(self, 'btn_yes'):
                self.btn_yes.configure(fg_color=Theme.ACCENT)
            self.mark_completed(result, auto_advance=True)
        else:
            if hasattr(self, 'btn_no'):
                self.btn_no.configure(fg_color=Theme.WARNING)
            self.mark_completed(result, auto_advance=True)
    def stop_tasks(self):
        if self.after_id: self.after_cancel(self.after_id); self.after_id = None

# B∆∞·ªõc 1: Checklist ngo·∫°i h√¨nh
class PhysicalInspectionStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(
            master,
            "Ki·ªÉm Tra Ngo·∫°i H√¨nh",
            "T√¨nh tr·∫°ng v·∫≠t l√Ω ph·∫£n √°nh c√°ch ch·ªß c≈© s·ª≠ d·ª•ng m√°y. C√°c v·∫øt n·ª©t, m√≥p, b·∫£n l·ªÅ l·ªèng hay ·ªëc v√≠t b·ªã to√©t c√≥ th·ªÉ l√† d·∫•u hi·ªáu m√°y b·ªã r∆°i ho·∫∑c ƒë√£ qua s·ª≠a ch·ªØa kh√¥ng chuy√™n nghi·ªáp.",
            "**B√™n ngo√†i:**\n  ‚Ä¢ Ki·ªÉm tra c√°c v·∫øt tr·∫ßy x∆∞·ªõc, c·∫•n, m√≥p ·ªü c√°c g√≥c v√† m·∫∑t m√°y.\n  ‚Ä¢ M·ªü ra g·∫≠p v√†o nhi·ªÅu l·∫ßn, l·∫Øng nghe **ti·∫øng k√™u l·∫°** v√† c·∫£m nh·∫≠n **ƒë·ªô r∆°, l·ªèng l·∫ªo c·ªßa b·∫£n l·ªÅ**.\n  ‚Ä¢ C·∫Øm s·∫°c v√† lay nh·∫π ƒë·ªÉ ki·ªÉm tra **ƒë·ªô l·ªèng c·ªßa c·ªïng s·∫°c**.\n  ‚Ä¢ Nh√¨n k·ªπ c√°c con ·ªëc xem c√≥ b·ªã **to√©t ƒë·∫ßu, m·∫•t ·ªëc** hay kh√¥ng.\n**B√™n trong (N·∫øu c√≥ th·ªÉ):**\n  ‚Ä¢ Soi t√¨m d·∫•u hi·ªáu oxy h√≥a, b·ª•i b·∫©n, l√¥ng th√∫ c∆∞ng t√≠ch t·ª•.",
            **kwargs
        )
        self.create_inspection_checklist()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()
        # Mark as completed to enable navigation
        self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ hi·ªÉn th·ªã checklist", "Tr·∫°ng th√°i": "S·∫µn s√†ng"}, auto_advance=False)
    
    def create_inspection_checklist(self):
        """T·∫°o checklist ki·ªÉm tra ngo·∫°i h√¨nh chi ti·∫øt"""
        checklist_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        checklist_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        ctk.CTkLabel(checklist_frame, text="üîç Checklist Ki·ªÉm Tra Ngo·∫°i H√¨nh", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Exterior checks
        exterior_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        exterior_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(exterior_frame, text="üíª B√™n Ngo√†i:", font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        
        exterior_checks = [
            "‚Ä¢ V·ªè m√°y: Ki·ªÉm tra v·∫øt n·ª©t, r·∫°n n·ª©t, m√≥p m√©o",
            "‚Ä¢ B·∫£n l·ªÅ m√†n h√¨nh: M·ªü/ƒë√≥ng nhi·ªÅu l·∫ßn, nghe ti·∫øng k√™u",
            "‚Ä¢ B√†n ph√≠m: Ki·ªÉm tra ph√≠m l·ªèng, kh√¥ng nh·∫•n",
            "‚Ä¢ Touchpad: B·ªÅ m·∫∑t ph·∫≥ng, kh√¥ng b·ªã l·ªìi",
            "‚Ä¢ C·ªïng k·∫øt n·ªëi: USB, HDMI, audio, s·∫°c",
            "‚Ä¢ L·ªó tho√°t kh√≠: Kh√¥ng b·ªã b·ªãt t·∫Øc"
        ]
        
        for check in exterior_checks:
            ctk.CTkLabel(exterior_frame, text=check, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=20, pady=2)
        
        # Hardware checks
        hardware_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        hardware_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(hardware_frame, text="üî© Ph·∫ßn C·ª©ng:", font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        
        hardware_checks = [
            "‚Ä¢ ·ªêc v√≠t: Ki·ªÉm tra c√°c ·ªëc kh√¥ng b·ªã to√©t, thi·∫øu",
            "‚Ä¢ Nh√£n d√°n: C√≤n nguy√™n, kh√¥ng b·ªã x√≥a",
            "‚Ä¢ ƒê√®n LED: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
            "‚Ä¢ L∆∞·ªõi tho√°t kh√≠: S·∫°ch s·∫Ω, kh√¥ng b·ª•i b·∫©n"
        ]
        
        for check in hardware_checks:
            ctk.CTkLabel(hardware_frame, text=check, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=20, pady=2)
        
        # Warning signs
        warning_frame = ctk.CTkFrame(checklist_frame, fg_color="#FFF3CD", border_width=1, border_color=Theme.WARNING)
        warning_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(warning_frame, text="‚ö†Ô∏è D·∫•u Hi·ªáu C·∫£nh B√°o:", font=Theme.BODY_FONT, text_color=Theme.WARNING).pack(anchor="w", padx=10, pady=5)
        
        warnings = [
            "‚Ä¢ B·∫£n l·ªÅ r·∫•t l·ªèng ho·∫∑c k√™u k√®n k·∫πt",
            "‚Ä¢ C·ªïng s·∫°c l·ªèng, kh√¥ng gi·ªØ ch·∫∑t",
            "‚Ä¢ V·∫øt n·ª©t g·∫ßn b·∫£n l·ªÅ (nguy hi·ªÉm)",
            "‚Ä¢ M√πi l·∫° (ch√°y, h√≥a ch·∫•t)",
            "‚Ä¢ ·ªêc v√≠t b·ªã to√©t nhi·ªÅu (d·∫•u hi·ªáu th√°o l·∫Øp)"
        ]
        
        for warning in warnings:
            ctk.CTkLabel(warning_frame, text=warning, font=Theme.SMALL_FONT, text_color="#856404").pack(anchor="w", padx=20, pady=2)
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.result_container, text="D·ª±a tr√™n checklist tr√™n, t√¨nh tr·∫°ng v·∫≠t l√Ω t·ªïng th·ªÉ c·ªßa m√°y nh∆∞ th·∫ø n√†o?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        self.btn_excellent = ctk.CTkButton(button_bar, text="‚ú® R·∫•t t·ªët - Nh∆∞ m·ªõi", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "R·∫•t t·ªët - Nh∆∞ m·ªõi", "Tr·∫°ng th√°i": "Xu·∫•t s·∫Øc"}, {}), fg_color="#28a745", height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_excellent.pack(side="left", padx=5)
        
        self.btn_good = ctk.CTkButton(button_bar, text="‚úÖ T·ªët - V·∫øt nh·ªè", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "T·ªët - C√≥ v·∫øt s·ª≠ d·ª•ng nh·ªè", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_good.pack(side="left", padx=5)
        
        self.btn_fair = ctk.CTkButton(button_bar, text="‚ö†Ô∏è Trung b√¨nh - C√≥ l·ªói nh·ªè", image=self.icon_manager.WHY if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Trung b√¨nh - C√≥ l·ªói nh·ªè c·∫ßn l∆∞u √Ω", "Tr·∫°ng th√°i": "C·∫£nh b√°o"}, {}), fg_color=Theme.WARNING, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_fair.pack(side="left", padx=5)
        
        self.btn_poor = ctk.CTkButton(button_bar, text="‚ùå K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ", image=self.icon_manager.CROSS if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_poor.pack(side="left", padx=5)
        
        self.result_container.lift()
        self.result_container.update_idletasks()

# B∆∞·ªõc 2: BIOS
class BIOSCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        how_text = (
            "1. Kh·ªüi ƒë·ªông l·∫°i m√°y v√† nh·∫•n li√™n t·ª•c ph√≠m ƒë·ªÉ v√†o BIOS:\n"
            "   ‚Ä¢ **Dell/Alienware:** F2 ho·∫∑c F12\n"
            "   ‚Ä¢ **HP/Compaq:** F10 ho·∫∑c ESC\n"
            "   ‚Ä¢ **Lenovo/ThinkPad:** F1, F2 ho·∫∑c Enter\n"
            "   ‚Ä¢ **ASUS:** F2 ho·∫∑c Delete\n"
            "   ‚Ä¢ **Acer:** F2 ho·∫∑c Delete\n"
            "   ‚Ä¢ **MSI:** Delete ho·∫∑c F2\n\n"
            "2. Ki·ªÉm tra c√°c m·ª•c quan tr·ªçng:\n"
            "   ‚Ä¢ **CPU Features:** Intel Turbo Boost / AMD Boost ph·∫£i 'Enabled'\n"
            "   ‚Ä¢ **Memory:** XMP/DOCP profile n√™n b·∫≠t (n·∫øu c√≥)\n"
            "   ‚Ä¢ **Security:** Kh√¥ng c√≥ BIOS password l·∫°\n"
            "   ‚Ä¢ **‚ö†Ô∏è C·∫¢NH B√ÅO:** T√¨m 'Computrace' ho·∫∑c 'Absolute' - n·∫øu 'Enabled' th√¨ m√°y c√≥ th·ªÉ b·ªã kh√≥a t·ª´ xa!\n"
            "   ‚Ä¢ **Boot Order:** Ki·ªÉm tra th·ª© t·ª± kh·ªüi ƒë·ªông\n"
            "   ‚Ä¢ **Secure Boot:** N√™n ƒë·ªÉ 'Enabled' cho b·∫£o m·∫≠t"
        )
        super().__init__(master, "Ki·ªÉm Tra C√†i ƒê·∫∑t BIOS", "BIOS ch·ª©a c√°c c√†i ƒë·∫∑t n·ªÅn t·∫£ng. Ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu nƒÉng t·ªëi ∆∞u v√† kh√¥ng b·ªã kh√≥a b·ªüi c√°c t√≠nh nƒÉng doanh nghi·ªáp.", how_text, **kwargs)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()

    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="C√°c c√†i ƒë·∫∑t trong BIOS c√≥ ch√≠nh x√°c v√† an to√†n kh√¥ng?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="C√≥, m·ªçi c√†i ƒë·∫∑t ƒë·ªÅu ƒë√∫ng", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "C√†i ƒë·∫∑t ch√≠nh x√°c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(button_bar, text="Kh√¥ng, c√≥ c√†i ƒë·∫∑t sai/b·ªã kh√≥a", image=self.icon_manager.CROSS if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ v·∫•n ƒë·ªÅ v·ªõi c√†i ƒë·∫∑t BIOS", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)

# B∆∞·ªõc 3: ƒê·ªãnh danh ph·∫ßn c·ª©ng t·ª± ƒë·ªông
class HardwareFingerprintStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(
            master,
            "ƒê·ªãnh Danh Ph·∫ßn C·ª©ng",
            "ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng nh·∫•t ƒë·ªÉ ch·ªëng l·ª´a ƒë·∫£o. C√°c th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë∆∞·ª£c ƒë·ªçc tr·ª±c ti·∫øp t·ª´ BIOS v√† linh ki·ªán ph·∫ßn c·ª©ng. Ch√∫ng **c·ª±c k·ª≥ kh√≥ l√†m gi·∫£** t·ª´ b√™n trong Windows.",
            "H√£y so s√°nh c√°c th√¥ng tin 'v√†ng' n√†y v·ªõi c·∫•u h√¨nh m√† ng∆∞·ªùi b√°n qu·∫£ng c√°o. N·∫øu c√≥ b·∫•t k·ª≥ s·ª± sai l·ªách n√†o, h√£y ƒë·∫∑t c√¢u h·ªèi v√† ki·ªÉm tra th·∫≠t k·ªπ.",
            **kwargs
        )
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.action_frame.grid_rowconfigure(0, weight=1)
        self.info_labels = {}
        self.loading_spinner = ctk.CTkProgressBar(self.action_frame, mode="indeterminate", progress_color=Theme.ACCENT)
        self.loading_spinner.grid(row=0, column=0, pady=20, padx=20, sticky="ew")
        self.loading_spinner.start()
        self.container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        self.container.grid_columnconfigure(1, weight=1)
        self.info_items = ["Model Laptop", "Serial Number", "CPU", "GPU", "Model ·ªî C·ª©ng", "Ng√†y BIOS"]
        for idx, item in enumerate(self.info_items):
            row_frame = ctk.CTkFrame(self.container, fg_color="transparent")
            row_frame.grid(row=idx, column=0, sticky="w", pady=10, padx=20)
            ctk.CTkLabel(row_frame, text=f"{item}:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(side="left", padx=(0, 15))
            self.info_labels[item] = ctk.CTkLabel(row_frame, text="", justify="left", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY, wraplength=900)
            self.info_labels[item].pack(side="left")
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        threading.Thread(target=self.fetch_hardware_info, daemon=True).start()

    def fetch_hardware_info(self):
        hw_info = {k: "ƒêang ƒë·ªçc..." for k in self.info_items}
        if platform.system() == "Windows":
            pythoncom.CoInitializeEx(0)
            try:
                c = wmi.WMI()
                # L·∫•y th√¥ng tin h·ªá th·ªëng
                system_info = c.Win32_ComputerSystem()[0]
                hw_info["Model Laptop"] = f"{system_info.Manufacturer} {system_info.Model}"
                
                # L·∫•y th√¥ng tin BIOS
                bios = c.Win32_BIOS()[0]
                hw_info["Serial Number"] = getattr(bios, 'SerialNumber', 'N/A')
                
                # X·ª≠ l√Ω ng√†y BIOS an to√†n h∆°n
                try:
                    bios_date = getattr(bios, 'ReleaseDate', '')
                    if bios_date and len(bios_date) >= 8:
                        bios_date_str = bios_date.split('.')[0]
                        hw_info["Ng√†y BIOS"] = f"{bios_date_str[6:8]}/{bios_date_str[4:6]}/{bios_date_str[:4]}"
                    else:
                        hw_info["Ng√†y BIOS"] = "Kh√¥ng x√°c ƒë·ªãnh"
                except:
                    hw_info["Ng√†y BIOS"] = "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                
                # L·∫•y th√¥ng tin CPU
                try:
                    processors = c.Win32_Processor()
                    if processors:
                        cpu_name = processors[0].Name.strip()
                        hw_info["CPU"] = cpu_name
                        # L∆∞u th√™m th√¥ng tin CPU cho so s√°nh
                        self.bios_cpu_info = cpu_name
                    else:
                        hw_info["CPU"] = "Kh√¥ng t√¨m th·∫•y CPU"
                        self.bios_cpu_info = None
                except Exception as e:
                    hw_info["CPU"] = f"L·ªói ƒë·ªçc CPU: {e}"
                    self.bios_cpu_info = None
                
                # L·∫•y th√¥ng tin GPU
                try:
                    gpus = c.Win32_VideoController()
                    gpu_names = [gpu.Name for gpu in gpus if gpu.Name]
                    hw_info["GPU"] = "\n".join(gpu_names) if gpu_names else "Kh√¥ng t√¨m th·∫•y GPU"
                except:
                    hw_info["GPU"] = "L·ªói ƒë·ªçc GPU"
                
                # L·∫•y th√¥ng tin ·ªï c·ª©ng
                try:
                    drives = c.Win32_DiskDrive()
                    drive_models = [d.Model for d in drives if d.Model]
                    hw_info["Model ·ªî C·ª©ng"] = "\n".join(drive_models) if drive_models else "Kh√¥ng t√¨m th·∫•y ·ªï c·ª©ng"
                except:
                    hw_info["Model ·ªî C·ª©ng"] = "L·ªói ƒë·ªçc ·ªï c·ª©ng"
                    
            except Exception as e: 
                hw_info = {k: f"L·ªói WMI: {e}" for k in self.info_items}
                self.bios_cpu_info = None
            finally: 
                pythoncom.CoUninitialize()
        else: 
            hw_info = {k: "Ch·ªâ h·ªó tr·ª£ Windows" for k in self.info_items}
            self.bios_cpu_info = None
        if self.winfo_exists(): 
            self.after(0, self.display_info, hw_info)

    def display_info(self, hw_info):
        full_details = ""
        self.loading_spinner.grid_remove()
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        for key, value in hw_info.items():
            if key in self.info_labels:
                self.info_labels[key].configure(text=value)
            full_details += f"  - {key}: {value}\n"
        self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ l·∫•y ƒë·ªãnh danh ph·∫ßn c·ª©ng", "Tr·∫°ng th√°i": "T·ªët", "Chi ti·∫øt": f"Th√¥ng tin ƒë·ªãnh danh ph·∫ßn c·ª©ng:\n{full_details}"}, auto_advance=False)
        if hasattr(self, 'show_result_choices'):
            self.show_result_choices()
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="ƒê·ªãnh danh ph·∫ßn c·ª©ng ƒë√£ ho√†n th√†nh. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="Ti·∫øp t·ª•c", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Ti·∫øp t·ª•c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_skip = ctk.CTkButton(button_bar, text="B·ªè qua", image=self.icon_manager.SKIP_ICON if hasattr(self.icon_manager, 'SKIP_ICON') else None, compound="left", command=lambda: self.mark_skipped({"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"}), fg_color=Theme.SKIP, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_skip.pack(side="left", padx=10)

# Simple fallback classes
class LicenseCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B·∫£n Quy·ªÅn Windows", "Ki·ªÉm tra b·∫£n quy·ªÅn", "T·ª± ƒë·ªông ki·ªÉm tra", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class SystemInfoStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "C·∫•u H√¨nh Windows", "Th√¥ng tin h·ªá th·ªëng", "T·ª± ƒë·ªông ƒë·ªçc", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class HardDriveHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "S·ª©c Kh·ªèe ·ªî C·ª©ng", "Ki·ªÉm tra S.M.A.R.T", "T·ª± ƒë·ªông ki·ªÉm tra", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class ScreenTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "M√†n H√¨nh", "Test m√†n h√¨nh", "Ki·ªÉm tra pixel", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class KeyboardVisualTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B√†n ph√≠m & Touchpad", "Test b√†n ph√≠m", "Nh·∫•n ph√≠m", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class PortsConnectivityStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "C·ªïng K·∫øt N·ªëi", "Test c·ªïng", "C·∫Øm thi·∫øt b·ªã", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class BatteryHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Pin Laptop", "Ki·ªÉm tra pin", "ƒê·ªçc th√¥ng tin pin", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class SpeakerTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Loa & Micro", "Test √¢m thanh", "Ph√°t √¢m test", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class WebcamTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Webcam", "Test camera", "M·ªü camera", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class NetworkTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "M·∫°ng & WiFi", "Test m·∫°ng", "Ki·ªÉm tra k·∫øt n·ªëi", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class CPUStressTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "CPU Stress Test", "Test CPU", "Stress test", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class HardDriveSpeedStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "T·ªëc ƒê·ªô ·ªî C·ª©ng", "Test t·ªëc ƒë·ªô", "Benchmark", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class GPUStressTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "GPU Stress Test", "Test GPU", "Stress test", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class ThermalPerformanceStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Thermal Monitor", "Gi√°m s√°t nhi·ªát", "Monitor nhi·ªát ƒë·ªô", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class SummaryStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B√°o C√°o T·ªïng K·∫øt", "", "", **kwargs)
        self.title = "B√°o C√°o T·ªïng K·∫øt"
    
    def display_summary(self, results):
        for widget in self.action_frame.winfo_children(): 
            widget.destroy()
        
        ctk.CTkLabel(self.action_frame, text="üìä B√ÅO C√ÅO T·ªîNG K·∫æT", font=Theme.HEADING_FONT).pack(pady=20)
        
        total_tests = len(results)
        passed_tests = sum(1 for r in results.values() if r.get("Tr·∫°ng th√°i") == "T·ªët")
        success_rate = (passed_tests/total_tests*100) if total_tests > 0 else 0
        
        stats_text = f"T·ªïng s·ªë test: {total_tests}\nƒê·∫°t: {passed_tests}/{total_tests}\nT·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%"
        ctk.CTkLabel(self.action_frame, text=stats_text, font=Theme.BODY_FONT).pack(pady=10)

# WizardFrame v·ªõi c·∫•u tr√∫c b∆∞·ªõc ƒë√∫ng
class WizardFrame(ctk.CTkFrame):
    def __init__(self, master, mode, icon_manager, app=None):
        super().__init__(master, fg_color="transparent")
        self.mode = mode
        self.icon_manager = icon_manager
        self.app = app
        self.current_step = 0
        self.steps = self._get_steps_for_mode(mode)
        self.all_results = {}
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        self.grid_rowconfigure(2, weight=0)  # Navigation row
        
        # Header v·ªõi progress
        self.create_header()
        self.create_navigation()
        self.show_step(0)
    
    def create_navigation(self):
        # Navigation lu√¥n hi·ªÉn th·ªã v√† c·ªë ƒë·ªãnh
        nav_frame = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=80)
        nav_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=(10,20))
        nav_frame.grid_columnconfigure(1, weight=1)
        nav_frame.grid_propagate(False)  # Gi·ªØ k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh
        nav_frame.lift()  # ƒê·∫£m b·∫£o lu√¥n ·ªü tr√™n c√πng
        
        # Previous button
        self.prev_btn = ctk.CTkButton(nav_frame, text="‚Üê Tr∆∞·ªõc", command=self.go_previous, 
                                     fg_color=Theme.SKIP, width=130, height=50, font=Theme.BODY_FONT)
        self.prev_btn.grid(row=0, column=0, padx=20, pady=15)
        
        # Skip button - lu√¥n hi·ªÉn th·ªã
        self.skip_btn = ctk.CTkButton(nav_frame, text="B·ªè qua", command=self.skip_current_step,
                                     fg_color=Theme.WARNING, width=110, height=50, font=Theme.BODY_FONT)
        self.skip_btn.grid(row=0, column=1, pady=15)
        
        # Next button  
        self.next_btn = ctk.CTkButton(nav_frame, text="Ti·∫øp theo ‚Üí", command=self.go_to_next_step, 
                                     fg_color=Theme.ACCENT, width=130, height=50, font=Theme.BODY_FONT)
        self.next_btn.grid(row=0, column=2, padx=20, pady=15)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ban ƒë·∫ßu
        self.update_navigation_state()
    
    def skip_current_step(self):
        """B·ªè qua b∆∞·ªõc hi·ªán t·∫°i"""
        if self.current_step < len(self.steps):
            step_name, _ = self.steps[self.current_step]
            self.record_result(step_name, {"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"})
        self.go_to_next_step()
    
    def go_previous(self):
        if self.current_step > 0:
            self.current_step -= 1
            self.show_step(self.current_step)
            self.update_navigation_state()
    
    def create_header(self):
        header = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=80)
        header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20,10))
        header.grid_columnconfigure(1, weight=1)
        
        # Step counter
        self.step_label = ctk.CTkLabel(header, text="", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT)
        self.step_label.grid(row=0, column=0, padx=20, pady=20)
        
        # Progress bar
        self.progress_bar = ctk.CTkProgressBar(header, progress_color=Theme.ACCENT)
        self.progress_bar.grid(row=0, column=1, sticky="ew", padx=20, pady=20)
        
        # Mode indicator
        mode_text = "Ch·∫ø ƒë·ªô Chuy√™n gia" if self.mode == "expert" else "Ch·∫ø ƒë·ªô C∆° b·∫£n"
        self.mode_label = ctk.CTkLabel(header, text=mode_text, font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY)
        self.mode_label.grid(row=0, column=2, padx=20, pady=20)
    
    def _get_steps_for_mode(self, mode):
        # C·∫•u tr√∫c b∆∞·ªõc ƒë√∫ng nh∆∞ main_enhanced
        basic_steps = [
            # B∆∞·ªõc 1: Checklist ngo·∫°i h√¨nh
            ("Ki·ªÉm tra ngo·∫°i h√¨nh", PhysicalInspectionStep),
            # B∆∞·ªõc 2: BIOS  
            ("Ki·ªÉm tra BIOS", BIOSCheckStep),
            # B∆∞·ªõc 3: ƒê·ªãnh danh ph·∫ßn c·ª©ng t·ª± ƒë·ªông
            ("ƒê·ªãnh danh ph·∫ßn c·ª©ng", HardwareFingerprintStep),
            # C√°c b∆∞·ªõc ti·∫øp theo
            ("B·∫£n quy·ªÅn Windows", LicenseCheckStep), 
            ("C·∫•u h√¨nh h·ªá th·ªëng", SystemInfoStep),
            ("S·ª©c kh·ªèe ·ªï c·ª©ng", HardDriveHealthStep),
            ("Ki·ªÉm tra m√†n h√¨nh", ScreenTestStep),
            ("B√†n ph√≠m & Touchpad", KeyboardVisualTestStep),
            ("C·ªïng k·∫øt n·ªëi", PortsConnectivityStep),
            ("Pin laptop", BatteryHealthStep),
            ("Loa & Micro", SpeakerTestStep),
            ("Webcam", WebcamTestStep),
            ("M·∫°ng & WiFi", NetworkTestStep)
        ]
        
        expert_steps = basic_steps + [
            ("CPU Stress Test", CPUStressTestStep),
            ("T·ªëc ƒë·ªô ·ªï c·ª©ng", HardDriveSpeedStep), 
            ("GPU Stress Test", GPUStressTestStep),
            ("Thermal Monitor", ThermalPerformanceStep)
        ]
        
        return expert_steps if mode == "expert" else basic_steps
    
    def show_step(self, step_index):
        # Clear content area only - keep header and navigation
        for widget in self.winfo_children():
            if widget not in [self.winfo_children()[0], self.winfo_children()[-1]]:  # Keep header and navigation
                widget.destroy()
        
        # Recreate navigation if it doesn't exist
        if not hasattr(self, 'prev_btn') or not self.prev_btn.winfo_exists():
            self.create_navigation()
        
        # Update header
        total_steps = len(self.steps)
        if step_index < total_steps:
            step_name, step_class = self.steps[step_index]
            self.step_label.configure(text=f"B∆∞·ªõc {step_index + 1}/{total_steps}: {step_name}")
            self.progress_bar.set((step_index + 1) / total_steps)
            
            step_frame = step_class(
                self,
                record_result_callback=self.record_result,
                enable_next_callback=self.enable_next,
                go_to_next_step_callback=self.go_to_next_step,
                icon_manager=self.icon_manager,
                all_results=self.all_results
            )
            step_frame.grid(row=1, column=0, sticky="nsew")
        else:
            self.step_label.configure(text=f"T·ªïng k·∫øt ({total_steps} b∆∞·ªõc ho√†n th√†nh)")
            self.progress_bar.set(1.0)
            
            summary_step = SummaryStep(
                self,
                record_result_callback=self.record_result,
                enable_next_callback=self.enable_next,
                go_to_next_step_callback=self.go_to_next_step,
                icon_manager=self.icon_manager,
                all_results=self.all_results
            )
            summary_step.display_summary(self.all_results)
            summary_step.grid(row=1, column=0, sticky="nsew")
        
        # Ensure navigation is always visible and on top
        self.update_navigation_state()
        if hasattr(self, 'prev_btn'):
            self.prev_btn.lift()
            self.skip_btn.lift()
            self.next_btn.lift()
    
    def record_result(self, step_name, result_data):
        self.all_results[step_name] = result_data
        print(f"[DEBUG] Recorded result for {step_name}: {result_data}")
    
    def enable_next(self):
        pass
    
    def go_to_next_step(self):
        self.current_step += 1
        self.show_step(self.current_step)
        self.update_navigation_state()
    
    def update_navigation_state(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t navigation"""
        # Previous button
        if self.current_step <= 0:
            self.prev_btn.configure(state="disabled")
        else:
            self.prev_btn.configure(state="normal")
        
        # Next button - lu√¥n enable
        self.next_btn.configure(state="normal")
        
        # Skip button - disable ·ªü b∆∞·ªõc cu·ªëi
        if self.current_step >= len(self.steps):
            self.skip_btn.configure(state="disabled")
            self.next_btn.configure(text="Ho√†n th√†nh")
        else:
            self.skip_btn.configure(state="normal")
            self.next_btn.configure(text="Ti·∫øp theo ‚Üí")

# ModeSelectionFrame v√† App ƒë∆°n gi·∫£n
class ModeSelectionFrame(ctk.CTkFrame):
    def __init__(self, master, mode_callback, icon_manager):
        super().__init__(master, fg_color="transparent")
        self.mode_callback = mode_callback
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Create mode selection UI
        main_frame = ctk.CTkFrame(self, fg_color=Theme.FRAME)
        main_frame.grid(row=0, column=0, sticky="nsew", padx=50, pady=50)
        main_frame.grid_columnconfigure(0, weight=1)
        
        ctk.CTkLabel(main_frame, text="LaptopTester Pro", font=Theme.TITLE_FONT, text_color=Theme.ACCENT).pack(pady=30)
        ctk.CTkLabel(main_frame, text="Ch·ªçn ch·∫ø ƒë·ªô ki·ªÉm tra", font=Theme.HEADING_FONT).pack(pady=20)
        
        ctk.CTkButton(main_frame, text="üéØ Ch·∫ø ƒë·ªô C∆° b·∫£n", command=lambda: self.mode_callback("basic"), 
                     fg_color=Theme.SUCCESS, height=60, font=Theme.SUBHEADING_FONT).pack(pady=20, padx=50, fill="x")
        
        ctk.CTkButton(main_frame, text="üî• Ch·∫ø ƒë·ªô Chuy√™n gia", command=lambda: self.mode_callback("expert"), 
                     fg_color=Theme.ERROR, height=60, font=Theme.SUBHEADING_FONT).pack(pady=20, padx=50, fill="x")

class App(ctk.CTk):
    def __init__(self):
        super().__init__(fg_color=Theme.BACKGROUND)
        self.title("Laptop Tester Pro")
        self.state('zoomed')
        self.minsize(1400, 900)
        
        self.icon_manager = IconManager()
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=20)
        self.current_main_frame = None
        self.all_results = {}

        # --- HEADER BAR ---
        self.header = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=70, corner_radius=0)
        self.header.grid(row=0, column=0, sticky="ew")
        self.header.grid_columnconfigure(0, minsize=80)
        self.header.grid_columnconfigure(1, weight=1)
        self.header.grid_columnconfigure(2, minsize=80)
        logo = self.icon_manager.LOGO_SMALL or None
        self.logo_label = ctk.CTkLabel(self.header, image=logo, text="", width=60)
        self.logo_label.grid(row=0, column=0, padx=(20,0), pady=10)
        self.title_label = ctk.CTkLabel(self.header, text="Laptop Tester Pro", font=Theme.HEADING_FONT, text_color=Theme.ACCENT)
        self.title_label.grid(row=0, column=1, sticky="w", padx=10)
        self.exit_btn = ctk.CTkButton(self.header, text="Tho√°t", command=self.quit_app, font=Theme.BODY_FONT, fg_color=Theme.ERROR, width=80)
        self.exit_btn.grid(row=0, column=2, padx=(0,20), pady=10)

        # --- MAIN CONTENT ---
        self.main_content = ctk.CTkFrame(self, fg_color=Theme.BACKGROUND)
        self.main_content.grid(row=1, column=0, sticky="nsew")
        self.main_content.grid_columnconfigure(0, weight=1)
        self.main_content.grid_rowconfigure(0, weight=1)

        self.show_mode_selection()

    def clear_window(self):
        if self.current_main_frame:
            if hasattr(self.current_main_frame, 'cleanup'):
                self.current_main_frame.cleanup()
            self.current_main_frame.destroy()
        self.current_main_frame = None

    def show_mode_selection(self):
        self.clear_window()
        self.current_main_frame = ModeSelectionFrame(self.main_content, self.start_wizard, self.icon_manager)
        self.current_main_frame.grid(row=0, column=0, sticky="nsew", padx=30, pady=30)

    def start_wizard(self, mode):
        self.clear_window()
        self.current_main_frame = WizardFrame(self.main_content, mode, self.icon_manager, app=self)
        self.current_main_frame.grid(row=0, column=0, sticky="nsew")
        self.main_content.grid_rowconfigure(0, weight=1)
        self.main_content.grid_columnconfigure(0, weight=1)

    def quit_app(self):
        self.clear_window()
        self.destroy()

if __name__ == "__main__":
    multiprocessing.freeze_support()
    if getattr(sys, 'frozen', False):
        try:
            os.chdir(sys._MEIPASS)
        except Exception:
            pass
    
    app = App()
    app.mainloop()