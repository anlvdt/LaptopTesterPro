"""
Missing Steps for LaptopTester
Th√™m 3 b∆∞·ªõc: Ki·ªÉm tra ngo·∫°i quan, BIOS, v√† Nh·∫≠n ƒë·ªãnh ph·∫ßn c·ª©ng
"""

# ============================================================================
# B∆Ø·ªöC 1: KI·ªÇM TRA NGO·∫†I QUAN (Physical Inspection)
# ============================================================================
class PhysicalInspectionStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        why_text = "T√¨nh tr·∫°ng v·∫≠t l√Ω ph·∫£n √°nh c√°ch ch·ªß c≈© s·ª≠ d·ª•ng m√°y. C√°c v·∫øt n·ª©t, m√≥p, b·∫£n l·ªÅ l·ªèng hay ·ªëc v√≠t b·ªã to√©t c√≥ th·ªÉ l√† d·∫•u hi·ªáu m√°y b·ªã r∆°i ho·∫∑c ƒë√£ qua s·ª≠a ch·ªØa kh√¥ng chuy√™n nghi·ªáp." if CURRENT_LANG == "vi" else "Physical condition reflects how the previous owner used the machine. Cracks, dents, loose hinges or stripped screws may indicate the machine was dropped or underwent unprofessional repairs."
        
        how_text = """**V·ªè m√°y & B·∫£n l·ªÅ:**
  ‚Ä¢ Ki·ªÉm tra v·∫øt n·ª©t, m√≥p m√©o ·ªü g√≥c m√°y (d·∫•u hi·ªáu r∆°i)
  ‚Ä¢ M·ªü/ƒë√≥ng m√†n h√¨nh 10-15 l·∫ßn, nghe ti·∫øng k√™u l·∫°
  ‚Ä¢ B·∫£n l·ªÅ ph·∫£i ch·∫∑t, kh√¥ng r∆°, gi·ªØ ƒë∆∞·ª£c g√≥c m·ªü

**C·ªïng k·∫øt n·ªëi:**
  ‚Ä¢ C·∫Øm s·∫°c v√† lay nh·∫π - kh√¥ng ƒë∆∞·ª£c l·ªèng
  ‚Ä¢ Ki·ªÉm tra USB, HDMI, audio jack
  ‚Ä¢ C·ªïng b·ªã l·ªèng = thay mainboard (ƒë·∫Øt!)

**·ªêc v√≠t & Tem:**
  ‚Ä¢ ·ªêc kh√¥ng to√©t ƒë·∫ßu (d·∫•u hi·ªáu th√°o l·∫Øp)
  ‚Ä¢ Tem b·∫£o h√†nh c√≤n nguy√™n
  ‚Ä¢ Serial number kh·ªõp v·ªõi BIOS

**‚ö†Ô∏è ThinkPad ƒë·∫∑c bi·ªát:**
  ‚Ä¢ Ki·ªÉm tra tem Lenovo ch√≠nh h√£ng
  ‚Ä¢ Xem sticker d∆∞·ªõi ƒë√°y c√≥ b·ªã b√≥c
  ‚Ä¢ ThinkPad doanh nghi·ªáp th∆∞·ªùng c√≥ asset tag""" if CURRENT_LANG == "vi" else """**Body & Hinges:**
  ‚Ä¢ Check for cracks, dents at corners (drop signs)
  ‚Ä¢ Open/close screen 10-15 times, listen for strange sounds
  ‚Ä¢ Hinges must be tight, no wobble, hold angle

**Ports:**
  ‚Ä¢ Plug charger and wiggle gently - should not be loose
  ‚Ä¢ Check USB, HDMI, audio jack
  ‚Ä¢ Loose port = motherboard replacement (expensive!)

**Screws & Seals:**
  ‚Ä¢ Screws not stripped (sign of disassembly)
  ‚Ä¢ Warranty seals intact
  ‚Ä¢ Serial number matches BIOS

**‚ö†Ô∏è ThinkPad specific:**
  ‚Ä¢ Check genuine Lenovo seal
  ‚Ä¢ Check bottom sticker not peeled
  ‚Ä¢ Enterprise ThinkPads usually have asset tags"""
        
        super().__init__(master, "Ki·ªÉm Tra Ngo·∫°i H√¨nh" if CURRENT_LANG == "vi" else "Physical Inspection", why_text, how_text, **kwargs)
        self.create_inspection_checklist()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()
        self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ hi·ªÉn th·ªã checklist", "Tr·∫°ng th√°i": "S·∫µn s√†ng"}, auto_advance=False)
    
    def create_inspection_checklist(self):
        checklist_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        checklist_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        title_text = "üîç Checklist Ki·ªÉm Tra Ngo·∫°i H√¨nh" if CURRENT_LANG == "vi" else "üîç Physical Inspection Checklist"
        ctk.CTkLabel(checklist_frame, text=title_text, font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Exterior checks
        exterior_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        exterior_frame.pack(fill="x", padx=15, pady=10)
        
        exterior_title = "üíª B√™n Ngo√†i:" if CURRENT_LANG == "vi" else "üíª Exterior:"
        ctk.CTkLabel(exterior_frame, text=exterior_title, font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        
        if CURRENT_LANG == "vi":
            exterior_checks = [
                "‚Ä¢ V·ªè m√°y: Ki·ªÉm tra v·∫øt n·ª©t, r·∫°n n·ª©t, m√≥p m√©o",
                "‚Ä¢ B·∫£n l·ªÅ m√†n h√¨nh: M·ªü/ƒë√≥ng nhi·ªÅu l·∫ßn, nghe ti·∫øng k√™u",
                "‚Ä¢ B√†n ph√≠m: Ki·ªÉm tra ph√≠m l·ªèng, kh√¥ng nh·∫•n",
                "‚Ä¢ Touchpad: B·ªÅ m·∫∑t ph·∫≥ng, kh√¥ng b·ªã l·ªìi",
                "‚Ä¢ C·ªïng k·∫øt n·ªëi: USB, HDMI, audio, s·∫°c",
                "‚Ä¢ L·ªó tho√°t kh√≠: Kh√¥ng b·ªã b·ªãt t·∫Øc"
            ]
        else:
            exterior_checks = [
                "‚Ä¢ Body: Check for cracks, fractures, dents",
                "‚Ä¢ Screen hinges: Open/close multiple times, listen for sounds",
                "‚Ä¢ Keyboard: Check for loose keys, non-responsive keys",
                "‚Ä¢ Touchpad: Surface flat, not bulging",
                "‚Ä¢ Ports: USB, HDMI, audio, charger",
                "‚Ä¢ Vents: Not blocked"
            ]
        
        for check in exterior_checks:
            ctk.CTkLabel(exterior_frame, text=check, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=20, pady=2)
        
        # Hardware checks
        hardware_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        hardware_frame.pack(fill="x", padx=15, pady=10)
        
        hardware_title = "üî© Ph·∫ßn C·ª©ng:" if CURRENT_LANG == "vi" else "üî© Hardware:"
        ctk.CTkLabel(hardware_frame, text=hardware_title, font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        
        if CURRENT_LANG == "vi":
            hardware_checks = [
                "‚Ä¢ ·ªêc v√≠t: Ki·ªÉm tra c√°c ·ªëc kh√¥ng b·ªã to√©t, thi·∫øu",
                "‚Ä¢ Nh√£n d√°n: C√≤n nguy√™n, kh√¥ng b·ªã x√≥a",
                "‚Ä¢ ƒê√®n LED: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
                "‚Ä¢ L∆∞·ªõi tho√°t kh√≠: S·∫°ch s·∫Ω, kh√¥ng b·ª•i b·∫©n"
            ]
        else:
            hardware_checks = [
                "‚Ä¢ Screws: Check screws not stripped, missing",
                "‚Ä¢ Labels: Intact, not erased",
                "‚Ä¢ LED lights: Working normally",
                "‚Ä¢ Vent grilles: Clean, no dust"
            ]
        
        for check in hardware_checks:
            ctk.CTkLabel(hardware_frame, text=check, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=20, pady=2)
        
        # Warning signs
        warning_frame = ctk.CTkFrame(checklist_frame, fg_color="#FFF3CD", border_width=1, border_color=Theme.WARNING)
        warning_frame.pack(fill="x", padx=15, pady=10)
        
        warning_title = "‚ö†Ô∏è D·∫•u Hi·ªáu C·∫£nh B√°o:" if CURRENT_LANG == "vi" else "‚ö†Ô∏è Warning Signs:"
        ctk.CTkLabel(warning_frame, text=warning_title, font=Theme.BODY_FONT, text_color=Theme.WARNING).pack(anchor="w", padx=10, pady=5)
        
        if CURRENT_LANG == "vi":
            warnings = [
                "‚Ä¢ B·∫£n l·ªÅ r·∫•t l·ªèng ho·∫∑c k√™u k√®n k·∫πt",
                "‚Ä¢ C·ªïng s·∫°c l·ªèng, kh√¥ng gi·ªØ ch·∫∑t",
                "‚Ä¢ V·∫øt n·ª©t g·∫ßn b·∫£n l·ªÅ (nguy hi·ªÉm)",
                "‚Ä¢ M√πi l·∫° (ch√°y, h√≥a ch·∫•t)",
                "‚Ä¢ ·ªêc v√≠t b·ªã to√©t nhi·ªÅu (d·∫•u hi·ªáu th√°o l·∫Øp)"
            ]
        else:
            warnings = [
                "‚Ä¢ Hinges very loose or creaking",
                "‚Ä¢ Charger port loose, not holding tight",
                "‚Ä¢ Cracks near hinges (dangerous)",
                "‚Ä¢ Strange smell (burning, chemicals)",
                "‚Ä¢ Many stripped screws (sign of disassembly)"
            ]
        
        for warning in warnings:
            ctk.CTkLabel(warning_frame, text=warning, font=Theme.SMALL_FONT, text_color="#856404").pack(anchor="w", padx=20, pady=2)
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        question_text = "D·ª±a tr√™n checklist tr√™n, t√¨nh tr·∫°ng v·∫≠t l√Ω t·ªïng th·ªÉ c·ªßa m√°y nh∆∞ th·∫ø n√†o?" if CURRENT_LANG == "vi" else "Based on the checklist above, what is the overall physical condition of the machine?"
        ctk.CTkLabel(self.result_container, text=question_text, font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        if CURRENT_LANG == "vi":
            btn_texts = [
                ("‚ú® R·∫•t t·ªët - Nh∆∞ m·ªõi", "#28a745", {"K·∫øt qu·∫£": "R·∫•t t·ªët - Nh∆∞ m·ªõi", "Tr·∫°ng th√°i": "Xu·∫•t s·∫Øc"}),
                ("‚úÖ T·ªët - V·∫øt nh·ªè", Theme.SUCCESS, {"K·∫øt qu·∫£": "T·ªët - C√≥ v·∫øt s·ª≠ d·ª•ng nh·ªè", "Tr·∫°ng th√°i": "T·ªët"}),
                ("‚ö†Ô∏è Trung b√¨nh - C√≥ l·ªói nh·ªè", Theme.WARNING, {"K·∫øt qu·∫£": "Trung b√¨nh - C√≥ l·ªói nh·ªè c·∫ßn l∆∞u √Ω", "Tr·∫°ng th√°i": "C·∫£nh b√°o"}),
                ("‚ùå K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ", Theme.ERROR, {"K·∫øt qu·∫£": "K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng", "Tr·∫°ng th√°i": "L·ªói"})
            ]
        else:
            btn_texts = [
                ("‚ú® Excellent - Like new", "#28a745", {"K·∫øt qu·∫£": "Excellent - Like new", "Tr·∫°ng th√°i": "Excellent"}),
                ("‚úÖ Good - Minor wear", Theme.SUCCESS, {"K·∫øt qu·∫£": "Good - Minor wear marks", "Tr·∫°ng th√°i": "Good"}),
                ("‚ö†Ô∏è Fair - Minor issues", Theme.WARNING, {"K·∫øt qu·∫£": "Fair - Minor issues to note", "Tr·∫°ng th√°i": "Warning"}),
                ("‚ùå Poor - Many issues", Theme.ERROR, {"K·∫øt qu·∫£": "Poor - Many serious issues", "Tr·∫°ng th√°i": "Error"})
            ]
        
        for text, color, result in btn_texts:
            btn = ctk.CTkButton(button_bar, text=text, command=lambda r=result: self.handle_result_generic(True, r, {}), 
                              fg_color=color, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
            btn.pack(side="left", padx=5)


# ============================================================================
# B∆Ø·ªöC 2: KI·ªÇM TRA BIOS (BIOS Check)
# ============================================================================
class BIOSCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        why_text = "BIOS ch·ª©a c√°c c√†i ƒë·∫∑t n·ªÅn t·∫£ng. Ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu nƒÉng t·ªëi ∆∞u v√† kh√¥ng b·ªã kh√≥a b·ªüi c√°c t√≠nh nƒÉng doanh nghi·ªáp." if CURRENT_LANG == "vi" else "BIOS contains fundamental settings. Check to ensure optimal performance and not locked by enterprise features."
        
        how_text = """1. Kh·ªüi ƒë·ªông l·∫°i m√°y v√† nh·∫•n li√™n t·ª•c ph√≠m ƒë·ªÉ v√†o BIOS:
   ‚Ä¢ **Dell/Alienware:** F2 ho·∫∑c F12
   ‚Ä¢ **HP/Compaq:** F10 ho·∫∑c ESC
   ‚Ä¢ **Lenovo/ThinkPad:** F1, F2 ho·∫∑c Enter
   ‚Ä¢ **ASUS:** F2 ho·∫∑c Delete
   ‚Ä¢ **Acer:** F2 ho·∫∑c Delete
   ‚Ä¢ **MSI:** Delete ho·∫∑c F2

2. Ki·ªÉm tra c√°c m·ª•c quan tr·ªçng:
   ‚Ä¢ **CPU Features:** Intel Turbo Boost / AMD Boost ph·∫£i 'Enabled'
   ‚Ä¢ **Memory:** XMP/DOCP profile n√™n b·∫≠t (n·∫øu c√≥)
   ‚Ä¢ **Security:** Kh√¥ng c√≥ BIOS password l·∫°
   ‚Ä¢ **‚ö†Ô∏è C·∫¢NH B√ÅO:** T√¨m 'Computrace' ho·∫∑c 'Absolute' - n·∫øu 'Enabled' th√¨ m√°y c√≥ th·ªÉ b·ªã kh√≥a t·ª´ xa!
   ‚Ä¢ **Boot Order:** Ki·ªÉm tra th·ª© t·ª± kh·ªüi ƒë·ªông
   ‚Ä¢ **Secure Boot:** N√™n ƒë·ªÉ 'Enabled' cho b·∫£o m·∫≠t""" if CURRENT_LANG == "vi" else """1. Restart machine and press key repeatedly to enter BIOS:
   ‚Ä¢ **Dell/Alienware:** F2 or F12
   ‚Ä¢ **HP/Compaq:** F10 or ESC
   ‚Ä¢ **Lenovo/ThinkPad:** F1, F2 or Enter
   ‚Ä¢ **ASUS:** F2 or Delete
   ‚Ä¢ **Acer:** F2 or Delete
   ‚Ä¢ **MSI:** Delete or F2

2. Check important items:
   ‚Ä¢ **CPU Features:** Intel Turbo Boost / AMD Boost must be 'Enabled'
   ‚Ä¢ **Memory:** XMP/DOCP profile should be enabled (if available)
   ‚Ä¢ **Security:** No strange BIOS password
   ‚Ä¢ **‚ö†Ô∏è WARNING:** Look for 'Computrace' or 'Absolute' - if 'Enabled' machine can be remotely locked!
   ‚Ä¢ **Boot Order:** Check boot sequence
   ‚Ä¢ **Secure Boot:** Should be 'Enabled' for security"""
        
        super().__init__(master, "Ki·ªÉm Tra C√†i ƒê·∫∑t BIOS" if CURRENT_LANG == "vi" else "BIOS Settings Check", why_text, how_text, **kwargs)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()

    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        question_text = "C√°c c√†i ƒë·∫∑t trong BIOS c√≥ ch√≠nh x√°c v√† an to√†n kh√¥ng?" if CURRENT_LANG == "vi" else "Are BIOS settings correct and safe?"
        ctk.CTkLabel(self.result_container, text=question_text, font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        yes_text = "C√≥, m·ªçi c√†i ƒë·∫∑t ƒë·ªÅu ƒë√∫ng" if CURRENT_LANG == "vi" else "Yes, all settings correct"
        no_text = "Kh√¥ng, c√≥ c√†i ƒë·∫∑t sai/b·ªã kh√≥a" if CURRENT_LANG == "vi" else "No, wrong settings/locked"
        
        self.btn_yes = ctk.CTkButton(button_bar, text=yes_text, command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "C√†i ƒë·∫∑t ch√≠nh x√°c", "Tr·∫°ng th√°i": "T·ªët"}, {}), 
                                     fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        
        self.btn_no = ctk.CTkButton(button_bar, text=no_text, command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ v·∫•n ƒë·ªÅ v·ªõi c√†i ƒë·∫∑t BIOS", "Tr·∫°ng th√°i": "L·ªói"}), 
                                    fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)


# ============================================================================
# B∆Ø·ªöC 3: TH√äM NH·∫¨N ƒê·ªäNH PH·∫¶N C·ª®NG V√ÄO HardwareFingerprintStep
# ============================================================================
def add_hardware_capability_analysis(self, hw_info):
    """
    Th√™m function n√†y v√†o class HardwareFingerprintStep
    G·ªçi sau khi display_info()
    """
    cpu_name = hw_info.get("CPU", "")
    gpu_name = hw_info.get("GPU", "")
    
    # X√°c ƒë·ªãnh tier CPU
    cpu_tier = "unknown"
    if any(x in cpu_name.upper() for x in ["I9", "I7", "RYZEN 9", "RYZEN 7"]):
        cpu_tier = "high"
    elif any(x in cpu_name.upper() for x in ["I5", "RYZEN 5"]):
        cpu_tier = "mid"
    elif any(x in cpu_name.upper() for x in ["I3", "RYZEN 3", "CELERON", "PENTIUM"]):
        cpu_tier = "low"
    
    # Ki·ªÉm tra GPU r·ªùi
    gpu_dedicated = any(x in gpu_name.upper() for x in ["RTX", "GTX", "RADEON RX", "RADEON PRO"])
    
    # T·∫°o capabilities
    capabilities = []
    if cpu_tier == "high":
        if CURRENT_LANG == "vi":
            capabilities = [
                {"icon": "üéÆ", "title": "Gaming & Rendering", "desc": "Ph√π h·ª£p cho gaming AAA, render 3D, video editing chuy√™n nghi·ªáp", "color": "#10B981"},
                {"icon": "üíº", "title": "Workstation", "desc": "X·ª≠ l√Ω ƒëa nhi·ªám n·∫∑ng, ph√°t tri·ªÉn ph·∫ßn m·ªÅm, m√°y ·∫£o", "color": "#3B82F6"}
            ]
        else:
            capabilities = [
                {"icon": "üéÆ", "title": "Gaming & Rendering", "desc": "Suitable for AAA gaming, 3D rendering, professional video editing", "color": "#10B981"},
                {"icon": "üíº", "title": "Workstation", "desc": "Heavy multitasking, software development, virtual machines", "color": "#3B82F6"}
            ]
    elif cpu_tier == "mid":
        if CURRENT_LANG == "vi":
            capabilities = [
                {"icon": "üéÆ", "title": "Gaming Casual", "desc": "Ch∆°i game ·ªü m·ª©c trung b√¨nh, streaming, content creation", "color": "#F59E0B"},
                {"icon": "üíº", "title": "VƒÉn ph√≤ng n√¢ng cao", "desc": "Office, l·∫≠p tr√¨nh, thi·∫øt k·∫ø ƒë·ªì h·ªça 2D, ƒëa nhi·ªám v·ª´a ph·∫£i", "color": "#3B82F6"}
            ]
        else:
            capabilities = [
                {"icon": "üéÆ", "title": "Casual Gaming", "desc": "Mid-level gaming, streaming, content creation", "color": "#F59E0B"},
                {"icon": "üíº", "title": "Advanced Office", "desc": "Office, programming, 2D graphics design, moderate multitasking", "color": "#3B82F6"}
            ]
    else:
        if CURRENT_LANG == "vi":
            capabilities = [
                {"icon": "üìù", "title": "VƒÉn ph√≤ng c∆° b·∫£n", "desc": "Office, web browsing, email, xem phim", "color": "#94A3B8"},
                {"icon": "üéì", "title": "H·ªçc t·∫≠p", "desc": "H·ªçc online, so·∫°n th·∫£o vƒÉn b·∫£n, nghi√™n c·ª©u", "color": "#06B6D4"}
            ]
        else:
            capabilities = [
                {"icon": "üìù", "title": "Basic Office", "desc": "Office, web browsing, email, video watching", "color": "#94A3B8"},
                {"icon": "üéì", "title": "Education", "desc": "Online learning, document editing, research", "color": "#06B6D4"}
            ]
    
    if gpu_dedicated:
        if CURRENT_LANG == "vi":
            capabilities.insert(0, {"icon": "üé®", "title": "ƒê·ªì h·ªça chuy√™n nghi·ªáp", "desc": "GPU r·ªùi m·∫°nh, ph√π h·ª£p cho CAD, 3D modeling, AI/ML", "color": "#8B5CF6"})
        else:
            capabilities.insert(0, {"icon": "üé®", "title": "Professional Graphics", "desc": "Powerful discrete GPU, suitable for CAD, 3D modeling, AI/ML", "color": "#8B5CF6"})
    
    if not capabilities:
        return
    
    # Hi·ªÉn th·ªã capabilities
    cap_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
    cap_frame.grid(row=3, column=0, sticky="ew", padx=20, pady=(20,10))
    
    title_text = "üí° Kh·∫£ NƒÉng S·ª≠ D·ª•ng Ph·∫ßn C·ª©ng" if CURRENT_LANG == "vi" else "üí° Hardware Capability"
    ctk.CTkLabel(cap_frame, text=title_text, font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(anchor="w", pady=(0,10))
    
    for cap in capabilities:
        card = ctk.CTkFrame(cap_frame, fg_color=Theme.FRAME, corner_radius=8, border_width=2, border_color=cap["color"])
        card.pack(fill="x", pady=5)
        
        content = ctk.CTkFrame(card, fg_color="transparent")
        content.pack(fill="x", padx=12, pady=12)
        
        ctk.CTkLabel(content, text=f"{cap['icon']} {cap['title']}", font=Theme.BODY_FONT, text_color=cap["color"]).pack(anchor="w")
        ctk.CTkLabel(content, text=cap["desc"], font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY, wraplength=700, justify="left").pack(anchor="w", pady=(3,0))


# ============================================================================
# H∆Ø·ªöNG D·∫™N T√çCH H·ª¢P
# ============================================================================
"""
C√ÅCH T√çCH H·ª¢P V√ÄO main_enhanced_auto.py:

1. Copy 2 class PhysicalInspectionStep v√† BIOSCheckStep v√†o file main_enhanced_auto.py
   (ƒë·∫∑t sau class BaseStepFrame, tr∆∞·ªõc class HardwareFingerprintStep)

2. Trong class HardwareFingerprintStep, th√™m method add_hardware_capability_analysis
   v√† g·ªçi n√≥ trong display_info():
   
   def display_info(self, hw_info):
       # ... code hi·ªán t·∫°i ...
       
       # TH√äM D√íNG N√ÄY:
       self.add_hardware_capability_analysis(hw_info)
       
       self.mark_completed(...)

3. T√¨m h√†m _get_steps_for_mode() v√† th√™m 2 b∆∞·ªõc m·ªõi v√†o ƒë·∫ßu danh s√°ch:
   
   basic_steps = [
       # TH√äM 2 D√íNG N√ÄY:
       ("Ki·ªÉm tra ngo·∫°i h√¨nh", PhysicalInspectionStep),
       ("Ki·ªÉm tra BIOS", BIOSCheckStep),
       
       # C√°c b∆∞·ªõc c≈©:
       ("ƒê·ªãnh danh ph·∫ßn c·ª©ng", HardwareFingerprintStep),
       ("B·∫£n quy·ªÅn Windows", LicenseCheckStep),
       ...
   ]

4. L∆∞u file v√† ch·∫°y l·∫°i ·ª©ng d·ª•ng
"""
