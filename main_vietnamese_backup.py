#!/usr/bin/env python3
"""
LaptopTester Pro - Main File
Kh√¥i ph·ª•c c·∫•u tr√∫c b∆∞·ªõc nh∆∞ main_enhanced
"""

import multiprocessing
import sys
import os
import platform
import subprocess
import time
import threading
import socket

# Import t·ª´ backup_enhanced n·∫øu c√≥
try:
    from backup_enhanced.laptoptester import *
    print("[INFO] Successfully imported from backup_enhanced")
except ImportError as e:
    print(f"[WARNING] Could not import from backup_enhanced: {e}")
    # Fallback imports
    import customtkinter as ctk
    import tkinter as tk
    import psutil
    from PIL import Image
    import wmi
    import pythoncom
    try:
        import keyboard
    except ImportError:
        print("[WARNING] keyboard module not found - keyboard test may not work")

# --- THEME SYSTEM ---
class ThemeManager:
    def __init__(self):
        self.current_theme = "light"
        self.themes = {
            "light": {
                "BACKGROUND": "#F8FAFC", "SURFACE": "#FFFFFF", "FRAME": "#FFFFFF", "CARD": "#FFFFFF", "BORDER": "#E2E8F0", "SEPARATOR": "#F1F5F9",
                "TEXT": "#0F172A", "TEXT_SECONDARY": "#64748B", "ACCENT": "#3B82F6", "ACCENT_HOVER": "#2563EB",
                "SUCCESS": "#10B981", "WARNING": "#F59E0B", "ERROR": "#EF4444", "SKIP": "#94A3B8", "INFO": "#06B6D4"
            },
            "dark": {
                "BACKGROUND": "#0F172A", "SURFACE": "#1E293B", "FRAME": "#1E293B", "CARD": "#334155", "BORDER": "#475569", "SEPARATOR": "#64748B",
                "TEXT": "#F8FAFC", "TEXT_SECONDARY": "#CBD5E1", "ACCENT": "#60A5FA", "ACCENT_HOVER": "#3B82F6",
                "SUCCESS": "#34D399", "WARNING": "#FBBF24", "ERROR": "#F87171", "SKIP": "#9CA3AF", "INFO": "#22D3EE"
            }
        }
        # Typography - D√πng Arial thay Segoe UI ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát t·ªët h∆°n
        self.TITLE_FONT = ("Arial", 42, "bold"); self.HEADING_FONT = ("Arial", 28, "bold"); self.SUBHEADING_FONT = ("Arial", 22, "bold")
        self.BODY_FONT = ("Arial", 16); self.SMALL_FONT = ("Arial", 14); self.KEY_FONT = ("Arial", 12); self.BUTTON_FONT = ("Arial", 14)
        # Layout
        self.CORNER_RADIUS = 12; self.PADDING_X = 24; self.PADDING_Y = 20; self.BUTTON_HEIGHT = 48
        self.CARD_PADDING = 20; self.SECTION_SPACING = 16; self.ELEMENT_SPACING = 12
    
    def get_color(self, color_name): return self.themes[self.current_theme].get(color_name, "#000000")
    def switch_theme(self): 
        self.current_theme = "dark" if self.current_theme == "light" else "light"
        ctk.set_appearance_mode(self.current_theme)
        return self.current_theme

# --- LANGUAGE SYSTEM ---
class LanguageManager:
    def __init__(self):
        self.current_language = "vi"
        self.translations = {
            "vi": {
                "app_title": "Laptop Tester Pro", "exit": "Tho√°t", "settings": "C√†i ƒë·∫∑t", "theme": "Giao di·ªán", "language": "Ng√¥n ng·ªØ",
                "light_theme": "S√°ng", "dark_theme": "T·ªëi", "previous": "‚Üê Tr∆∞·ªõc", "next": "Ti·∫øp theo ‚Üí", "skip": "B·ªè qua",
                "select_mode": "Ch·ªçn Ch·∫ø ƒê·ªô Ki·ªÉm Tra", "basic_mode": "Ch·∫ø ƒê·ªô C∆° B·∫£n", "expert_mode": "Ch·∫ø ƒê·ªô Chuy√™n Gia",
                "ready": "S·∫µn s√†ng", "running": "ƒêang ch·∫°y", "completed": "Ho√†n th√†nh", "error": "L·ªói", "good": "T·ªët"
            },
            "en": {
                "app_title": "Laptop Tester Pro", "exit": "Exit", "settings": "Settings", "theme": "Theme", "language": "Language",
                "light_theme": "Light", "dark_theme": "Dark", "previous": "‚Üê Previous", "next": "Next ‚Üí", "skip": "Skip",
                "select_mode": "Select Test Mode", "basic_mode": "Basic Mode", "expert_mode": "Expert Mode",
                "ready": "Ready", "running": "Running", "completed": "Completed", "error": "Error", "good": "Good"
            }
        }
    def get_text(self, key): return self.translations[self.current_language].get(key, key)
    def switch_language(self): 
        self.current_language = "en" if self.current_language == "vi" else "vi"
        return self.current_language

# Global instances
theme_manager = ThemeManager()
language_manager = LanguageManager()

# Legacy Theme class for compatibility
class Theme:
    @staticmethod
    def get_color(name): return theme_manager.get_color(name)
    # Static properties for backward compatibility
    BACKGROUND = property(lambda self: theme_manager.get_color('BACKGROUND'))
    FRAME = property(lambda self: theme_manager.get_color('FRAME'))
    CARD = property(lambda self: theme_manager.get_color('CARD'))
    BORDER = property(lambda self: theme_manager.get_color('BORDER'))
    TEXT = property(lambda self: theme_manager.get_color('TEXT'))
    TEXT_SECONDARY = property(lambda self: theme_manager.get_color('TEXT_SECONDARY'))
    ACCENT = property(lambda self: theme_manager.get_color('ACCENT'))
    SUCCESS = property(lambda self: theme_manager.get_color('SUCCESS'))
    WARNING = property(lambda self: theme_manager.get_color('WARNING'))
    ERROR = property(lambda self: theme_manager.get_color('ERROR'))
    SKIP = property(lambda self: theme_manager.get_color('SKIP'))
    INFO = property(lambda self: theme_manager.get_color('INFO'))
    # Typography
    TITLE_FONT = ("Arial", 42, "bold"); HEADING_FONT = ("Arial", 28, "bold"); SUBHEADING_FONT = ("Arial", 22, "bold")
    BODY_FONT = ("Arial", 16); SMALL_FONT = ("Arial", 14); KEY_FONT = ("Arial", 12)
    # Layout
    CORNER_RADIUS = theme_manager.CORNER_RADIUS; PADDING_X = theme_manager.PADDING_X; PADDING_Y = theme_manager.PADDING_Y
    BUTTON_HEIGHT = theme_manager.BUTTON_HEIGHT; CARD_PADDING = theme_manager.CARD_PADDING

class IconManager:
    def __init__(self):
        self.CHECK = None; self.CROSS = None; self.SKIP_ICON = None; self.WHY = None; self.HOW = None

# Utility function for asset path
def asset_path(rel_path):
    return os.path.join(os.path.dirname(__file__), 'assets', rel_path)

# Enhanced BaseStepFrame with scrollable canvas
class BaseStepFrame(ctk.CTkFrame):
    def __init__(self, master, title, why_text, how_text, **kwargs):
        super().__init__(master, fg_color="transparent")
        self.grid_columnconfigure(1, weight=1); self.grid_rowconfigure(0, weight=1)
        self.title = title
        # Extract callbacks from kwargs
        self.record_result = kwargs.get("record_result_callback")
        self.enable_next_callback = kwargs.get("enable_next_callback")
        self.go_to_next_step_callback = kwargs.get("go_to_next_step_callback")
        self.icon_manager = kwargs.get("icon_manager")
        self.all_results = kwargs.get("all_results")
        
        self._completed, self._skipped = False, False
        self.after_id = None

        # Layout c√¢n b·∫±ng v√† t·∫≠n d·ª•ng kh√¥ng gian
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=2)  # Guide panel
        self.grid_columnconfigure(1, weight=3)  # Action panel - r·ªông h∆°n
        
        # Guide container (left panel)
        guide_container = ctk.CTkFrame(self, fg_color=theme_manager.get_color('FRAME'), corner_radius=theme_manager.CORNER_RADIUS)
        guide_container.grid(row=0, column=0, sticky="nsew", padx=(Theme.PADDING_X, Theme.ELEMENT_SPACING), pady=Theme.PADDING_Y)
        guide_container.grid_columnconfigure(0, weight=1)
        guide_container.grid_rowconfigure(0, weight=1)
        guide_container.grid_rowconfigure(1, weight=0)
        guide_container.grid_rowconfigure(2, weight=1)
        guide_container.grid_rowconfigure(3, weight=0)  # Tips frame
        
        why_frame = ctk.CTkFrame(guide_container, fg_color="transparent")
        why_frame.grid(row=0, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.CARD_PADDING)
        ctk.CTkLabel(why_frame, image=self.icon_manager.WHY if self.icon_manager else None, text=" T·∫°i sao c·∫ßn test?", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT'), compound="left").pack(anchor="w")
        ctk.CTkLabel(why_frame, text=why_text, font=theme_manager.BODY_FONT, wraplength=380, justify="left", text_color=theme_manager.get_color('TEXT')).pack(anchor="w", pady=(theme_manager.ELEMENT_SPACING,0))
        
        ctk.CTkFrame(guide_container, height=1, fg_color=theme_manager.get_color('SEPARATOR')).grid(row=1, column=0, sticky="ew", padx=theme_manager.CARD_PADDING, pady=theme_manager.ELEMENT_SPACING)
        
        how_frame = ctk.CTkFrame(guide_container, fg_color="transparent")
        how_frame.grid(row=2, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.CARD_PADDING)
        ctk.CTkLabel(how_frame, image=self.icon_manager.HOW if self.icon_manager else None, text=" H∆∞·ªõng d·∫´n th·ª±c hi·ªán:", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT'), compound="left").pack(anchor="w")
        ctk.CTkLabel(how_frame, text=how_text, font=theme_manager.BODY_FONT, wraplength=380, justify="left", text_color=theme_manager.get_color('TEXT')).pack(anchor="w", pady=(theme_manager.ELEMENT_SPACING,0))
        
        # Th√™m g·ª£i √Ω ƒë·ªçc k·∫øt qu·∫£
        tips_frame = ctk.CTkFrame(guide_container, fg_color="#E3F2FD", corner_radius=theme_manager.CORNER_RADIUS)
        tips_frame.grid(row=3, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=(theme_manager.SECTION_SPACING, Theme.CARD_PADDING))
        ctk.CTkLabel(tips_frame, text="üí° G·ª£i √Ω ƒë·ªçc k·∫øt qu·∫£:", font=theme_manager.BODY_FONT, text_color="#1565C0").pack(anchor="w", padx=theme_manager.ELEMENT_SPACING, pady=(theme_manager.ELEMENT_SPACING, 8))
        tips_text = "- M√†u xanh: K·∫øt qu·∫£ t·ªët, an to√†n\n- M√†u v√†ng: C·∫£nh b√°o, c·∫ßn ch√∫ √Ω\n- M√†u ƒë·ªè: L·ªói nghi√™m tr·ªçng, c·∫ßn x·ª≠ l√Ω"
        ctk.CTkLabel(tips_frame, text=tips_text, font=theme_manager.SMALL_FONT, text_color="#424242", justify="left").pack(anchor="w", padx=theme_manager.ELEMENT_SPACING, pady=(0, theme_manager.ELEMENT_SPACING))
        
        # Action container (right panel) with scrollable canvas
        action_container = ctk.CTkFrame(self, fg_color="transparent")
        action_container.grid(row=0, column=1, sticky="nsew", padx=(theme_manager.ELEMENT_SPACING, theme_manager.PADDING_X), pady=theme_manager.PADDING_Y)
        action_container.grid_columnconfigure(0, weight=1)
        action_container.grid_rowconfigure(0, weight=1)
        
        # Scrollable action frame
        self.action_frame_container = ctk.CTkFrame(action_container, fg_color="transparent")
        self.action_frame_container.grid(row=0, column=0, sticky="nsew")
        self.action_frame_container.grid_columnconfigure(0, weight=1)
        self.action_frame_container.grid_rowconfigure(0, weight=1)
        
        self.action_canvas = tk.Canvas(self.action_frame_container, bg=theme_manager.get_color('CARD'), highlightthickness=0)
        self.action_canvas.grid(row=0, column=0, sticky="nsew")
        self.action_scrollbar = tk.Scrollbar(self.action_frame_container, orient="vertical", command=self.action_canvas.yview)
        self.action_scrollbar.grid(row=0, column=1, sticky="ns")
        self.action_canvas.configure(yscrollcommand=self.action_scrollbar.set)
        
        self.action_frame = ctk.CTkFrame(self.action_canvas, fg_color=theme_manager.get_color('CARD'), corner_radius=theme_manager.CORNER_RADIUS)
        self.action_window = self.action_canvas.create_window((0,0), window=self.action_frame, anchor="nw")
        self.action_frame.bind("<Configure>", lambda e: self.action_canvas.configure(scrollregion=self.action_canvas.bbox("all")))
        self.action_canvas.bind("<Configure>", self._on_canvas_configure)
        
        self.action_frame.grid_columnconfigure(0, weight=1)

    def _on_canvas_configure(self, event):
        canvas_width = event.width
        self.action_canvas.itemconfig(self.action_window, width=canvas_width-20)
        self.action_canvas.coords(self.action_window, 10, 0)
    
    def on_show(self):
        if hasattr(self, 'action_canvas') and hasattr(self, 'action_window'):
            self.action_canvas.update_idletasks()
            self.action_canvas.configure(scrollregion=self.action_canvas.bbox("all"))
            width = min(900, self.action_canvas.winfo_width())
            self.action_canvas.itemconfig(self.action_window, width=width)
        if hasattr(self, 'result_container'):
            self.result_container.update_idletasks()
        if hasattr(self, 'container'):
            self.container.update_idletasks()
    
    def is_ready_to_proceed(self): return self._completed or self._skipped
    def mark_completed(self, result_data, auto_advance=False):
        self._completed = True
        self._skipped = False
        if self.record_result:
            self.record_result(self.title, result_data)
        if auto_advance and self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def mark_skipped(self, result_data): 
        self._skipped = True; self._completed = False
        if self.record_result:
            self.record_result(self.title, result_data)
        if self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def handle_result_generic(self, is_ok, ok_data, bad_data):
        if hasattr(self, 'btn_yes'):
            self.btn_yes.configure(state="disabled")
        if hasattr(self, 'btn_no'):
            self.btn_no.configure(state="disabled")
        result = ok_data if is_ok else bad_data
        if is_ok:
            if hasattr(self, 'btn_yes'):
                self.btn_yes.configure(fg_color=theme_manager.get_color('ACCENT'))
            self.mark_completed(result, auto_advance=True)
        else:
            if hasattr(self, 'btn_no'):
                self.btn_no.configure(fg_color=theme_manager.get_color('WARNING'))
            self.mark_completed(result, auto_advance=True)
    def stop_tasks(self):
        if self.after_id: self.after_cancel(self.after_id); self.after_id = None

# B∆∞·ªõc 1: Ki·ªÉm tra ngo·∫°i h√¨nh v·ªõi checklist chi ti·∫øt
class PhysicalInspectionStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(
            master,
            "Ki·ªÉm Tra Ngo·∫°i H√¨nh",
            "T√¨nh tr·∫°ng v·∫≠t l√Ω ph·∫£n √°nh c√°ch ch·ªß c≈© s·ª≠ d·ª•ng m√°y. C√°c v·∫øt n·ª©t, m√≥p, b·∫£n l·ªÅ l·ªèng hay ·ªëc v√≠t b·ªã to√©t c√≥ th·ªÉ l√† d·∫•u hi·ªáu m√°y b·ªã r∆°i ho·∫∑c ƒë√£ qua s·ª≠a ch·ªØa kh√¥ng chuy√™n nghi·ªáp. ƒê·∫∑c bi·ªát v·ªõi ThinkPad, ki·ªÉm tra tem b·∫£o h√†nh v√† serial number.",
            "**V·ªè m√°y & B·∫£n l·ªÅ:**\n  - Ki·ªÉm tra v·∫øt n·ª©t, m√≥p m√©o ·ªü g√≥c m√°y (d·∫•u hi·ªáu r∆°i)\n  - M·ªü/ƒë√≥ng m√†n h√¨nh 10-15 l·∫ßn, nghe ti·∫øng k√™u l·∫°\n  - B·∫£n l·ªÅ ph·∫£i ch·∫∑t, kh√¥ng r∆°, gi·ªØ ƒë∆∞·ª£c g√≥c m·ªü\n\n**C·ªïng k·∫øt n·ªëi:**\n  - C·∫Øm s·∫°c v√† lay nh·∫π - kh√¥ng ƒë∆∞·ª£c l·ªèng\n  - Ki·ªÉm tra USB, HDMI, audio jack\n  - C·ªïng b·ªã l·ªèng = thay mainboard (ƒë·∫Øt!)\n\n**·ªêc v√≠t & Tem:**\n  - ·ªêc kh√¥ng to√©t ƒë·∫ßu (d·∫•u hi·ªáu th√°o l·∫Øp)\n  - Tem b·∫£o h√†nh c√≤n nguy√™n\n  - Serial number kh·ªõp v·ªõi BIOS\n\n**‚ö†Ô∏è ThinkPad ƒë·∫∑c bi·ªát:**\n  - Ki·ªÉm tra tem Lenovo ch√≠nh h√£ng\n  - Xem sticker d∆∞·ªõi ƒë√°y c√≥ b·ªã b√≥c\n  - ThinkPad doanh nghi·ªáp th∆∞·ªùng c√≥ asset tag",
            **kwargs
        )
        self.create_inspection_checklist()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()
        self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ hi·ªÉn th·ªã checklist", "Tr·∫°ng th√°i": "S·∫µn s√†ng"}, auto_advance=False)
    
    def create_inspection_checklist(self):
        checklist_frame = ctk.CTkFrame(self.action_frame, fg_color=theme_manager.get_color('FRAME'), corner_radius=theme_manager.CORNER_RADIUS)
        checklist_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        ctk.CTkLabel(checklist_frame, text="üîç Checklist Ki·ªÉm Tra Ngo·∫°i H√¨nh", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT')).pack(pady=15)
        
        # Exterior checks
        exterior_frame = ctk.CTkFrame(checklist_frame, fg_color=theme_manager.get_color('BACKGROUND'))
        exterior_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(exterior_frame, text="üíª B√™n Ngo√†i:", font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('ACCENT')).pack(anchor="w", padx=10, pady=5)
        
        exterior_checks = [
            "- V·ªè m√°y: Ki·ªÉm tra v·∫øt n·ª©t, r·∫°n n·ª©t, m√≥p m√©o",
            "- B·∫£n l·ªÅ m√†n h√¨nh: M·ªü/ƒë√≥ng nhi·ªÅu l·∫ßn, nghe ti·∫øng k√™u",
            "- B√†n ph√≠m: Ki·ªÉm tra ph√≠m l·ªèng, kh√¥ng nh·∫•n",
            "- Touchpad: B·ªÅ m·∫∑t ph·∫≥ng, kh√¥ng b·ªã l·ªìi",
            "- C·ªïng k·∫øt n·ªëi: USB, HDMI, audio, s·∫°c",
            "- L·ªó tho√°t kh√≠: Kh√¥ng b·ªã b·ªãt t·∫Øc"
        ]
        
        for check in exterior_checks:
            ctk.CTkLabel(exterior_frame, text=check, font=theme_manager.SMALL_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY')).pack(anchor="w", padx=20, pady=2)
        
        # Hardware checks
        hardware_frame = ctk.CTkFrame(checklist_frame, fg_color=theme_manager.get_color('BACKGROUND'))
        hardware_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(hardware_frame, text="üî© Ph·∫ßn C·ª©ng:", font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('ACCENT')).pack(anchor="w", padx=10, pady=5)
        
        hardware_checks = [
            "- ·ªêc v√≠t: Ki·ªÉm tra c√°c ·ªëc kh√¥ng b·ªã to√©t, thi·∫øu",
            "- Nh√£n d√°n: C√≤n nguy√™n, kh√¥ng b·ªã x√≥a",
            "- ƒê√®n LED: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
            "- L∆∞·ªõi tho√°t kh√≠: S·∫°ch s·∫Ω, kh√¥ng b·ª•i b·∫©n"
        ]
        
        for check in hardware_checks:
            ctk.CTkLabel(hardware_frame, text=check, font=theme_manager.SMALL_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY')).pack(anchor="w", padx=20, pady=2)
        
        # Warning signs
        warning_frame = ctk.CTkFrame(checklist_frame, fg_color="#FFF3CD", border_width=1, border_color=theme_manager.get_color('WARNING'))
        warning_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(warning_frame, text="‚ö†Ô∏è D·∫•u Hi·ªáu C·∫£nh B√°o:", font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('WARNING')).pack(anchor="w", padx=10, pady=5)
        
        warnings = [
            "- B·∫£n l·ªÅ r·∫•t l·ªèng ho·∫∑c k√™u k√®n k·∫πt",
            "- C·ªïng s·∫°c l·ªèng, kh√¥ng gi·ªØ ch·∫∑t",
            "- V·∫øt n·ª©t g·∫ßn b·∫£n l·ªÅ (nguy hi·ªÉm)",
            "- M√πi l·∫° (ch√°y, h√≥a ch·∫•t)",
            "- ·ªêc v√≠t b·ªã to√©t nhi·ªÅu (d·∫•u hi·ªáu th√°o l·∫Øp)"
        ]
        
        for warning in warnings:
            ctk.CTkLabel(warning_frame, text=warning, font=theme_manager.SMALL_FONT, text_color="#856404").pack(anchor="w", padx=20, pady=2)
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.result_container, text="D·ª±a tr√™n checklist tr√™n, t√¨nh tr·∫°ng v·∫≠t l√Ω t·ªïng th·ªÉ c·ªßa m√°y nh∆∞ th·∫ø n√†o?", font=theme_manager.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        self.btn_excellent = ctk.CTkButton(button_bar, text="‚ú® R·∫•t t·ªët - Nh∆∞ m·ªõi", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "R·∫•t t·ªët - Nh∆∞ m·ªõi", "Tr·∫°ng th√°i": "Xu·∫•t s·∫Øc"}, {}), fg_color="#28a745", height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_excellent.pack(side="left", padx=5)
        
        self.btn_good = ctk.CTkButton(button_bar, text="‚úÖ T·ªët - V·∫øt nh·ªè", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "T·ªët - C√≥ v·∫øt s·ª≠ d·ª•ng nh·ªè", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=theme_manager.get_color('SUCCESS'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_good.pack(side="left", padx=5)
        
        self.btn_fair = ctk.CTkButton(button_bar, text="‚ö†Ô∏è Trung b√¨nh - C√≥ l·ªói nh·ªè", image=self.icon_manager.WHY if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Trung b√¨nh - C√≥ l·ªói nh·ªè c·∫ßn l∆∞u √Ω", "Tr·∫°ng th√°i": "C·∫£nh b√°o"}, {}), fg_color=theme_manager.get_color('WARNING'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_fair.pack(side="left", padx=5)
        
        self.btn_poor = ctk.CTkButton(button_bar, text="‚ùå K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ", image=self.icon_manager.CROSS if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=theme_manager.get_color('ERROR'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_poor.pack(side="left", padx=5)
        
        self.result_container.lift()
        self.result_container.update_idletasks()

# B∆∞·ªõc 2: BIOS v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt
class BIOSCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        how_text = (
            "1. Kh·ªüi ƒë·ªông l·∫°i m√°y v√† nh·∫•n li√™n t·ª•c ph√≠m ƒë·ªÉ v√†o BIOS:\n"
            "   ‚Ä¢ **Dell/Alienware:** F2 ho·∫∑c F12\n"
            "   ‚Ä¢ **HP/Compaq:** F10 ho·∫∑c ESC\n"
            "   ‚Ä¢ **Lenovo/ThinkPad:** F1, F2 ho·∫∑c Enter\n"
            "   ‚Ä¢ **ASUS:** F2 ho·∫∑c Delete\n"
            "   ‚Ä¢ **Acer:** F2 ho·∫∑c Delete\n"
            "   ‚Ä¢ **MSI:** Delete ho·∫∑c F2\n\n"
            "2. Ki·ªÉm tra c√°c m·ª•c quan tr·ªçng:\n"
            "   ‚Ä¢ **CPU Features:** Intel Turbo Boost / AMD Boost ph·∫£i 'Enabled'\n"
            "   ‚Ä¢ **Memory:** XMP/DOCP profile n√™n b·∫≠t (n·∫øu c√≥)\n"
            "   ‚Ä¢ **Security:** Kh√¥ng c√≥ BIOS password l·∫°\n"
            "   ‚Ä¢ **‚ö†Ô∏è C·∫¢NH B√ÅO:** T√¨m 'Computrace' ho·∫∑c 'Absolute' - n·∫øu 'Enabled' th√¨ m√°y c√≥ th·ªÉ b·ªã kh√≥a t·ª´ xa!\n"
            "   ‚Ä¢ **Boot Order:** Ki·ªÉm tra th·ª© t·ª± kh·ªüi ƒë·ªông\n"
            "   ‚Ä¢ **Secure Boot:** N√™n ƒë·ªÉ 'Enabled' cho b·∫£o m·∫≠t"
        )
        super().__init__(master, "Ki·ªÉm Tra C√†i ƒê·∫∑t BIOS", "BIOS ch·ª©a c√°c c√†i ƒë·∫∑t n·ªÅn t·∫£ng. Ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu nƒÉng t·ªëi ∆∞u v√† kh√¥ng b·ªã kh√≥a b·ªüi c√°c t√≠nh nƒÉng doanh nghi·ªáp.", how_text, **kwargs)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()

    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="C√°c c√†i ƒë·∫∑t trong BIOS c√≥ ch√≠nh x√°c v√† an to√†n kh√¥ng?", font=theme_manager.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="C√≥, m·ªçi c√†i ƒë·∫∑t ƒë·ªÅu ƒë√∫ng", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "C√†i ƒë·∫∑t ch√≠nh x√°c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=theme_manager.get_color('SUCCESS'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(button_bar, text="Kh√¥ng, c√≥ c√†i ƒë·∫∑t sai/b·ªã kh√≥a", image=self.icon_manager.CROSS if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ v·∫•n ƒë·ªÅ v·ªõi c√†i ƒë·∫∑t BIOS", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=theme_manager.get_color('ERROR'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)

# B∆∞·ªõc 3: ƒê·ªãnh danh ph·∫ßn c·ª©ng t·ª± ƒë·ªông
class HardwareFingerprintStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(
            master,
            "ƒê·ªãnh Danh Ph·∫ßn C·ª©ng",
            "ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng nh·∫•t ƒë·ªÉ ch·ªëng l·ª´a ƒë·∫£o. C√°c th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë∆∞·ª£c ƒë·ªçc tr·ª±c ti·∫øp t·ª´ BIOS v√† linh ki·ªán ph·∫ßn c·ª©ng. Ch√∫ng **c·ª±c k·ª≥ kh√≥ l√†m gi·∫£** t·ª´ b√™n trong Windows.",
            "H√£y so s√°nh c√°c th√¥ng tin 'v√†ng' n√†y v·ªõi c·∫•u h√¨nh m√† ng∆∞·ªùi b√°n qu·∫£ng c√°o. N·∫øu c√≥ b·∫•t k·ª≥ s·ª± sai l·ªách n√†o, h√£y ƒë·∫∑t c√¢u h·ªèi v√† ki·ªÉm tra th·∫≠t k·ªπ.",
            **kwargs
        )
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.action_frame.grid_rowconfigure(0, weight=1)
        self.info_labels = {}
        self.loading_spinner = ctk.CTkProgressBar(self.action_frame, mode="indeterminate", progress_color=theme_manager.get_color('ACCENT'))
        self.loading_spinner.grid(row=0, column=0, pady=20, padx=20, sticky="ew")
        self.loading_spinner.start()
        self.container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        self.container.grid_columnconfigure(1, weight=1)
        self.info_items = ["Model Laptop", "Serial Number", "CPU", "GPU", "Model ·ªî C·ª©ng", "Ng√†y BIOS"]
        for idx, item in enumerate(self.info_items):
            row_frame = ctk.CTkFrame(self.container, fg_color="transparent")
            row_frame.grid(row=idx, column=0, sticky="w", pady=10, padx=20)
            ctk.CTkLabel(row_frame, text=f"{item}:", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT')).pack(side="left", padx=(0, 15))
            self.info_labels[item] = ctk.CTkLabel(row_frame, text="", justify="left", font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY'), wraplength=900)
            self.info_labels[item].pack(side="left")
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=4, column=0, sticky="sew", pady=(20,0))
        threading.Thread(target=self.fetch_hardware_info, daemon=True).start()

    def fetch_hardware_info(self):
        hw_info = {k: "ƒêang ƒë·ªçc..." for k in self.info_items}
        if platform.system() == "Windows":
            pythoncom.CoInitializeEx(0)
            try:
                c = wmi.WMI()
                # L·∫•y th√¥ng tin h·ªá th·ªëng
                system_info = c.Win32_ComputerSystem()[0]
                hw_info["Model Laptop"] = f"{system_info.Manufacturer} {system_info.Model}"
                
                # L·∫•y th√¥ng tin BIOS
                bios = c.Win32_BIOS()[0]
                hw_info["Serial Number"] = getattr(bios, 'SerialNumber', 'N/A')
                
                # X·ª≠ l√Ω ng√†y BIOS an to√†n h∆°n
                try:
                    bios_date = getattr(bios, 'ReleaseDate', '')
                    if bios_date and len(bios_date) >= 8:
                        bios_date_str = bios_date.split('.')[0]
                        hw_info["Ng√†y BIOS"] = f"{bios_date_str[6:8]}/{bios_date_str[4:6]}/{bios_date_str[:4]}"
                    else:
                        hw_info["Ng√†y BIOS"] = "Kh√¥ng x√°c ƒë·ªãnh"
                except:
                    hw_info["Ng√†y BIOS"] = "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                
                # L·∫•y th√¥ng tin CPU
                try:
                    processors = c.Win32_Processor()
                    if processors:
                        cpu_name = processors[0].Name.strip()
                        hw_info["CPU"] = cpu_name
                        # L∆∞u th√™m th√¥ng tin CPU cho so s√°nh
                        self.bios_cpu_info = cpu_name
                    else:
                        hw_info["CPU"] = "Kh√¥ng t√¨m th·∫•y CPU"
                        self.bios_cpu_info = None
                except Exception as e:
                    hw_info["CPU"] = f"L·ªói ƒë·ªçc CPU: {e}"
                    self.bios_cpu_info = None
                
                # L·∫•y th√¥ng tin GPU
                try:
                    gpus = c.Win32_VideoController()
                    gpu_names = [gpu.Name for gpu in gpus if gpu.Name]
                    hw_info["GPU"] = "\n".join(gpu_names) if gpu_names else "Kh√¥ng t√¨m th·∫•y GPU"
                except:
                    hw_info["GPU"] = "L·ªói ƒë·ªçc GPU"
                
                # L·∫•y th√¥ng tin ·ªï c·ª©ng
                try:
                    drives = c.Win32_DiskDrive()
                    drive_models = [d.Model for d in drives if d.Model]
                    hw_info["Model ·ªî C·ª©ng"] = "\n".join(drive_models) if drive_models else "Kh√¥ng t√¨m th·∫•y ·ªï c·ª©ng"
                except:
                    hw_info["Model ·ªî C·ª©ng"] = "L·ªói ƒë·ªçc ·ªï c·ª©ng"
                    
            except Exception as e: 
                hw_info = {k: f"L·ªói WMI: {e}" for k in self.info_items}
                self.bios_cpu_info = None
            finally: 
                pythoncom.CoUninitialize()
        else: 
            hw_info = {k: "Ch·ªâ h·ªó tr·ª£ Windows" for k in self.info_items}
            self.bios_cpu_info = None
        if self.winfo_exists(): 
            self.after(0, self.display_info, hw_info)

    def display_info(self, hw_info):
        full_details = ""
        self.loading_spinner.grid_remove()
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        for key, value in hw_info.items():
            if key in self.info_labels:
                self.info_labels[key].configure(text=value)
            full_details += f"  - {key}: {value}\n"
        
        # Th√™m ph√¢n t√≠ch kh·∫£ nƒÉng s·ª≠ d·ª•ng
        self.show_hardware_capability(hw_info)
        
        self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ l·∫•y ƒë·ªãnh danh ph·∫ßn c·ª©ng", "Tr·∫°ng th√°i": "T·ªët", "Chi ti·∫øt": f"Th√¥ng tin ƒë·ªãnh danh ph·∫ßn c·ª©ng:\n{full_details}"}, auto_advance=False)
        if hasattr(self, 'show_result_choices'):
            self.show_result_choices()
    
    def show_hardware_capability(self, hw_info):
        """Hi·ªÉn th·ªã nh·∫≠n ƒë·ªãnh kh·∫£ nƒÉng s·ª≠ d·ª•ng ph·∫ßn c·ª©ng"""
        cpu_name = hw_info.get("CPU", "")
        gpu_name = hw_info.get("GPU", "")
        
        # X√°c ƒë·ªãnh tier CPU
        cpu_tier = "unknown"
        if any(x in cpu_name.upper() for x in ["I9", "I7", "RYZEN 9", "RYZEN 7"]):
            cpu_tier = "high"
        elif any(x in cpu_name.upper() for x in ["I5", "RYZEN 5"]):
            cpu_tier = "mid"
        elif any(x in cpu_name.upper() for x in ["I3", "RYZEN 3", "CELERON", "PENTIUM"]):
            cpu_tier = "low"
        
        # Ki·ªÉm tra GPU r·ªùi
        gpu_dedicated = any(x in gpu_name.upper() for x in ["RTX", "GTX", "RADEON RX", "RADEON PRO"])
        
        # T·∫°o capabilities
        capabilities = []
        if cpu_tier == "high":
            capabilities = [
                {"icon": "üéÆ", "title": "Gaming & Rendering", "desc": "Ph√π h·ª£p cho gaming AAA, render 3D, video editing chuy√™n nghi·ªáp", "color": "#10B981"},
                {"icon": "üíº", "title": "Workstation", "desc": "X·ª≠ l√Ω ƒëa nhi·ªám n·∫∑ng, ph√°t tri·ªÉn ph·∫ßn m·ªÅm, m√°y ·∫£o", "color": "#3B82F6"}
            ]
        elif cpu_tier == "mid":
            capabilities = [
                {"icon": "üéÆ", "title": "Gaming Casual", "desc": "Ch∆°i game ·ªü m·ª©c trung b√¨nh, streaming, content creation", "color": "#F59E0B"},
                {"icon": "üíº", "title": "VƒÉn ph√≤ng n√¢ng cao", "desc": "Office, l·∫≠p tr√¨nh, thi·∫øt k·∫ø ƒë·ªì h·ªça 2D, ƒëa nhi·ªám v·ª´a ph·∫£i", "color": "#3B82F6"}
            ]
        else:
            capabilities = [
                {"icon": "üìù", "title": "VƒÉn ph√≤ng c∆° b·∫£n", "desc": "Office, web browsing, email, xem phim", "color": "#94A3B8"},
                {"icon": "üéì", "title": "H·ªçc t·∫≠p", "desc": "H·ªçc online, so·∫°n th·∫£o vƒÉn b·∫£n, nghi√™n c·ª©u", "color": "#06B6D4"}
            ]
        
        if gpu_dedicated:
            capabilities.insert(0, {"icon": "üé®", "title": "ƒê·ªì h·ªça chuy√™n nghi·ªáp", "desc": "GPU r·ªùi m·∫°nh, ph√π h·ª£p cho CAD, 3D modeling, AI/ML", "color": "#8B5CF6"})
        
        if not capabilities:
            return
        
        # Hi·ªÉn th·ªã capabilities
        cap_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        cap_frame.grid(row=3, column=0, sticky="ew", padx=20, pady=(20,10))
        
        ctk.CTkLabel(cap_frame, text="üí° Kh·∫£ NƒÉng S·ª≠ D·ª•ng Ph·∫ßn C·ª©ng", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT')).pack(anchor="w", pady=(0,10))
        
        for cap in capabilities:
            card = ctk.CTkFrame(cap_frame, fg_color=theme_manager.get_color('FRAME'), corner_radius=8, border_width=2, border_color=cap["color"])
            card.pack(fill="x", pady=5)
            
            content = ctk.CTkFrame(card, fg_color="transparent")
            content.pack(fill="x", padx=12, pady=12)
            
            ctk.CTkLabel(content, text=f"{cap['icon']} {cap['title']}", font=theme_manager.BODY_FONT, text_color=cap["color"]).pack(anchor="w")
            ctk.CTkLabel(content, text=cap["desc"], font=theme_manager.SMALL_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY'), wraplength=700, justify="left").pack(anchor="w", pady=(3,0))
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="ƒê·ªãnh danh ph·∫ßn c·ª©ng ƒë√£ ho√†n th√†nh. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?", font=theme_manager.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="Ti·∫øp t·ª•c", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Ti·∫øp t·ª•c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=theme_manager.get_color('SUCCESS'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_skip = ctk.CTkButton(button_bar, text="B·ªè qua", image=self.icon_manager.SKIP_ICON if hasattr(self.icon_manager, 'SKIP_ICON') else None, compound="left", command=lambda: self.mark_skipped({"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"}), fg_color=theme_manager.get_color('SKIP'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_skip.pack(side="left", padx=10)

# B∆∞·ªõc 4: License Check
class LicenseCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B·∫£n Quy·ªÅn Windows", "M·ªôt m√°y t√≠nh c√≥ b·∫£n quy·ªÅn Windows h·ª£p l·ªá ƒë·∫£m b·∫£o b·∫°n nh·∫≠n ƒë∆∞·ª£c c√°c b·∫£n c·∫≠p nh·∫≠t b·∫£o m·∫≠t quan tr·ªçng v√† tr√°nh c√°c r·ªßi ro ph√°p l√Ω.", "·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông ch·∫°y l·ªánh ki·ªÉm tra tr·∫°ng th√°i k√≠ch ho·∫°t c·ªßa Windows. K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.", **kwargs)
        self.action_frame.grid_rowconfigure(0, weight=1)
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.status_label = ctk.CTkLabel(self.action_frame, text="ƒêang ki·ªÉm tra...", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY'))
        self.status_label.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        threading.Thread(target=self.check_license, daemon=True).start()

    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="Ki·ªÉm tra b·∫£n quy·ªÅn ƒë√£ ho√†n th√†nh. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?", font=theme_manager.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="Ti·∫øp t·ª•c", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Ti·∫øp t·ª•c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=theme_manager.get_color('SUCCESS'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_skip = ctk.CTkButton(button_bar, text="B·ªè qua", image=self.icon_manager.SKIP_ICON if hasattr(self.icon_manager, 'SKIP_ICON') else None, compound="left", command=lambda: self.mark_skipped({"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"}), fg_color=theme_manager.get_color('SKIP'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_skip.pack(side="left", padx=10)

    def check_license(self):
        import locale
        status, color, result_data = "Kh√¥ng th·ªÉ ki·ªÉm tra", theme_manager.get_color('WARNING'), {"K·∫øt qu·∫£": "Kh√¥ng th·ªÉ ki·ªÉm tra", "Tr·∫°ng th√°i": "L·ªói"}
        if platform.system() == "Windows":
            try:
                startupinfo = subprocess.STARTUPINFO(); startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                output_bytes = subprocess.check_output("cscript //Nologo C:\\Windows\\System32\\slmgr.vbs /xpr", shell=False, stderr=subprocess.DEVNULL, startupinfo=startupinfo)
                try: result = output_bytes.decode('utf-8').lower()
                except UnicodeDecodeError: result = output_bytes.decode(locale.getpreferredencoding(), errors='ignore').lower()
                activated_strings = ["activated permanently", "k√≠ch ho·∫°t vƒ©nh vi·ªÖn", "the machine is permanently activated"]
                if any(s in result for s in activated_strings):
                    status, color, result_data = "Windows ƒë∆∞·ª£c k√≠ch ho·∫°t vƒ©nh vi·ªÖn", theme_manager.get_color('SUCCESS'), {"K·∫øt qu·∫£": "ƒê√£ k√≠ch ho·∫°t vƒ©nh vi·ªÖn", "Tr·∫°ng th√°i": "T·ªët"}
                elif "will expire" in result or "s·∫Ω h·∫øt h·∫°n" in result:
                    expiry_date = result.split("on")[-1].strip() if "on" in result else result.split(" v√†o ")[-1].strip()
                    status, color, result_data = f"Windows s·∫Ω h·∫øt h·∫°n v√†o {expiry_date}", theme_manager.get_color('WARNING'), {"K·∫øt qu·∫£": f"S·∫Ω h·∫øt h·∫°n ({expiry_date})", "Tr·∫°ng th√°i": "L·ªói"}
                else: status, color, result_data = "Windows ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t", theme_manager.get_color('ERROR'), {"K·∫øt qu·∫£": "Ch∆∞a k√≠ch ho·∫°t", "Tr·∫°ng th√°i": "L·ªói"}
            except (subprocess.CalledProcessError, FileNotFoundError):
                status, color, result_data = "L·ªói khi ch·∫°y l·ªánh ki·ªÉm tra", theme_manager.get_color('ERROR'), {"K·∫øt qu·∫£": "L·ªói khi ch·∫°y l·ªánh ki·ªÉm tra", "Tr·∫°ng th√°i": "L·ªói"}
        else:
            status, color, result_data = "Ch·ªâ h·ªó tr·ª£ Windows", theme_manager.get_color('SKIP'), {"K·∫øt qu·∫£": "Ch·ªâ h·ªó tr·ª£ Windows", "Tr·∫°ng th√°i": "B·ªè qua"}
        if self.winfo_exists():
            self.after(0, self.update_ui, status, color, result_data)

    def update_ui(self, status, color, result_data):
        self.status_label.configure(text=status, text_color=color)
        self.mark_completed(result_data, auto_advance=False)
        self.show_result_choices()

# B∆∞·ªõc 5: System Info - placeholder ƒë∆°n gi·∫£n
class SystemInfoStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "C·∫•u H√¨nh Windows", "Th√¥ng tin h·ªá th·ªëng", "T·ª± ƒë·ªông ƒë·ªçc", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

# B∆∞·ªõc 6: Hard Drive Health - placeholder
class HardDriveHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "S·ª©c Kh·ªèe ·ªî C·ª©ng", "Ki·ªÉm tra S.M.A.R.T", "T·ª± ƒë·ªông ki·ªÉm tra", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

# B∆∞·ªõc 7: Screen Test - placeholder
class ScreenTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "M√†n H√¨nh", "Test m√†n h√¨nh", "Ki·ªÉm tra pixel", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

# B∆∞·ªõc 8: Keyboard & Touchpad - FULL IMPLEMENTATION
class KeyboardVisualTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B√†n ph√≠m & Touchpad & Chu·ªôt", "M·ªôt ph√≠m b·ªã li·ªát, k·∫πt, ho·∫∑c touchpad b·ªã lo·∫°n/m·∫•t c·ª≠ ch·ªâ ƒëa ƒëi·ªÉm s·∫Ω l√†m gi√°n ƒëo·∫°n ho√†n to√†n c√¥ng vi·ªác.", "**B√†n ph√≠m:** G√µ l·∫ßn l∆∞·ª£t t·∫•t c·∫£ c√°c ph√≠m. Ph√≠m b·∫°n g√µ s·∫Ω s√°ng l√™n m√†u xanh d∆∞∆°ng, v√† chuy·ªÉn sang xanh l√° khi ƒë∆∞·ª£c nh·∫£ ra.\n**Touchpad & Chu·ªôt:**\n   1. D√πng 1 ng√≥n tay v·∫Ω l√™n v√πng m√†u x√°m ƒë·ªÉ ki·ªÉm tra ƒëi·ªÉm ch·∫øt c·∫£m ·ª©ng.\n   2. Click tr√°i/ph·∫£i ƒë·ªÉ test n√∫t b·∫•m.\n   3. D√πng 2 ng√≥n tay ƒë·ªÉ cu·ªôn l√™n/xu·ªëng.", **kwargs)
        
        self.action_frame.grid_rowconfigure(1, weight=1)
        self.action_frame.grid_columnconfigure(0, weight=1)
        
        self.key_widgets = {}
        self.pressed_keys = set()
        
        # Touchpad/Mouse test canvas
        self.canvas = tk.Canvas(self.action_frame, bg=theme_manager.get_color('FRAME'), height=120, highlightthickness=1, highlightbackground=theme_manager.get_color('BORDER'))
        self.canvas.grid(row=0, column=0, sticky="ew", pady=(20, 15), padx=20)
        self.canvas.bind("<B1-Motion>", self.draw_on_canvas)
        
        # Keyboard visual
        keyboard_frame = ctk.CTkFrame(self.action_frame, fg_color="#DCE4E8", corner_radius=theme_manager.CORNER_RADIUS)
        keyboard_frame.grid(row=1, column=0, sticky="nsew", padx=20, pady=(0,15))
        self.populate_keyboard_visual(keyboard_frame)

        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="s", pady=(0, 20))
        self.show_result_choices()

        self.start_listening()

    def create_key_widget(self, parent, text, grid_opts):
        key = ctk.CTkLabel(parent, text=text.upper(), font=theme_manager.KEY_FONT, fg_color=theme_manager.get_color('FRAME'), text_color=theme_manager.get_color('TEXT_SECONDARY'), corner_radius=4)
        key.grid(**grid_opts)
        self.key_widgets[text.lower()] = key
        return key

    def populate_keyboard_visual(self, parent):
        parent.grid_columnconfigure(0, weight=1)
        parent.grid_rowconfigure(5, weight=1)

        # Function Keys Row
        row1 = ctk.CTkFrame(parent, fg_color="transparent")
        row1.pack(fill="x", padx=10, pady=(10, 5))
        keys_r1 = ['esc', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'delete']
        for i, k in enumerate(keys_r1):
            row1.grid_columnconfigure(i, weight=1)
            self.create_key_widget(row1, k, {'row': 0, 'column': i, 'sticky': 'ew', 'padx': 2, 'ipady': 5})

        # Number Row
        row2 = ctk.CTkFrame(parent, fg_color="transparent")
        row2.pack(fill="x", padx=10, pady=5)
        keys_r2 = ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'backspace']
        for i, k in enumerate(keys_r2):
            row2.grid_columnconfigure(i, weight=2 if i < 13 else 3)
            self.create_key_widget(row2, k, {'row': 0, 'column': i, 'sticky': 'ew', 'padx': 2, 'ipady': 10})

        # QWERTY Row
        row3 = ctk.CTkFrame(parent, fg_color="transparent")
        row3.pack(fill="x", padx=10, pady=5)
        keys_r3 = ['tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\']
        for i, k in enumerate(keys_r3):
            row3.grid_columnconfigure(i, weight=3 if i == 0 or i == 13 else 2)
            self.create_key_widget(row3, k, {'row': 0, 'column': i, 'sticky': 'ew', 'padx': 2, 'ipady': 10})
        
        # Home Row
        row4 = ctk.CTkFrame(parent, fg_color="transparent")
        row4.pack(fill="x", padx=10, pady=5)
        keys_r4 = ['caps lock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', "'", 'enter']
        for i, k in enumerate(keys_r4):
            row4.grid_columnconfigure(i, weight=4 if i == 0 or i == 12 else 2)
            self.create_key_widget(row4, k, {'row': 0, 'column': i, 'sticky': 'ew', 'padx': 2, 'ipady': 10})

        # Bottom Row
        row5 = ctk.CTkFrame(parent, fg_color="transparent")
        row5.pack(fill="x", padx=10, pady=5)
        keys_r5 = ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/', 'right shift']
        for i, k in enumerate(keys_r5):
            row5.grid_columnconfigure(i, weight=5 if i == 0 or i == 11 else 2)
            self.create_key_widget(row5, k, {'row': 0, 'column': i, 'sticky': 'ew', 'padx': 2, 'ipady': 10})

        # Spacebar Row
        row6 = ctk.CTkFrame(parent, fg_color="transparent")
        row6.pack(fill="x", padx=10, pady=(5, 10))
        keys_r6 = ['ctrl', 'fn', 'windows', 'alt', 'space', 'right alt', 'right ctrl', 'left', 'up', 'down', 'right']
        weights = [2, 1, 2, 2, 12, 2, 2, 1, 1, 1, 1]
        for i, k in enumerate(keys_r6):
            row6.grid_columnconfigure(i, weight=weights[i])
            self.create_key_widget(row6, k, {'row': 0, 'column': i, 'sticky': 'ew', 'padx': 2, 'ipady': 10})
    
    def draw_on_canvas(self, event): 
        self.canvas.create_oval(event.x-4, event.y-4, event.x+4, event.y+4, fill=theme_manager.get_color('ACCENT'), outline=theme_manager.get_color('ACCENT'))
    
    def show_result_choices(self):
        ctk.CTkLabel(self.result_container, text="B√†n ph√≠m, Touchpad v√† Chu·ªôt c√≥ ho·∫°t ƒë·ªông t·ªët kh√¥ng?", font=theme_manager.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent"); button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="C√≥, t·∫•t c·∫£ ƒë·ªÅu t·ªët", image=self.icon_manager.CHECK if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Ho·∫°t ƒë·ªông t·ªët", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=theme_manager.get_color('SUCCESS'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(button_bar, text="Kh√¥ng, c√≥ l·ªói", image=self.icon_manager.CROSS if self.icon_manager else None, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ l·ªói", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=theme_manager.get_color('ERROR'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)

    def on_key_event(self, event):
        # Ch·∫∑n c√°c ph√≠m ch·ª•p m√†n h√¨nh
        screenshot_keys = ['print screen', 'prtsc', 'prtscr', 'snapshot']
        if event.name.lower() in screenshot_keys:
            return True  # Suppress screenshot keys
        
        if self.winfo_exists():
            self.after(0, self._update_key_ui, event.name, event.event_type)
        return False  # Don't suppress other keys

    def _update_key_ui(self, key_name_raw, event_type):
        key_name = key_name_raw.lower()
        # Map c√°c ph√≠m ƒë·∫∑c bi·ªát
        key_map = { 
            'left shift': 'shift', 
            'right shift': 'right shift', 
            'left ctrl': 'ctrl', 
            'right ctrl': 'right ctrl', 
            'left alt': 'alt', 
            'alt gr': 'right alt', 
            'left windows': 'windows', 
            'caps lock': 'caps lock',
            'backslash': '\\',  # Map backslash key
            '\\': '\\'  # Alternative mapping
        }
        mapped_key = key_map.get(key_name, key_name)

        widget = self.key_widgets.get(mapped_key)
        if not widget: 
            # Debug: print unmapped keys
            if event_type == 'down':
                print(f"[DEBUG] Unmapped key: '{key_name_raw}' -> '{mapped_key}'")
            return

        if event_type == 'down':
            widget.configure(fg_color=theme_manager.get_color('ACCENT'), text_color="white")
            self.pressed_keys.add(mapped_key)
        elif event_type == 'up':
            widget.configure(fg_color=theme_manager.get_color('SUCCESS'), text_color="white")
            if mapped_key in self.pressed_keys:
                self.pressed_keys.remove(mapped_key)

    def start_listening(self):
        try:
            import keyboard
            # Hook v·ªõi suppress=True ƒë·ªÉ ch·∫∑n c√°c ph√≠m kh√¥ng mong mu·ªën
            keyboard.hook(self.on_key_event, suppress=True)
        except Exception as e:
            print(f"Keyboard hook error: {e}")

    def stop_tasks(self):
        super().stop_tasks()
        try:
            import keyboard
            keyboard.unhook_all()
        except Exception: pass

# B∆∞·ªõc 9: Ports - placeholder
class PortsConnectivityStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "C·ªïng K·∫øt N·ªëi", "Test c·ªïng", "C·∫Øm thi·∫øt b·ªã", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

# B∆∞·ªõc 10: Battery - placeholder
class BatteryHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Pin Laptop", "Ki·ªÉm tra pin", "ƒê·ªçc th√¥ng tin pin", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

# B∆∞·ªõc 11: Speaker Test
class SpeakerTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(
            master,
            "Loa & Micro",
            "Ki·ªÉm tra loa ƒë·ªÉ ƒë·∫£m b·∫£o √¢m thanh r√µ r√†ng, kh√¥ng b·ªã r√®, t·∫°p √¢m hay m√©o ti·∫øng. Loa h·ªèng l√† v·∫•n ƒë·ªÅ ph·ªï bi·∫øn tr√™n laptop c≈©.",
            "Nh·∫•n n√∫t ph√°t √¢m thanh test. L·∫Øng nghe k·ªπ t·ª´ng k√™nh tr√°i/ph·∫£i. Ki·ªÉm tra √¢m l∆∞·ª£ng t·ªëi ƒëa c√≥ b·ªã m√©o kh√¥ng.",
            **kwargs
        )
        self.audio_file = asset_path('stereo_test.mp3')
        self.is_playing = False
        self.create_audio_test_ui()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
    
    def create_audio_test_ui(self):
        # Audio info
        info_frame = ctk.CTkFrame(self.action_frame, fg_color=theme_manager.get_color('FRAME'), corner_radius=theme_manager.CORNER_RADIUS)
        info_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        ctk.CTkLabel(info_frame, text="üîä Test Loa Stereo", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT')).pack(pady=15)
        
        # Instructions
        instructions = [
            "- TƒÉng √¢m l∆∞·ª£ng l√™n 50-70%",
            "- Nghe k√™nh tr√°i v√† ph·∫£i c√≥ c√¢n b·∫±ng kh√¥ng",
            "- Ki·ªÉm tra c√≥ ti·∫øng r√®, t·∫°p √¢m, m√©o ti·∫øng kh√¥ng",
            "- Test ·ªü √¢m l∆∞·ª£ng t·ªëi ƒëa (c·∫©n th·∫≠n!)"
        ]
        
        for instruction in instructions:
            ctk.CTkLabel(info_frame, text=instruction, font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('TEXT')).pack(anchor="w", padx=20, pady=5)
        
        # Play button
        button_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        button_frame.grid(row=1, column=0, pady=20)
        
        self.play_btn = ctk.CTkButton(
            button_frame,
            text="‚ñ∂Ô∏è Ph√°t √¢m thanh test",
            command=self.play_audio,
            fg_color=theme_manager.get_color('ACCENT'),
            height=60,
            width=250,
            font=theme_manager.SUBHEADING_FONT
        )
        self.play_btn.pack(pady=10)
        
        self.stop_btn = ctk.CTkButton(
            button_frame,
            text="‚èπÔ∏è D·ª´ng",
            command=self.stop_audio,
            fg_color=theme_manager.get_color('ERROR'),
            height=50,
            width=200,
            font=theme_manager.BODY_FONT,
            state="disabled"
        )
        self.stop_btn.pack(pady=10)
        
        self.status_label = ctk.CTkLabel(button_frame, text="", font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY'))
        self.status_label.pack(pady=10)
    
    def play_audio(self):
        if not os.path.exists(self.audio_file):
            self.status_label.configure(text="‚ùå Kh√¥ng t√¨m th·∫•y file audio", text_color=theme_manager.get_color('ERROR'))
            return
        
        try:
            import pygame
            pygame.mixer.init()
            pygame.mixer.music.load(self.audio_file)
            pygame.mixer.music.play()
            
            self.is_playing = True
            self.play_btn.configure(state="disabled")
            self.stop_btn.configure(state="normal")
            self.status_label.configure(text="üîä ƒêang ph√°t...", text_color=theme_manager.get_color('SUCCESS'))
            
            # Show result choices after playing
            self.after(2000, self.show_result_choices)
            
        except Exception as e:
            self.status_label.configure(text=f"‚ùå L·ªói: {str(e)}", text_color=theme_manager.get_color('ERROR'))
    
    def stop_audio(self):
        try:
            import pygame
            pygame.mixer.music.stop()
            self.is_playing = False
            self.play_btn.configure(state="normal")
            self.stop_btn.configure(state="disabled")
            self.status_label.configure(text="‚èπÔ∏è ƒê√£ d·ª´ng", text_color=theme_manager.get_color('TEXT_SECONDARY'))
        except:
            pass
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.result_container, text="Loa ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?", font=theme_manager.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        self.btn_good = ctk.CTkButton(
            button_bar,
            text="‚úÖ T·ªët - R√µ r√†ng, c√¢n b·∫±ng",
            image=self.icon_manager.CHECK if self.icon_manager else None,
            compound="left",
            command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Loa ho·∫°t ƒë·ªông t·ªët", "Tr·∫°ng th√°i": "T·ªët"}, {}),
            fg_color=theme_manager.get_color('SUCCESS'),
            height=theme_manager.BUTTON_HEIGHT,
            font=theme_manager.BODY_FONT
        )
        self.btn_good.pack(side="left", padx=5)
        
        self.btn_fair = ctk.CTkButton(
            button_bar,
            text="‚ö†Ô∏è Trung b√¨nh - C√≥ t·∫°p √¢m nh·∫π",
            command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Loa c√≥ t·∫°p √¢m nh·∫π", "Tr·∫°ng th√°i": "C·∫£nh b√°o"}, {}),
            fg_color=theme_manager.get_color('WARNING'),
            height=theme_manager.BUTTON_HEIGHT,
            font=theme_manager.BODY_FONT
        )
        self.btn_fair.pack(side="left", padx=5)
        
        self.btn_bad = ctk.CTkButton(
            button_bar,
            text="‚ùå K√©m - R√®, m√©o, m·∫•t k√™nh",
            image=self.icon_manager.CROSS if self.icon_manager else None,
            compound="left",
            command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "Loa c√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng", "Tr·∫°ng th√°i": "L·ªói"}),
            fg_color=theme_manager.get_color('ERROR'),
            height=theme_manager.BUTTON_HEIGHT,
            font=theme_manager.BODY_FONT
        )
        self.btn_bad.pack(side="left", padx=5)
    
    def stop_tasks(self):
        super().stop_tasks()
        self.stop_audio()

# B∆∞·ªõc 12: Webcam - placeholder
class WebcamTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Webcam", "Test camera", "M·ªü camera", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

# B∆∞·ªõc 13: Network Test - FULL IMPLEMENTATION
class NetworkTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "M·∫°ng & WiFi", "K·∫øt n·ªëi m·∫°ng ·ªïn ƒë·ªãnh quan tr·ªçng cho c√¥ng vi·ªác v√† gi·∫£i tr√≠ online.", "Test s·∫Ω ki·ªÉm tra Internet, WiFi, DNS, t·ªëc ƒë·ªô v√† ping.", **kwargs)
        self.test_results = {}
        self.is_testing = False
        self.create_network_test_ui()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=4, column=0, sticky="sew", pady=(20,0))
    
    def create_network_test_ui(self):
        controls_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        controls_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        self.start_btn = ctk.CTkButton(controls_frame, text="üöÄ B·∫Øt ƒê·∫ßu Test", command=self.start_network_test, fg_color=theme_manager.get_color('SUCCESS'), width=150, height=40)
        self.start_btn.pack(side="left", padx=5)
        
        self.status_label = ctk.CTkLabel(self.action_frame, text="S·∫µn s√†ng test m·∫°ng", font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY'))
        self.status_label.grid(row=1, column=0, pady=10)
        
        self.progress_bar = ctk.CTkProgressBar(self.action_frame, progress_color=theme_manager.get_color('ACCENT'))
        self.progress_bar.grid(row=2, column=0, sticky="ew", padx=20, pady=10)
        self.progress_bar.set(0)
        
        self.results_text = ctk.CTkTextbox(self.action_frame, height=300, font=theme_manager.BODY_FONT)
        self.results_text.grid(row=3, column=0, sticky="ew", padx=20, pady=10)
    
    def start_network_test(self):
        if self.is_testing: return
        self.is_testing = True
        self.start_btn.configure(state="disabled")
        self.results_text.delete("0.0", "end")
        threading.Thread(target=self.run_tests, daemon=True).start()
    
    def run_tests(self):
        tests = [("Internet", self.test_internet), ("DNS", self.test_dns), ("T·ªëc ƒë·ªô", self.test_speed), ("WiFi", self.test_wifi), ("Ping", self.test_ping)]
        for i, (name, func) in enumerate(tests):
            if not self.is_testing: break
            self.update_status(f"ƒêang test {name}...")
            self.progress_bar.set((i+0.5)/len(tests))
            result = func()
            self.display_result(name, result)
            self.progress_bar.set((i+1)/len(tests))
            time.sleep(0.5)
        if self.is_testing:
            self.update_status("Ho√†n th√†nh!")
            self.show_result_choices()
            self.is_testing = False
    
    def test_internet(self):
        try:
            import requests
            requests.get("https://www.google.com", timeout=5)
            return "‚úÖ K·∫øt n·ªëi Internet OK"
        except: return "‚ùå Kh√¥ng c√≥ Internet"
    
    def test_dns(self):
        try:
            socket.gethostbyname("google.com")
            return "‚úÖ DNS ho·∫°t ƒë·ªông t·ªët"
        except: return "‚ùå DNS l·ªói"
    
    def test_speed(self):
        try:
            import requests
            start = time.time()
            requests.get("https://httpbin.org/bytes/1048576", timeout=30)
            speed = 8/(time.time()-start)
            return f"üìä T·ªëc ƒë·ªô: {speed:.1f} Mbps"
        except: return "‚ö†Ô∏è Kh√¥ng test ƒë∆∞·ª£c t·ªëc ƒë·ªô"
    
    def test_wifi(self):
        try:
            if platform.system() == "Windows":
                output = subprocess.check_output('netsh wlan show interfaces', shell=True, text=True)
                for line in output.split('\n'):
                    if 'SSID' in line and 'BSSID' not in line:
                        return f"üì∂ WiFi: {line.split(':')[1].strip()}"
            return "‚ÑπÔ∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin WiFi"
        except: return "‚ö†Ô∏è L·ªói ƒë·ªçc WiFi"
    
    def test_ping(self):
        try:
            cmd = "ping -n 3 8.8.8.8" if platform.system() == "Windows" else "ping -c 3 8.8.8.8"
            subprocess.check_output(cmd, shell=True, timeout=10)
            return "üèì Ping OK"
        except: return "‚ùå Ping timeout"
    
    def update_status(self, msg):
        self.status_label.configure(text=msg)
    
    def display_result(self, name, result):
        self.results_text.insert("end", f"{name}: {result}\n")
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children(): widget.destroy()
        ctk.CTkLabel(self.result_container, text="Test m·∫°ng ho√†n th√†nh. Ti·∫øp t·ª•c?", font=theme_manager.SUBHEADING_FONT).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent"); button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="Ti·∫øp t·ª•c", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ test m·∫°ng", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), fg_color=theme_manager.get_color('SUCCESS'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)

# Expert mode steps - placeholders
class CPUStressTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "CPU Stress Test", "Test CPU", "Stress test", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class HardDriveSpeedStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "T·ªëc ƒê·ªô ·ªî C·ª©ng", "Test t·ªëc ƒë·ªô", "Benchmark", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class GPUStressTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "GPU Stress Test", "Test GPU", "Stress test", **kwargs)
        self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True)

class ThermalPerformanceStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Thermal Monitor", "Gi√°m s√°t nhi·ªát ƒë·ªô CPU real-time ƒë·ªÉ ph√°t hi·ªán v·∫•n ƒë·ªÅ t·∫£n nhi·ªát v√† throttling.", "Nh·∫•n Start ƒë·ªÉ b·∫Øt ƒë·∫ßu monitoring. C√≥ th·ªÉ ch·∫°y Stress Test ƒë·ªÉ ki·ªÉm tra d∆∞·ªõi t·∫£i n·∫∑ng.", **kwargs)
        self.is_monitoring = False
        self.max_cpu_temp = 0
        self.create_thermal_ui()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=3, column=0, sticky="sew", pady=(20,0))
    
    def create_thermal_ui(self):
        controls = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        controls.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        self.start_btn = ctk.CTkButton(controls, text="üöÄ Start Monitor", command=self.start_monitoring, fg_color=theme_manager.get_color('SUCCESS'), width=130, height=40)
        self.start_btn.pack(side="left", padx=5)
        
        self.stop_btn = ctk.CTkButton(controls, text="‚èπÔ∏è Stop", command=self.stop_monitoring, fg_color=theme_manager.get_color('ERROR'), width=100, height=40, state="disabled")
        self.stop_btn.pack(side="left", padx=5)
        
        metrics = ctk.CTkFrame(self.action_frame, fg_color=theme_manager.get_color('FRAME'), corner_radius=8)
        metrics.grid(row=1, column=0, sticky="ew", padx=20, pady=10)
        
        self.cpu_temp_label = ctk.CTkLabel(metrics, text="üå°Ô∏è CPU: -- ¬∞C", font=theme_manager.BODY_FONT)
        self.cpu_temp_label.pack(pady=5)
        
        self.cpu_usage_label = ctk.CTkLabel(metrics, text="‚ö° CPU: --%", font=theme_manager.BODY_FONT)
        self.cpu_usage_label.pack(pady=5)
        
        self.log_text = ctk.CTkTextbox(self.action_frame, height=200, font=theme_manager.SMALL_FONT)
        self.log_text.grid(row=2, column=0, sticky="ew", padx=20, pady=10)
        self.log_text.insert("0.0", "Ch∆∞a b·∫Øt ƒë·∫ßu monitoring...\n")
    
    def start_monitoring(self):
        if self.is_monitoring: return
        self.is_monitoring = True
        self.start_btn.configure(state="disabled")
        self.stop_btn.configure(state="normal")
        self.max_cpu_temp = 0
        self.log_text.delete("0.0", "end")
        self.log_text.insert("0.0", "‚úÖ B·∫Øt ƒë·∫ßu monitoring...\n")
        threading.Thread(target=self.monitoring_loop, daemon=True).start()
    
    def stop_monitoring(self):
        self.is_monitoring = False
        self.start_btn.configure(state="normal")
        self.stop_btn.configure(state="disabled")
        self.log_text.insert("end", f"\n‚èπÔ∏è D·ª´ng monitoring. Max temp: {self.max_cpu_temp:.1f}¬∞C\n")
        self.show_result_choices()
    
    def monitoring_loop(self):
        for _ in range(30):
            if not self.is_monitoring: break
            cpu_usage = psutil.cpu_percent(interval=1)
            cpu_temp = 35 + (cpu_usage/100)*40 + __import__('random').uniform(-2, 2)
            self.max_cpu_temp = max(self.max_cpu_temp, cpu_temp)
            
            temp_color = theme_manager.get_color('ERROR') if cpu_temp > 80 else theme_manager.get_color('WARNING') if cpu_temp > 70 else theme_manager.get_color('SUCCESS')
            self.cpu_temp_label.configure(text=f"üå°Ô∏è CPU: {cpu_temp:.1f}¬∞C", text_color=temp_color)
            self.cpu_usage_label.configure(text=f"‚ö° CPU: {cpu_usage:.1f}%")
            
            if cpu_temp > 80:
                self.log_text.insert("end", f"üî• C·∫¢NH B√ÅO: CPU qu√° n√≥ng ({cpu_temp:.1f}¬∞C)\n")
            time.sleep(1)
        
        if self.is_monitoring:
            self.stop_monitoring()
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children(): widget.destroy()
        ctk.CTkLabel(self.result_container, text="Monitoring ho√†n th√†nh. Ti·∫øp t·ª•c?", font=theme_manager.SUBHEADING_FONT).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent"); button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="Ti·∫øp t·ª•c", command=lambda: self.mark_completed({"K·∫øt qu·∫£": f"Max temp: {self.max_cpu_temp:.1f}¬∞C", "Tr·∫°ng th√°i": "T·ªët" if self.max_cpu_temp < 85 else "C·∫£nh b√°o"}, auto_advance=True), fg_color=theme_manager.get_color('SUCCESS'), height=theme_manager.BUTTON_HEIGHT, font=theme_manager.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)

# Summary Step
class SummaryStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B√°o C√°o T·ªïng K·∫øt", "", "", **kwargs)
        self.title = "B√°o C√°o T·ªïng K·∫øt"
    
    def analyze_hardware_capability(self, results):
        """Ph√¢n t√≠ch kh·∫£ nƒÉng s·ª≠ d·ª•ng d·ª±a tr√™n th√¥ng tin ph·∫ßn c·ª©ng t·ª´ BIOS"""
        hw_info = results.get("ƒê·ªãnh danh ph·∫ßn c·ª©ng", {})
        cpu_info = hw_info.get("Chi ti·∫øt", "")
        
        # Ph√¢n t√≠ch CPU
        cpu_tier = "unknown"
        cpu_name = ""
        if "Intel" in cpu_info or "AMD" in cpu_info:
            for line in cpu_info.split("\n"):
                if "CPU:" in line:
                    cpu_name = line.split("CPU:")[1].strip()
                    break
        
        # X√°c ƒë·ªãnh tier CPU
        if any(x in cpu_name.upper() for x in ["I9", "I7", "RYZEN 9", "RYZEN 7"]):
            cpu_tier = "high"
        elif any(x in cpu_name.upper() for x in ["I5", "RYZEN 5"]):
            cpu_tier = "mid"
        elif any(x in cpu_name.upper() for x in ["I3", "RYZEN 3", "CELERON", "PENTIUM"]):
            cpu_tier = "low"
        
        # Ph√¢n t√≠ch GPU
        gpu_dedicated = False
        if "GPU:" in cpu_info:
            for line in cpu_info.split("\n"):
                if "GPU:" in line:
                    gpu_text = line.split("GPU:")[1].strip().upper()
                    if any(x in gpu_text for x in ["RTX", "GTX", "RADEON RX", "RADEON PRO"]):
                        gpu_dedicated = True
                    break
        
        # T·∫°o nh·∫≠n ƒë·ªãnh
        capabilities = []
        
        if cpu_tier == "high":
            capabilities.append({
                "icon": "üéÆ",
                "title": "Gaming & Rendering",
                "desc": "Ph√π h·ª£p cho gaming AAA, render 3D, video editing chuy√™n nghi·ªáp",
                "color": "#10B981"
            })
            capabilities.append({
                "icon": "üíº",
                "title": "Workstation",
                "desc": "X·ª≠ l√Ω ƒëa nhi·ªám n·∫∑ng, ph√°t tri·ªÉn ph·∫ßn m·ªÅm, m√°y ·∫£o",
                "color": "#3B82F6"
            })
        elif cpu_tier == "mid":
            capabilities.append({
                "icon": "üéÆ",
                "title": "Gaming Casual",
                "desc": "Ch∆°i game ·ªü m·ª©c trung b√¨nh, streaming, content creation",
                "color": "#F59E0B"
            })
            capabilities.append({
                "icon": "üíº",
                "title": "VƒÉn ph√≤ng n√¢ng cao",
                "desc": "Office, l·∫≠p tr√¨nh, thi·∫øt k·∫ø ƒë·ªì h·ªça 2D, ƒëa nhi·ªám v·ª´a ph·∫£i",
                "color": "#3B82F6"
            })
        else:
            capabilities.append({
                "icon": "üìù",
                "title": "VƒÉn ph√≤ng c∆° b·∫£n",
                "desc": "Office, web browsing, email, xem phim",
                "color": "#94A3B8"
            })
            capabilities.append({
                "icon": "üéì",
                "title": "H·ªçc t·∫≠p",
                "desc": "H·ªçc online, so·∫°n th·∫£o vƒÉn b·∫£n, nghi√™n c·ª©u",
                "color": "#06B6D4"
            })
        
        if gpu_dedicated:
            capabilities.insert(0, {
                "icon": "üé®",
                "title": "ƒê·ªì h·ªça chuy√™n nghi·ªáp",
                "desc": "GPU r·ªùi m·∫°nh, ph√π h·ª£p cho CAD, 3D modeling, AI/ML",
                "color": "#8B5CF6"
            })
        
        return capabilities, cpu_name
    
    def display_summary(self, results):
        for widget in self.action_frame.winfo_children(): 
            widget.destroy()
        
        # Header
        header_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20,10))
        ctk.CTkLabel(header_frame, text="üìä B√ÅO C√ÅO T·ªîNG K·∫æT", font=theme_manager.HEADING_FONT, text_color=theme_manager.get_color('ACCENT')).pack()
        
        # Statistics Card
        stats_card = ctk.CTkFrame(self.action_frame, fg_color=theme_manager.get_color('FRAME'), corner_radius=theme_manager.CORNER_RADIUS)
        stats_card.pack(fill="x", padx=20, pady=10)
        
        total_tests = len(results)
        passed_tests = sum(1 for r in results.values() if r.get("Tr·∫°ng th√°i") == "T·ªët")
        warning_tests = sum(1 for r in results.values() if r.get("Tr·∫°ng th√°i") == "C·∫£nh b√°o")
        failed_tests = sum(1 for r in results.values() if r.get("Tr·∫°ng th√°i") == "L·ªói")
        skipped_tests = sum(1 for r in results.values() if r.get("Tr·∫°ng th√°i") == "B·ªè qua")
        success_rate = (passed_tests/total_tests*100) if total_tests > 0 else 0
        
        # Stats grid
        stats_grid = ctk.CTkFrame(stats_card, fg_color="transparent")
        stats_grid.pack(fill="x", padx=20, pady=20)
        stats_grid.grid_columnconfigure((0,1,2,3,4), weight=1)
        
        # Total
        self._create_stat_item(stats_grid, 0, "üìã", "T·ªïng s·ªë test", str(total_tests), "#64748B")
        # Passed
        self._create_stat_item(stats_grid, 1, "‚úÖ", "ƒê·∫°t", str(passed_tests), "#10B981")
        # Warning
        if warning_tests > 0:
            self._create_stat_item(stats_grid, 2, "‚ö†Ô∏è", "C·∫£nh b√°o", str(warning_tests), "#F59E0B")
        # Failed
        if failed_tests > 0:
            self._create_stat_item(stats_grid, 3, "‚ùå", "L·ªói", str(failed_tests), "#EF4444")
        # Success rate
        rate_color = "#10B981" if success_rate >= 80 else "#F59E0B" if success_rate >= 60 else "#EF4444"
        self._create_stat_item(stats_grid, 4, "üìä", "T·ª∑ l·ªá", f"{success_rate:.0f}%", rate_color)
        
        # Hardware Capability Analysis
        capabilities, cpu_name = self.analyze_hardware_capability(results)
        
        if capabilities:
            cap_header = ctk.CTkFrame(self.action_frame, fg_color="transparent")
            cap_header.pack(fill="x", padx=20, pady=(20,10))
            ctk.CTkLabel(cap_header, text="üí° Kh·∫£ NƒÉng S·ª≠ D·ª•ng Ph·∫ßn C·ª©ng", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT')).pack(anchor="w")
            
            if cpu_name:
                ctk.CTkLabel(cap_header, text=f"D·ª±a tr√™n: {cpu_name}", font=theme_manager.SMALL_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY')).pack(anchor="w", pady=(5,0))
            
            # Capabilities grid
            cap_grid = ctk.CTkFrame(self.action_frame, fg_color="transparent")
            cap_grid.pack(fill="x", padx=20, pady=10)
            
            for idx, cap in enumerate(capabilities):
                cap_card = ctk.CTkFrame(cap_grid, fg_color=theme_manager.get_color('FRAME'), corner_radius=theme_manager.CORNER_RADIUS, border_width=2, border_color=cap["color"])
                cap_card.pack(fill="x", pady=8)
                
                cap_content = ctk.CTkFrame(cap_card, fg_color="transparent")
                cap_content.pack(fill="x", padx=15, pady=15)
                
                # Icon and title
                title_frame = ctk.CTkFrame(cap_content, fg_color="transparent")
                title_frame.pack(fill="x")
                ctk.CTkLabel(title_frame, text=f"{cap['icon']} {cap['title']}", font=theme_manager.BODY_FONT, text_color=cap["color"]).pack(anchor="w")
                
                # Description
                ctk.CTkLabel(cap_content, text=cap["desc"], font=theme_manager.SMALL_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY'), wraplength=800, justify="left").pack(anchor="w", pady=(5,0))
        
        # Detailed Results
        details_header = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        details_header.pack(fill="x", padx=20, pady=(20,10))
        ctk.CTkLabel(details_header, text="üìù Chi Ti·∫øt K·∫øt Qu·∫£", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT')).pack(anchor="w")
        
        # Results list
        for step_name, result_data in results.items():
            self._create_result_item(step_name, result_data)
        
        # Export buttons
        export_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        export_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkButton(export_frame, text="üìÑ Xu·∫•t PDF", font=theme_manager.BODY_FONT, fg_color=theme_manager.get_color('ACCENT'), height=50).pack(side="left", padx=5)
        ctk.CTkButton(export_frame, text="üìä Xu·∫•t Excel", font=theme_manager.BODY_FONT, fg_color=theme_manager.get_color('SUCCESS'), height=50).pack(side="left", padx=5)
        ctk.CTkButton(export_frame, text="üìã Copy Text", font=theme_manager.BODY_FONT, fg_color=theme_manager.get_color('INFO'), height=50).pack(side="left", padx=5)
    
    def _create_stat_item(self, parent, col, icon, label, value, color):
        frame = ctk.CTkFrame(parent, fg_color="transparent")
        frame.grid(row=0, column=col, padx=10, pady=5)
        ctk.CTkLabel(frame, text=icon, font=("Arial", 24)).pack()
        ctk.CTkLabel(frame, text=value, font=("Arial", 28, "bold"), text_color=color).pack()
        ctk.CTkLabel(frame, text=label, font=("Arial", 14), text_color=theme_manager.get_color('TEXT_SECONDARY')).pack()
    
    def _create_result_item(self, step_name, result_data):
        status = result_data.get("Tr·∫°ng th√°i", "Kh√¥ng r√µ")
        result_text = result_data.get("K·∫øt qu·∫£", "N/A")
        
        # Determine color and icon
        if status == "T·ªët":
            color, icon = "#10B981", "‚úÖ"
        elif status == "C·∫£nh b√°o":
            color, icon = "#F59E0B", "‚ö†Ô∏è"
        elif status == "L·ªói":
            color, icon = "#EF4444", "‚ùå"
        elif status == "B·ªè qua":
            color, icon = "#94A3B8", "‚è≠Ô∏è"
        else:
            color, icon = "#64748B", "‚ùì"
        
        item_frame = ctk.CTkFrame(self.action_frame, fg_color=theme_manager.get_color('FRAME'), corner_radius=8)
        item_frame.pack(fill="x", padx=20, pady=5)
        
        content = ctk.CTkFrame(item_frame, fg_color="transparent")
        content.pack(fill="x", padx=15, pady=10)
        content.grid_columnconfigure(1, weight=1)
        
        # Icon
        ctk.CTkLabel(content, text=icon, font=("Arial", 20)).grid(row=0, column=0, padx=(0,10))
        
        # Step name
        ctk.CTkLabel(content, text=step_name, font=("Arial", 16), text_color=theme_manager.get_color('TEXT')).grid(row=0, column=1, sticky="w")
        
        # Status
        status_label = ctk.CTkLabel(content, text=status, font=("Arial", 14), text_color=color, fg_color=color+"20", corner_radius=6)
        status_label.grid(row=0, column=2, padx=10)
        
        # Result detail
        if result_text and result_text != "N/A":
            ctk.CTkLabel(content, text=result_text, font=("Arial", 14), text_color=theme_manager.get_color('TEXT_SECONDARY'), wraplength=600, justify="left").grid(row=1, column=1, columnspan=2, sticky="w", pady=(5,0))
        
        # Chi ti·∫øt (n·∫øu c√≥)
        chi_tiet = result_data.get("Chi ti·∫øt", "")
        if chi_tiet and len(chi_tiet) < 300:
            detail_text = chi_tiet.replace("\n", " | ")
            ctk.CTkLabel(content, text=f"Chi ti·∫øt: {detail_text}", font=("Arial", 12), text_color=theme_manager.get_color('TEXT_SECONDARY'), wraplength=600, justify="left").grid(row=2, column=1, columnspan=2, sticky="w", pady=(3,0))

# WizardFrame v·ªõi c·∫•u tr√∫c b∆∞·ªõc ƒë√∫ng
class WizardFrame(ctk.CTkFrame):
    def __init__(self, master, mode, icon_manager, app=None):
        super().__init__(master, fg_color="transparent")
        self.mode = mode
        self.icon_manager = icon_manager
        self.app = app
        self.current_step = 0
        self.steps = self._get_steps_for_mode(mode)
        self.all_results = {}
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        self.grid_rowconfigure(2, weight=0)  # Navigation row
        
        # Header v·ªõi progress
        self.create_header()
        self.create_navigation()
        self.show_step(0)
    
    def create_navigation(self):
        # Navigation lu√¥n hi·ªÉn th·ªã v√† c·ªë ƒë·ªãnh
        nav_frame = ctk.CTkFrame(self, fg_color=theme_manager.get_color('FRAME'), height=80)
        nav_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=(10,20))
        nav_frame.grid_columnconfigure(1, weight=1)
        nav_frame.grid_propagate(False)
        nav_frame.lift()
        
        # Previous button
        self.prev_btn = ctk.CTkButton(nav_frame, text="‚Üê Tr∆∞·ªõc", command=self.go_previous, 
                                     fg_color=theme_manager.get_color('SKIP'), width=130, height=50, font=theme_manager.BODY_FONT)
        self.prev_btn.grid(row=0, column=0, padx=20, pady=15)
        
        # Skip button
        self.skip_btn = ctk.CTkButton(nav_frame, text="B·ªè qua", command=self.skip_current_step,
                                     fg_color=theme_manager.get_color('WARNING'), width=110, height=50, font=theme_manager.BODY_FONT)
        self.skip_btn.grid(row=0, column=1, pady=15)
        
        # Next button  
        self.next_btn = ctk.CTkButton(nav_frame, text="Ti·∫øp theo ‚Üí", command=self.go_to_next_step, 
                                     fg_color=theme_manager.get_color('ACCENT'), width=130, height=50, font=theme_manager.BODY_FONT)
        self.next_btn.grid(row=0, column=2, padx=20, pady=15)
        
        self.update_navigation_state()
    
    def skip_current_step(self):
        """B·ªè qua b∆∞·ªõc hi·ªán t·∫°i"""
        if self.current_step < len(self.steps):
            step_name, _ = self.steps[self.current_step]
            self.record_result(step_name, {"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"})
        self.go_to_next_step()
    
    def go_previous(self):
        if self.current_step > 0:
            self.current_step -= 1
            self.show_step(self.current_step)
            self.update_navigation_state()
    
    def create_header(self):
            header = ctk.CTkFrame(self, fg_color=theme_manager.get_color('FRAME'), height=80)
            header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20,10))
            header.grid_columnconfigure(1, weight=1)
            
            # Step counter
            self.step_label = ctk.CTkLabel(header, text="", font=theme_manager.SUBHEADING_FONT, text_color=theme_manager.get_color('ACCENT'))
            self.step_label.grid(row=0, column=0, padx=20, pady=20)
            
            # Progress bar
            self.progress_bar = ctk.CTkProgressBar(header, progress_color=theme_manager.get_color('ACCENT'))
            self.progress_bar.grid(row=0, column=1, sticky="ew", padx=20, pady=20)
            
            # Mode indicator
            mode_text = "Ch·∫ø ƒë·ªô Chuy√™n gia" if self.mode == "expert" else "Ch·∫ø ƒë·ªô C∆° b·∫£n"
            self.mode_label = ctk.CTkLabel(header, text=mode_text, font=theme_manager.BODY_FONT, text_color=theme_manager.get_color('TEXT_SECONDARY'))
            self.mode_label.grid(row=0, column=2, padx=20, pady=20)
        
        def _get_steps_for_mode(self, mode):
            # C·∫•u tr√∫c b∆∞·ªõc ƒë√∫ng nh∆∞ main_enhanced
            basic_steps = [
                # B∆∞·ªõc 1: Checklist ngo·∫°i h√¨nh
                ("Ki·ªÉm tra ngo·∫°i h√¨nh", PhysicalInspectionStep),
                # B∆∞·ªõc 2: BIOS  
                ("Ki·ªÉm tra BIOS", BIOSCheckStep),
                # B∆∞·ªõc 3: ƒê·ªãnh danh ph·∫ßn c·ª©ng t·ª± ƒë·ªông
                ("ƒê·ªãnh danh ph·∫ßn c·ª©ng", HardwareFingerprintStep),
                # C√°c b∆∞·ªõc ti·∫øp theo
                ("B·∫£n quy·ªÅn Windows", LicenseCheckStep), 
                ("C·∫•u h√¨nh h·ªá th·ªëng", SystemInfoStep),
                ("S·ª©c kh·ªèe ·ªï c·ª©ng", HardDriveHealthStep),
                ("Ki·ªÉm tra m√†n h√¨nh", ScreenTestStep),
                ("B√†n ph√≠m & Touchpad", KeyboardVisualTestStep),
                ("C·ªïng k·∫øt n·ªëi", PortsConnectivityStep),
                ("Pin laptop", BatteryHealthStep),
                ("Loa & Micro", SpeakerTestStep),
                ("Webcam", WebcamTestStep),
                ("M·∫°ng & WiFi", NetworkTestStep)
            ]
            
            expert_steps = basic_steps + [
                ("CPU Stress Test", CPUStressTestStep),
                ("T·ªëc ƒë·ªô ·ªï c·ª©ng", HardDriveSpeedStep), 
                ("GPU Stress Test", GPUStressTestStep),
                ("Thermal Monitor", ThermalPerformanceStep)
            ]
            
            return expert_steps if mode == "expert" else basic_steps
        
        def show_step(self, step_index):
            # Clear content area only - keep header and navigation
            for widget in self.winfo_children():
                if widget not in [self.winfo_children()[0], self.winfo_children()[-1]]:  # Keep header and navigation
                    widget.destroy()
            
            # Recreate navigation if it doesn't exist
            if not hasattr(self, 'prev_btn') or not self.prev_btn.winfo_exists():
                self.create_navigation()
            
            # Update header
            total_steps = len(self.steps)
            if step_index < total_steps:
                step_name, step_class = self.steps[step_index]
                self.step_label.configure(text=f"B∆∞·ªõc {step_index + 1}/{total_steps}: {step_name}")
                self.progress_bar.set((step_index + 1) / total_steps)
                
                step_frame = step_class(
                    self,
                    record_result_callback=self.record_result,
                    enable_next_callback=self.enable_next,
                    go_to_next_step_callback=self.go_to_next_step,
                    icon_manager=self.icon_manager,
                    all_results=self.all_results
                )
                step_frame.grid(row=1, column=0, sticky="nsew")
            else:
                self.step_label.configure(text=f"T·ªïng k·∫øt ({total_steps} b∆∞·ªõc ho√†n th√†nh)")
                self.progress_bar.set(1.0)
                
                summary_step = SummaryStep(
                    self,
                    record_result_callback=self.record_result,
                    enable_next_callback=self.enable_next,
                    go_to_next_step_callback=self.go_to_next_step,
                    icon_manager=self.icon_manager,
                    all_results=self.all_results
                )
                summary_step.display_summary(self.all_results)
                summary_step.grid(row=1, column=0, sticky="nsew")
            
            # Ensure navigation is always visible and on top
            self.update_navigation_state()
            if hasattr(self, 'prev_btn'):
                self.prev_btn.lift()
                self.skip_btn.lift()
                self.next_btn.lift()
        
        def record_result(self, step_name, result_data):
            self.all_results[step_name] = result_data
            print(f"[DEBUG] Recorded result for {step_name}: {result_data}")
        
        def enable_next(self):
            pass
        
        def go_to_next_step(self):
            self.current_step += 1
            self.show_step(self.current_step)
            self.update_navigation_state()
        
        def update_navigation_state(self):
            """C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t navigation"""
            # Previous button
            if self.current_step <= 0:
                self.prev_btn.configure(state="disabled")
            else:
                self.prev_btn.configure(state="normal")
            
            # Next button - lu√¥n enable
            self.next_btn.configure(state="normal")
            
            # Skip button - disable ·ªü b∆∞·ªõc cu·ªëi
            if self.current_step >= len(self.steps):
                self.skip_btn.configure(state="disabled")
                self.next_btn.configure(text="Ho√†n th√†nh")
            else:
                self.skip_btn.configure(state="normal")
                self.next_btn.configure(text="Ti·∫øp theo ‚Üí")

# ModeSelectionFrame v√† App ƒë∆°n gi·∫£n
class ModeSelectionFrame(ctk.CTkFrame):
        def __init__(self, master, mode_callback, icon_manager):
            super().__init__(master, fg_color="transparent")
            self.mode_callback = mode_callback
            self.grid_columnconfigure(0, weight=1)
            self.grid_rowconfigure(0, weight=1)
            
            # Create mode selection UI
            main_frame = ctk.CTkFrame(self, fg_color=theme_manager.get_color('FRAME'))
            main_frame.grid(row=0, column=0, sticky="nsew", padx=50, pady=50)
            main_frame.grid_columnconfigure(0, weight=1)
            
            ctk.CTkLabel(main_frame, text="LaptopTester Pro", font=theme_manager.TITLE_FONT, text_color=theme_manager.get_color('ACCENT')).pack(pady=30)
            ctk.CTkLabel(main_frame, text="Ch·ªçn ch·∫ø ƒë·ªô ki·ªÉm tra", font=theme_manager.HEADING_FONT).pack(pady=20)
            
            ctk.CTkButton(main_frame, text="üéØ Ch·∫ø ƒë·ªô C∆° b·∫£n", command=lambda: self.mode_callback("basic"), 
                         fg_color=theme_manager.get_color('SUCCESS'), height=60, font=theme_manager.SUBHEADING_FONT).pack(pady=20, padx=50, fill="x")
            
            ctk.CTkButton(main_frame, text="üî• Ch·∫ø ƒë·ªô Chuy√™n gia", command=lambda: self.mode_callback("expert"), 
                         fg_color=theme_manager.get_color('ERROR'), height=60, font=theme_manager.SUBHEADING_FONT).pack(pady=20, padx=50, fill="x")

class App(ctk.CTk):
        def __init__(self):
            super().__init__(fg_color=theme_manager.get_color('BACKGROUND'))
            self.title(language_manager.get_text("app_title"))
            self.state('zoomed')
            self.minsize(1400, 900)
            
            # Set initial appearance mode
            ctk.set_appearance_mode(theme_manager.current_theme)
            
            self.icon_manager = IconManager()
            self.grid_columnconfigure(0, weight=1)
            self.grid_rowconfigure(0, weight=1)
            self.grid_rowconfigure(1, weight=20)
            self.current_main_frame = None
            self.all_results = {}

            # --- HEADER BAR ---
            self.header = ctk.CTkFrame(self, fg_color=theme_manager.get_color('FRAME'), height=70, corner_radius=0)
            self.header.grid(row=0, column=0, sticky="ew")
            self.header.grid_columnconfigure(0, minsize=80)
            self.header.grid_columnconfigure(1, weight=1)
            self.header.grid_columnconfigure(2, minsize=80)
            logo = self.icon_manager.LOGO_SMALL or None
            self.logo_label = ctk.CTkLabel(self.header, image=logo, text="", width=60)
            self.logo_label.grid(row=0, column=0, padx=(20,0), pady=10)
            self.title_label = ctk.CTkLabel(self.header, text=language_manager.get_text("app_title"), font=theme_manager.HEADING_FONT, text_color=theme_manager.get_color('ACCENT'))
            self.title_label.grid(row=0, column=1, sticky="w", padx=10)
            self.exit_btn = ctk.CTkButton(self.header, text=language_manager.get_text("exit"), command=self.quit_app, font=theme_manager.BODY_FONT, fg_color=theme_manager.get_color('ERROR'), width=80)
            self.exit_btn.grid(row=0, column=2, padx=(0,20), pady=10)

            # Main content
            self.main_content = ctk.CTkFrame(self, fg_color=theme_manager.get_color('BACKGROUND'))
            self.main_content.grid(row=1, column=0, sticky="nsew")
            self.main_content.grid_columnconfigure(0, weight=1)
            self.main_content.grid_rowconfigure(0, weight=1)

            self.show_mode_selection()

        def clear_window(self):
            if self.current_main_frame:
                if hasattr(self.current_main_frame, 'cleanup'):
                    self.current_main_frame.cleanup()
                self.current_main_frame.destroy()
            self.current_main_frame = None


        
        def refresh_ui(self):
            """Refresh UI after theme/language change"""
            # Update app colors
            self.configure(fg_color=theme_manager.get_color('BACKGROUND'))
            self.title(language_manager.get_text("app_title"))
            
            # Update header
            self.header.configure(fg_color=theme_manager.get_color('FRAME'))
            self.title_label.configure(
                text=language_manager.get_text("app_title"),
                text_color=theme_manager.get_color('ACCENT')
            )
            self.exit_btn.configure(
                text=language_manager.get_text("exit"),
                fg_color=theme_manager.get_color('ERROR')
            )
            
            # Update main content
            self.main_content.configure(fg_color=theme_manager.get_color('BACKGROUND'))
            
            # Refresh current frame
            if self.current_main_frame:
                self.show_mode_selection()  # Recreate with new theme/language

        def show_mode_selection(self):
            self.clear_window()
            self.current_main_frame = ModeSelectionFrame(self.main_content, self.start_wizard, self.icon_manager)
            self.current_main_frame.grid(row=0, column=0, sticky="nsew", padx=30, pady=30)

        def start_wizard(self, mode):
            self.clear_window()
            self.current_main_frame = WizardFrame(self.main_content, mode, self.icon_manager, app=self)
            self.current_main_frame.grid(row=0, column=0, sticky="nsew")
            self.main_content.grid_rowconfigure(0, weight=1)
            self.main_content.grid_columnconfigure(0, weight=1)

    def quit_app(self):
        self.clear_window()
        self.destroy()

if __name__ == "__main__":
    multiprocessing.freeze_support()
    if getattr(sys, 'frozen', False):
        try:
            os.chdir(sys._MEIPASS)
        except Exception:
            pass
    
    # Set initial CustomTkinter appearance
    ctk.set_appearance_mode("light")
    ctk.set_default_color_theme("blue")
    
    try:
        app = App()
        app.mainloop()
    except Exception as e:
        print(f"Error starting application: {e}")
        import traceback
        traceback.print_exc()