#!/usr/bin/env python3
"""
Enhanced Steps for LaptopTester Pro
Includes configuration assessment and BIOS guidance
"""

import customtkinter as ctk
import psutil
import platform
import subprocess
import threading
import webbrowser
from tkinter import messagebox

# Import from main file
from main import BaseStepFrame, Theme, get_text, CURRENT_LANG

class PhysicalInspectionGuideStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        title = "üîç H∆∞·ªõng D·∫´n Ki·ªÉm Tra Ngo·∫°i Quan" if CURRENT_LANG == "vi" else "üîç Physical Inspection Guide"
        why_text = "Ki·ªÉm tra ngo·∫°i quan l√† b∆∞·ªõc ƒë·∫ßu ti√™n v√† quan tr·ªçng nh·∫•t. Nhi·ªÅu v·∫•n ƒë·ªÅ ph·∫ßn c·ª©ng c√≥ th·ªÉ ph√°t hi·ªán qua m·∫Øt th∆∞·ªùng tr∆∞·ªõc khi ch·∫°y ph·∫ßn m·ªÅm." if CURRENT_LANG == "vi" else "Physical inspection is the first and most important step. Many hardware issues can be detected visually before running software."
        how_text = "L√†m theo checklist d∆∞·ªõi ƒë√¢y ƒë·ªÉ ki·ªÉm tra t·ª´ng b·ªô ph·∫≠n m·ªôt c√°ch c√≥ h·ªá th·ªëng." if CURRENT_LANG == "vi" else "Follow the checklist below to systematically inspect each component."
        super().__init__(master, title, why_text, how_text, **kwargs)
        self.create_inspection_guide()
        
    def create_inspection_guide(self):
        # Main inspection checklist
        checklist_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        checklist_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        title_text = "üìã CHECKLIST KI·ªÇM TRA NGO·∫†I QUAN" if CURRENT_LANG == "vi" else "üìã PHYSICAL INSPECTION CHECKLIST"
        ctk.CTkLabel(checklist_frame, text=title_text, font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Create inspection categories
        categories = self.get_inspection_categories()
        
        for category_name, items in categories.items():
            category_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND, corner_radius=6)
            category_frame.pack(fill="x", padx=15, pady=8)
            
            ctk.CTkLabel(category_frame, text=category_name, font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=15, pady=(10, 5))
            
            for item in items:
                item_frame = ctk.CTkFrame(category_frame, fg_color="transparent")
                item_frame.pack(fill="x", padx=15, pady=2)
                
                checkbox = ctk.CTkCheckBox(item_frame, text=item, font=Theme.BODY_FONT)
                checkbox.pack(anchor="w", padx=10, pady=2)
        
        # Critical warnings
        warning_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.ERROR, corner_radius=8)
        warning_frame.pack(fill="x", padx=15, pady=15)
        
        warning_title = "‚ö†Ô∏è C·∫¢NH B√ÅO QUAN TR·ªåNG" if CURRENT_LANG == "vi" else "‚ö†Ô∏è CRITICAL WARNINGS"
        ctk.CTkLabel(warning_frame, text=warning_title, font=Theme.SUBHEADING_FONT, text_color="white").pack(pady=(10, 5))
        
        warnings = self.get_critical_warnings()
        for warning in warnings:
            ctk.CTkLabel(warning_frame, text=f"‚Ä¢ {warning}", font=Theme.BODY_FONT, text_color="white").pack(anchor="w", padx=15, pady=2)
        
        ctk.CTkLabel(warning_frame, text="", font=Theme.SMALL_FONT).pack(pady=5)
        
        self.show_result_choices()
    
    def get_inspection_categories(self):
        if CURRENT_LANG == "vi":
            return {
                "üñ•Ô∏è M√ÄN H√åNH": [
                    "Ki·ªÉm tra v·∫øt n·ª©t, v·∫øt x∆∞·ªõc tr√™n m√†n h√¨nh",
                    "Th·ª≠ m·ªü/ƒë√≥ng m√†n h√¨nh - b·∫£n l·ªÅ c√≥ ch·∫Øc ch·∫Øn kh√¥ng?",
                    "M√†n h√¨nh c√≥ b·ªã l·ªèng, rung l·∫Øc khi di chuy·ªÉn kh√¥ng?",
                    "Vi·ªÅn m√†n h√¨nh c√≥ b·ªã cong v√™nh, tr√≥c s∆°n kh√¥ng?",
                    "Webcam v√† micro c√≥ b·ªã che khu·∫•t kh√¥ng?"
                ],
                "‚å®Ô∏è B√ÄN PH√çM & TOUCHPAD": [
                    "C√°c ph√≠m c√≥ b·ªã l√µm, m·∫•t ch·ªØ, d√≠nh kh√¥ng?",
                    "Th·ª≠ nh·∫•n t·ª´ng ph√≠m - c√≥ ph√≠m n√†o c·ª©ng, kh√¥ng nh·∫•n ƒë∆∞·ª£c?",
                    "Touchpad c√≥ b·ªã tr·∫ßy x∆∞·ªõc, kh√¥ng nh·∫°y kh√¥ng?",
                    "N√∫t chu·ªôt tr√°i/ph·∫£i c√≥ ho·∫°t ƒë·ªông kh√¥ng?",
                    "ƒê√®n LED b√†n ph√≠m c√≥ s√°ng kh√¥ng? (n·∫øu c√≥)"
                ],
                "üîå C·ªîNG K·∫æT N·ªêI": [
                    "Ki·ªÉm tra t·∫•t c·∫£ c·ªïng USB - c√≥ b·ªã l·ªèng, g√£y kh√¥ng?",
                    "C·ªïng s·∫°c c√≥ b·ªã h·ªèng, ti·∫øp x√∫c k√©m kh√¥ng?",
                    "C·ªïng HDMI, audio jack c√≥ ho·∫°t ƒë·ªông kh√¥ng?",
                    "C·ªïng m·∫°ng RJ45 (n·∫øu c√≥) c√≥ b·ªã h·ªèng kh√¥ng?",
                    "C√°c c·ªïng c√≥ d·∫•u hi·ªáu ch√°y, oxy h√≥a kh√¥ng?"
                ],
                "üè† V·ªé M√ÅY & T·ªîNG TH·ªÇ": [
                    "V·ªè m√°y c√≥ b·ªã n·ª©t, v·ª°, cong v√™nh kh√¥ng?",
                    "C√°c g√≥c m√°y c√≥ b·ªã va ƒë·∫≠p m·∫°nh kh√¥ng?",
                    "N·∫Øp m√°y ƒë√≥ng/m·ªü c√≥ kh√≠t kh√¥ng?",
                    "C√≥ m√πi ch√°y kh√©t b·∫•t th∆∞·ªùng kh√¥ng?",
                    "M√°y c√≥ d·∫•u hi·ªáu t·ª´ng b·ªã v√†o n∆∞·ªõc kh√¥ng?"
                ],
                "üîã PIN & NGU·ªíN": [
                    "Pin c√≥ b·ªã ph·ªìng, cong v√™nh kh√¥ng?",
                    "Adapter ngu·ªìn c√≥ d√¢y b·ªã ƒë·ª©t, ch√°y kh√¥ng?",
                    "ƒê√®n b√°o s·∫°c c√≥ ho·∫°t ƒë·ªông kh√¥ng?",
                    "Pin c√≥ th√°o ra ƒë∆∞·ª£c kh√¥ng? (n·∫øu c√≥ th·ªÉ th√°o)",
                    "Th√¥ng tin tr√™n nh√£n pin c√≥ r√µ r√†ng kh√¥ng?"
                ]
            }
        else:
            return {
                "üñ•Ô∏è DISPLAY": [
                    "Check for cracks, scratches on screen",
                    "Test opening/closing - are hinges secure?",
                    "Does screen wobble or shake when moved?",
                    "Is screen bezel warped or paint peeling?",
                    "Are webcam and microphone unobstructed?"
                ],
                "‚å®Ô∏è KEYBOARD & TOUCHPAD": [
                    "Are keys worn, missing letters, or sticky?",
                    "Test each key - any stiff or non-responsive keys?",
                    "Is touchpad scratched or unresponsive?",
                    "Do left/right mouse buttons work?",
                    "Does keyboard backlight work? (if available)"
                ],
                "üîå PORTS & CONNECTIONS": [
                    "Check all USB ports - any loose or broken?",
                    "Is charging port damaged or making poor contact?",
                    "Do HDMI, audio jack work properly?",
                    "Is RJ45 network port functional? (if available)",
                    "Any signs of burning or oxidation on ports?"
                ],
                "üè† CASE & OVERALL": [
                    "Is case cracked, broken, or warped?",
                    "Are corners heavily impacted?",
                    "Does lid close/open properly?",
                    "Any unusual burning smell?",
                    "Any signs of water damage?"
                ],
                "üîã BATTERY & POWER": [
                    "Is battery swollen or warped?",
                    "Is power adapter cable cut or burned?",
                    "Does charging indicator light work?",
                    "Can battery be removed? (if removable)",
                    "Is battery label information clear?"
                ]
            }
    
    def get_critical_warnings(self):
        if CURRENT_LANG == "vi":
            return [
                "Pin ph·ªìng = NGUY HI·ªÇM! C√≥ th·ªÉ ph√°t n·ªï, kh√¥ng n√™n mua",
                "M√πi ch√°y kh√©t = C√≥ th·ªÉ ch√°y m·∫°ch, r·∫•t nguy hi·ªÉm",
                "V·∫øt n∆∞·ªõc/·∫©m ∆∞·ªõt = Bo m·∫°ch c√≥ th·ªÉ b·ªã ƒÉn m√≤n kh√¥ng ph·ª•c h·ªìi",
                "M√†n h√¨nh n·ª©t = Chi ph√≠ s·ª≠a ch·ªØa r·∫•t cao (3-5 tri·ªáu)",
                "B·∫£n l·ªÅ l·ªèng = S·∫Ω ng√†y c√†ng h·ªèng n·∫∑ng h∆°n theo th·ªùi gian"
            ]
        else:
            return [
                "Swollen battery = DANGEROUS! May explode, avoid purchase",
                "Burning smell = Possible circuit damage, very dangerous",
                "Water damage = Motherboard may be irreversibly corroded",
                "Cracked screen = Very expensive repair cost ($200-400)",
                "Loose hinges = Will progressively worsen over time"
            ]
    
    def show_result_choices(self):
        result_frame = ctk.CTkFrame(self.action_frame)
        result_frame.pack(fill="x", padx=20, pady=20)
        
        question_text = "Sau khi ki·ªÉm tra ngo·∫°i quan, laptop c√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng n√†o kh√¥ng?" if CURRENT_LANG == "vi" else "After physical inspection, does the laptop have any serious issues?"
        ctk.CTkLabel(result_frame, text=question_text, font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(result_frame, fg_color="transparent")
        button_bar.pack(pady=15)
        
        good_text = "‚úì Ngo·∫°i quan t·ªët" if CURRENT_LANG == "vi" else "‚úì Good condition"
        good_result = "Ngo·∫°i quan t·ªët" if CURRENT_LANG == "vi" else "Good physical condition"
        ctk.CTkButton(button_bar, text=good_text, 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": good_result, "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), 
                     fg_color=Theme.SUCCESS, height=32, font=Theme.BUTTON_FONT).pack(side="left", padx=10)
        
        issues_text = "‚ö†Ô∏è C√≥ v·∫•n ƒë·ªÅ" if CURRENT_LANG == "vi" else "‚ö†Ô∏è Has issues"
        issues_result = "C√≥ v·∫•n ƒë·ªÅ ngo·∫°i quan" if CURRENT_LANG == "vi" else "Physical issues detected"
        ctk.CTkButton(button_bar, text=issues_text, 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": issues_result, "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), 
                     fg_color=Theme.ERROR, height=32, font=Theme.BUTTON_FONT).pack(side="left", padx=10)


class BIOSAccessGuideStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        title = "üîí Ki·ªÉm Tra Truy C·∫≠p BIOS" if CURRENT_LANG == "vi" else "üîí BIOS Access Check"
        why_text = "BIOS b·ªã kh√≥a l√† v·∫•n ƒë·ªÅ nghi√™m tr·ªçng nh·∫•t. Laptop b·ªã kh√≥a BIOS kh√¥ng th·ªÉ c√†i l·∫°i Windows, n√¢ng c·∫•p ph·∫ßn c·ª©ng, ho·∫∑c s·ª≠a ch·ªØa. ƒê√¢y l√† '√°n t·ª≠' c·ªßa laptop." if CURRENT_LANG == "vi" else "Locked BIOS is the most serious issue. A BIOS-locked laptop cannot reinstall Windows, upgrade hardware, or be repaired. This is a 'death sentence' for laptops."
        how_text = "Th·ª±c hi·ªán c√°c b∆∞·ªõc ki·ªÉm tra d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o BIOS kh√¥ng b·ªã kh√≥a." if CURRENT_LANG == "vi" else "Follow the steps below to ensure BIOS is not locked."
        super().__init__(master, title, why_text, how_text, **kwargs)
        self.create_bios_guide()
        
    def create_bios_guide(self):
        # BIOS access guide
        guide_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        guide_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        title_text = "üîí H∆Ø·ªöNG D·∫™N KI·ªÇM TRA BIOS" if CURRENT_LANG == "vi" else "üîí BIOS CHECK GUIDE"
        ctk.CTkLabel(guide_frame, text=title_text, font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Step-by-step instructions
        steps_frame = ctk.CTkFrame(guide_frame, fg_color=Theme.BACKGROUND, corner_radius=6)
        steps_frame.pack(fill="x", padx=15, pady=10)
        
        steps_title = "üìã C√ÅC B∆Ø·ªöC TH·ª∞C HI·ªÜN" if CURRENT_LANG == "vi" else "üìã STEP-BY-STEP INSTRUCTIONS"
        ctk.CTkLabel(steps_frame, text=steps_title, font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=(10, 5))
        
        steps = self.get_bios_steps()
        for i, step in enumerate(steps, 1):
            step_frame = ctk.CTkFrame(steps_frame, fg_color=Theme.FRAME, corner_radius=4)
            step_frame.pack(fill="x", padx=10, pady=5)
            
            ctk.CTkLabel(step_frame, text=f"{i}. {step}", font=Theme.BODY_FONT, wraplength=700, justify="left").pack(anchor="w", padx=15, pady=10)
        
        # Common BIOS keys
        keys_frame = ctk.CTkFrame(guide_frame, fg_color=Theme.INFO, corner_radius=8)
        keys_frame.pack(fill="x", padx=15, pady=10)
        
        keys_title = "‚å®Ô∏è PH√çM V√ÄO BIOS TH√îNG D·ª§NG" if CURRENT_LANG == "vi" else "‚å®Ô∏è COMMON BIOS KEYS"
        ctk.CTkLabel(keys_frame, text=keys_title, font=Theme.SUBHEADING_FONT, text_color="white").pack(pady=(10, 5))
        
        bios_keys = self.get_bios_keys()
        for brand, key in bios_keys.items():
            ctk.CTkLabel(keys_frame, text=f"‚Ä¢ {brand}: {key}", font=Theme.BODY_FONT, text_color="white").pack(anchor="w", padx=15, pady=2)
        
        ctk.CTkLabel(keys_frame, text="", font=Theme.SMALL_FONT).pack(pady=5)
        
        # Warning about locked BIOS
        warning_frame = ctk.CTkFrame(guide_frame, fg_color=Theme.ERROR, corner_radius=8)
        warning_frame.pack(fill="x", padx=15, pady=15)
        
        warning_title = "üö® C·∫¢NH B√ÅO BIOS B·ªä KH√ìA" if CURRENT_LANG == "vi" else "üö® LOCKED BIOS WARNING"
        ctk.CTkLabel(warning_frame, text=warning_title, font=Theme.SUBHEADING_FONT, text_color="white").pack(pady=(10, 5))
        
        warnings = self.get_bios_warnings()
        for warning in warnings:
            ctk.CTkLabel(warning_frame, text=f"‚Ä¢ {warning}", font=Theme.BODY_FONT, text_color="white").pack(anchor="w", padx=15, pady=2)
        
        ctk.CTkLabel(warning_frame, text="", font=Theme.SMALL_FONT).pack(pady=5)
        
        self.show_result_choices()
    
    def get_bios_steps(self):
        if CURRENT_LANG == "vi":
            return [
                "Kh·ªüi ƒë·ªông l·∫°i m√°y t√≠nh (ho·∫∑c b·∫≠t m√°y n·∫øu ƒëang t·∫Øt)",
                "Ngay khi th·∫•y logo h√£ng (Dell, HP, Lenovo...), nh·∫•n li√™n t·ª•c ph√≠m BIOS",
                "N·∫øu v√†o ƒë∆∞·ª£c BIOS: Ki·ªÉm tra c√≥ y√™u c·∫ßu m·∫≠t kh·∫©u kh√¥ng?",
                "Th·ª≠ thay ƒë·ªïi m·ªôt c√†i ƒë·∫∑t ƒë∆°n gi·∫£n (nh∆∞ th·ªùi gian) ƒë·ªÉ test quy·ªÅn ghi",
                "Ki·ªÉm tra m·ª•c Security/Password - c√≥ b·ªã kh√≥a kh√¥ng?",
                "Th·ª≠ tho√°t BIOS v√† v√†o l·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã kh√≥a t·∫°m th·ªùi"
            ]
        else:
            return [
                "Restart the computer (or turn on if it's off)",
                "As soon as you see the brand logo (Dell, HP, Lenovo...), repeatedly press the BIOS key",
                "If BIOS opens: Check if password is required?",
                "Try changing a simple setting (like time) to test write permissions",
                "Check Security/Password section - is it locked?",
                "Try exiting BIOS and re-entering to ensure it's not temporarily locked"
            ]
    
    def get_bios_keys(self):
        return {
            "Dell": "F2 ho·∫∑c F12",
            "HP": "F10 ho·∫∑c ESC",
            "Lenovo": "F1, F2 ho·∫∑c Enter",
            "ASUS": "F2 ho·∫∑c Delete",
            "Acer": "F2 ho·∫∑c Delete",
            "MSI": "Delete ho·∫∑c F2",
            "Toshiba": "F2 ho·∫∑c F12",
            "Samsung": "F2 ho·∫∑c F10"
        }
    
    def get_bios_warnings(self):
        if CURRENT_LANG == "vi":
            return [
                "Kh√¥ng v√†o ƒë∆∞·ª£c BIOS = C√≥ th·ªÉ b·ªã kh√≥a ho√†n to√†n",
                "Y√™u c·∫ßu m·∫≠t kh·∫©u BIOS = Kh√¥ng th·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t",
                "Kh√¥ng th·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t = BIOS b·ªã kh√≥a ghi",
                "Laptop c√¥ng ty/tr∆∞·ªùng h·ªçc th∆∞·ªùng b·ªã kh√≥a BIOS",
                "BIOS b·ªã kh√≥a = KH√îNG N√äN MUA v·ªõi b·∫•t k·ª≥ gi√° n√†o!"
            ]
        else:
            return [
                "Cannot access BIOS = May be completely locked",
                "BIOS password required = Cannot change settings",
                "Cannot modify settings = BIOS write-locked",
                "Corporate/school laptops often have locked BIOS",
                "Locked BIOS = DO NOT BUY at any price!"
            ]
    
    def show_result_choices(self):
        result_frame = ctk.CTkFrame(self.action_frame)
        result_frame.pack(fill="x", padx=20, pady=20)
        
        question_text = "Sau khi ki·ªÉm tra, BIOS c√≥ b·ªã kh√≥a kh√¥ng?" if CURRENT_LANG == "vi" else "After checking, is the BIOS locked?"
        ctk.CTkLabel(result_frame, text=question_text, font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(result_frame, fg_color="transparent")
        button_bar.pack(pady=15)
        
        unlocked_text = "‚úì BIOS m·ªü ƒë∆∞·ª£c" if CURRENT_LANG == "vi" else "‚úì BIOS accessible"
        unlocked_result = "BIOS kh√¥ng b·ªã kh√≥a" if CURRENT_LANG == "vi" else "BIOS not locked"
        ctk.CTkButton(button_bar, text=unlocked_text, 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": unlocked_result, "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), 
                     fg_color=Theme.SUCCESS, height=32, font=Theme.BUTTON_FONT).pack(side="left", padx=10)
        
        locked_text = "üîí BIOS b·ªã kh√≥a" if CURRENT_LANG == "vi" else "üîí BIOS locked"
        locked_result = "BIOS b·ªã kh√≥a - NGUY HI·ªÇM!" if CURRENT_LANG == "vi" else "BIOS locked - DANGEROUS!"
        ctk.CTkButton(button_bar, text=locked_text, 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": locked_result, "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), 
                     fg_color=Theme.ERROR, height=32, font=Theme.BUTTON_FONT).pack(side="left", padx=10)
        
        skip_text = "‚è≠Ô∏è B·ªè qua" if CURRENT_LANG == "vi" else "‚è≠Ô∏è Skip"
        skip_result = "Ch∆∞a ki·ªÉm tra BIOS" if CURRENT_LANG == "vi" else "BIOS check skipped"
        ctk.CTkButton(button_bar, text=skip_text, 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": skip_result, "Tr·∫°ng th√°i": "skip"}, auto_advance=True), 
                     fg_color=Theme.SKIP, height=32, font=Theme.BUTTON_FONT).pack(side="left", padx=10)


class ConfigurationAssessmentStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        title = "üéØ ƒê√°nh Gi√° Kh·∫£ NƒÉng C·∫•u H√¨nh" if CURRENT_LANG == "vi" else "üéØ Configuration Capability Assessment"
        why_text = "D·ª±a tr√™n c·∫•u h√¨nh ph·∫ßn c·ª©ng ƒë√£ ki·ªÉm tra, b∆∞·ªõc n√†y s·∫Ω ƒë√°nh gi√° laptop c√≥ th·ªÉ ƒë·∫£m ƒë∆∞∆°ng nh·ªØng t√°c v·ª• g√¨ v√† ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng n√†o." if CURRENT_LANG == "vi" else "Based on the hardware configuration tested, this step evaluates what tasks the laptop can handle and which user groups it's suitable for."
        how_text = "H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ph√¢n t√≠ch c·∫•u h√¨nh v√† ƒë∆∞a ra khuy·∫øn ngh·ªã s·ª≠ d·ª•ng ph√π h·ª£p." if CURRENT_LANG == "vi" else "The system will automatically analyze the configuration and provide appropriate usage recommendations."
        super().__init__(master, title, why_text, how_text, **kwargs)
        self.analyze_configuration()
        
    def analyze_configuration(self):
        # Get hardware info from previous steps - try all possible keys
        hw_results = {}
        system_results = {}
        
        # Debug: Print all available keys
        print(f"[DEBUG] All available result keys: {list(self.all_results.keys())}")
        
        # Find hardware fingerprint step (Step 3) by checking all keys
        for key, result in self.all_results.items():
            print(f"[DEBUG] Checking key: '{key}' -> {type(result)}")
            if any(pattern in key.lower() for pattern in ['hardware', 'fingerprint', 'ƒë·ªãnh danh', 'ph·∫ßn c·ª©ng']):
                hw_results = result
                print(f"[DEBUG] Found hardware match: {key}")
                break
        
        # If not found, try exact key matching for Step 3 (Hardware Fingerprint)
        if not hw_results:
            possible_hw_keys = [
                "üè∑Ô∏è ƒê·ªãnh danh ph·∫ßn c·ª©ng",
                "üè∑Ô∏è Hardware Fingerprint", 
                "Hardware Fingerprint",
                "ƒê·ªãnh danh ph·∫ßn c·ª©ng",
                get_text("hardware_fingerprint")  # Use the same key as in step definition
            ]
            for key in possible_hw_keys:
                if key in self.all_results:
                    hw_results = self.all_results[key]
                    print(f"[DEBUG] Found hardware by exact key: {key}")
                    break
        
        # Find system info step (Step 5)
        for key, result in self.all_results.items():
            if any(pattern in key.lower() for pattern in ['system', 'info', 'th√¥ng tin', 'h·ªá th·ªëng']):
                system_results = result
                break
        
        # If not found, try exact key matching for system info (Step 5)
        if not system_results:
            possible_sys_keys = [
                "‚öôÔ∏è Th√¥ng tin h·ªá th·ªëng",
                "‚öôÔ∏è System Information",
                "System Information", 
                "Th√¥ng tin h·ªá th·ªëng",
                get_text("system_info")  # Use the same key as in step definition
            ]
            for key in possible_sys_keys:
                if key in self.all_results:
                    system_results = self.all_results[key]
                    print(f"[DEBUG] Found system by exact key: {key}")
                    break
        
        print(f"[DEBUG] Found hardware data: {bool(hw_results)}")
        print(f"[DEBUG] Found system data: {bool(system_results)}")
        if hw_results:
            print(f"[DEBUG] Hardware details length: {len(hw_results.get('Chi ti·∫øt', '') or hw_results.get('Details', ''))}")
        
        # Extract configuration details with fallback
        config_info = self.extract_config_info(hw_results, system_results)
        
        # If extraction failed, try direct system detection
        if config_info['cpu'] == 'Unknown' or config_info['ram'] == 0:
            config_info = self.fallback_system_detection(config_info)
        
        print(f"[DEBUG] Final config: {config_info}")
        
        # Create assessment display
        assessment_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        assessment_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        title_text = "üéØ PH√ÇN T√çCH C·∫§U H√åNH" if CURRENT_LANG == "vi" else "üéØ CONFIGURATION ANALYSIS"
        ctk.CTkLabel(assessment_frame, text=title_text, font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Display current configuration
        self.display_current_config(assessment_frame, config_info)
        
        # Performance assessment
        performance_score = self.calculate_performance_score(config_info)
        self.display_performance_assessment(assessment_frame, performance_score, config_info)
        
        # Usage recommendations
        self.display_usage_recommendations(assessment_frame, performance_score, config_info)
        
        # Upgrade suggestions
        self.display_upgrade_suggestions(assessment_frame, config_info)
        
        self.show_result_choices(performance_score)
    

    
    def extract_config_info(self, hw_results, system_results):
        config = {
            'cpu': 'Unknown',
            'ram': 0,
            'gpu': 'Unknown',
            'storage': 'Unknown',
            'cpu_score': 0,
            'ram_score': 0,
            'gpu_score': 0,
            'storage_score': 0
        }
        
        # Method 1: Extract from hardware fingerprint details
        hw_details = hw_results.get("Chi ti·∫øt", "") or hw_results.get("Details", "")
        print(f"[DEBUG] Hardware details found: {len(hw_details)} chars")
        
        # Method 1a: Try to get from cached BIOS info first (from Step 3 - Hardware Fingerprint)
        if '_bios_cpu_info' in self.all_results:
            bios_cpu = self.all_results['_bios_cpu_info']
            if bios_cpu and bios_cpu != 'N/A':
                config['cpu'] = bios_cpu
                print(f"[DEBUG] Found CPU from BIOS cache (Step 3): {config['cpu']}")
        
        # Method 1b: Extract from Step 3 (Hardware Fingerprint) details
        if hw_details:
            lines = hw_details.split('\n')
            for line in lines:
                line = line.strip()
                print(f"[DEBUG] Processing line: {line}")
                
                # CPU detection - exact patterns
                if line.lower().startswith('cpu:') or line.lower().startswith('processor:') or 'model laptop:' in line.lower():
                    parts = line.split(':', 1)
                    if len(parts) > 1 and parts[1].strip() and parts[1].strip() != 'N/A':
                        if config['cpu'] == 'Unknown':
                            config['cpu'] = parts[1].strip()
                            print(f"[DEBUG] Found CPU: {config['cpu']}")
                
                # RAM detection - exact patterns
                elif (line.lower().startswith('ram:') or line.lower().startswith('memory:') or line.lower().startswith('b·ªô nh·ªõ:')) and 'gb' in line.lower():
                    import re
                    ram_match = re.search(r'(\d+(?:\.\d+)?)\s*GB', line, re.IGNORECASE)
                    if ram_match:
                        config['ram'] = float(ram_match.group(1))
                        print(f"[DEBUG] Found RAM: {config['ram']}GB")
                
                # GPU detection - exact patterns
                elif line.lower().startswith('gpu:') or line.lower().startswith('graphics:') or line.lower().startswith('video controller:'):
                    parts = line.split(':', 1)
                    if len(parts) > 1 and parts[1].strip() and parts[1].strip() != 'N/A':
                        config['gpu'] = parts[1].strip()
                        print(f"[DEBUG] Found GPU: {config['gpu']}")
                
                # Storage detection - exact patterns
                elif line.lower().startswith('model ·ªï c·ª©ng:') or line.lower().startswith('hard drive model:') or line.lower().startswith('disk drive:'):
                    parts = line.split(':', 1)
                    if len(parts) > 1 and parts[1].strip() and parts[1].strip() != 'N/A':
                        config['storage'] = parts[1].strip()
                        print(f"[DEBUG] Found Storage: {config['storage']}")
        
        # Method 2: Try system info results from Step 5 (System Information)
        if system_results and (config['cpu'] == 'Unknown' or config['ram'] == 0):
            sys_details = system_results.get("Chi ti·∫øt", "") or system_results.get("Details", "")
            if sys_details:
                lines = sys_details.split('\n')
                for line in lines:
                    line = line.strip()
                    if config['cpu'] == 'Unknown' and 'cpu' in line.lower():
                        parts = line.split(':', 1)
                        if len(parts) > 1 and parts[1].strip() != 'N/A':
                            config['cpu'] = parts[1].strip()
                            print(f"[DEBUG] Found CPU from Step 5 (System Info): {config['cpu']}")
                    
                    if config['ram'] == 0 and 'ram' in line.lower() and 'gb' in line.lower():
                        import re
                        ram_match = re.search(r'(\d+(?:\.\d+)?)\s*GB', line, re.IGNORECASE)
                        if ram_match:
                            config['ram'] = float(ram_match.group(1))
                            print(f"[DEBUG] Found RAM from Step 5 (System Info): {config['ram']}GB")
        
        # Method 3: Direct system detection as fallback
        if config['cpu'] == 'Unknown' or config['ram'] == 0:
            print("[DEBUG] Using fallback system detection")
            try:
                if config['ram'] == 0:
                    config['ram'] = round(psutil.virtual_memory().total / (1024**3), 1)
                    print(f"[DEBUG] Fallback RAM: {config['ram']}GB")
                
                if config['cpu'] == 'Unknown':
                    cpu_info = platform.processor()
                    if cpu_info and cpu_info.strip():
                        config['cpu'] = cpu_info
                        print(f"[DEBUG] Fallback CPU: {config['cpu']}")
                    else:
                        config['cpu'] = f"{psutil.cpu_count()} cores CPU"
            except Exception as e:
                print(f"[DEBUG] Fallback error: {e}")
        
        # Calculate performance scores
        config['cpu_score'] = self.score_cpu(config['cpu'])
        config['ram_score'] = self.score_ram(config['ram'])
        config['gpu_score'] = self.score_gpu(config['gpu'])
        
        return config
    
    def fallback_system_detection(self, config):
        """Fallback system detection when hardware fingerprint fails"""
        try:
            import psutil
            import platform
            
            # Get RAM if not found
            if config['ram'] == 0:
                config['ram'] = round(psutil.virtual_memory().total / (1024**3), 1)
                config['ram_score'] = self.score_ram(config['ram'])
            
            # Get CPU if not found
            if config['cpu'] == 'Unknown':
                cpu_info = platform.processor()
                if cpu_info:
                    config['cpu'] = cpu_info
                    config['cpu_score'] = self.score_cpu(cpu_info)
                else:
                    # Try psutil cpu info
                    config['cpu'] = f"{psutil.cpu_count()} cores CPU"
                    config['cpu_score'] = 50  # Default score
            
            # Try to get GPU info from system
            if config['gpu'] == 'Unknown':
                try:
                    if platform.system() == "Windows":
                        import subprocess
                        result = subprocess.run(['wmic', 'path', 'win32_VideoController', 'get', 'name'], 
                                              capture_output=True, text=True, timeout=5)
                        if result.stdout:
                            gpu_lines = [line.strip() for line in result.stdout.split('\n') if line.strip() and 'Name' not in line]
                            if gpu_lines:
                                config['gpu'] = gpu_lines[0]
                                config['gpu_score'] = self.score_gpu(gpu_lines[0])
                except:
                    pass
        
        except Exception as e:
            print(f"[DEBUG] Fallback detection error: {e}")
        
        return config
    
    def score_cpu(self, cpu_text):
        cpu_lower = cpu_text.lower()
        
        # Intel scoring
        if 'i9' in cpu_lower or 'i7' in cpu_lower:
            if any(gen in cpu_lower for gen in ['12th', '11th', '10th']):
                return 90  # High-end modern
            elif any(gen in cpu_lower for gen in ['9th', '8th', '7th']):
                return 75  # High-end older
            else:
                return 60  # High-end very old
        elif 'i5' in cpu_lower:
            if any(gen in cpu_lower for gen in ['12th', '11th', '10th']):
                return 75  # Mid-range modern
            elif any(gen in cpu_lower for gen in ['9th', '8th', '7th']):
                return 60  # Mid-range older
            else:
                return 45  # Mid-range old
        elif 'i3' in cpu_lower:
            if any(gen in cpu_lower for gen in ['12th', '11th', '10th']):
                return 55  # Entry modern
            else:
                return 35  # Entry old
        
        # AMD scoring
        elif 'ryzen 9' in cpu_lower or 'ryzen 7' in cpu_lower:
            if any(gen in cpu_lower for gen in ['5000', '4000']):
                return 85  # High-end modern AMD
            else:
                return 70  # High-end older AMD
        elif 'ryzen 5' in cpu_lower:
            if any(gen in cpu_lower for gen in ['5000', '4000']):
                return 70  # Mid-range modern AMD
            else:
                return 55  # Mid-range older AMD
        elif 'ryzen 3' in cpu_lower:
            return 50  # Entry AMD
        
        # Other processors
        elif any(old in cpu_lower for old in ['celeron', 'pentium', 'atom']):
            return 25  # Very low-end
        
        return 40  # Unknown/default
    
    def score_ram(self, ram_gb):
        if ram_gb >= 32:
            return 95  # Excellent
        elif ram_gb >= 16:
            return 85  # Very good
        elif ram_gb >= 8:
            return 70  # Good
        elif ram_gb >= 4:
            return 45  # Acceptable
        else:
            return 25  # Poor
    
    def score_gpu(self, gpu_text):
        gpu_lower = gpu_text.lower()
        
        # NVIDIA scoring
        if 'rtx' in gpu_lower:
            if any(model in gpu_lower for model in ['4090', '4080', '4070']):
                return 95  # Top tier
            elif any(model in gpu_lower for model in ['3080', '3070', '3060']):
                return 85  # High tier
            elif any(model in gpu_lower for model in ['2080', '2070', '2060']):
                return 75  # Good tier
            else:
                return 65  # Entry RTX
        elif 'gtx' in gpu_lower:
            if any(model in gpu_lower for model in ['1660', '1650']):
                return 55  # Entry gaming
            elif any(model in gpu_lower for model in ['1080', '1070']):
                return 70  # Older high-end
            else:
                return 45  # Older mid-range
        
        # AMD scoring
        elif 'rx' in gpu_lower:
            if any(model in gpu_lower for model in ['6800', '6700', '6600']):
                return 80  # Modern AMD high
            elif any(model in gpu_lower for model in ['5700', '5600', '5500']):
                return 65  # Older AMD
            else:
                return 50  # Entry AMD
        
        # Integrated graphics
        elif any(integrated in gpu_lower for integrated in ['intel', 'uhd', 'iris', 'vega']):
            if 'iris' in gpu_lower or 'vega' in gpu_lower:
                return 40  # Better integrated
            else:
                return 25  # Basic integrated
        
        return 30  # Unknown/default
    
    def calculate_performance_score(self, config):
        # Weighted average: CPU 40%, RAM 25%, GPU 35%
        total_score = (config['cpu_score'] * 0.4 + 
                      config['ram_score'] * 0.25 + 
                      config['gpu_score'] * 0.35)
        return round(total_score)
    
    def display_current_config(self, parent, config):
        config_frame = ctk.CTkFrame(parent, fg_color=Theme.BACKGROUND, corner_radius=6)
        config_frame.pack(fill="x", padx=15, pady=10)
        
        title_text = "üíª C·∫§U H√åNH HI·ªÜN T·∫†I" if CURRENT_LANG == "vi" else "üíª CURRENT CONFIGURATION"
        ctk.CTkLabel(config_frame, text=title_text, font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=(10, 5))
        
        # Display components with scores
        components = [
            ("üîß CPU", config['cpu'], config['cpu_score']),
            ("üíæ RAM", f"{config['ram']} GB" if config['ram'] > 0 else "Kh√¥ng x√°c ƒë·ªãnh", config['ram_score']),
            ("üéÆ GPU", config['gpu'], config['gpu_score'])
        ]
        
        if config.get('storage', 'Unknown') != 'Unknown':
            components.append(("üíø Storage", config['storage'], 50))
        
        for icon_name, value, score in components:
            comp_frame = ctk.CTkFrame(config_frame, fg_color="transparent")
            comp_frame.pack(fill="x", padx=10, pady=2)
            
            # Component info with truncation
            display_value = str(value)[:47] + "..." if len(str(value)) > 50 else str(value)
            ctk.CTkLabel(comp_frame, text=f"{icon_name}: {display_value}", font=Theme.BODY_FONT).pack(side="left", anchor="w")
            
            # Score indicator
            if score > 0:
                score_color = Theme.SUCCESS if score >= 70 else Theme.WARNING if score >= 50 else Theme.ERROR
                ctk.CTkLabel(comp_frame, text=f"({score}/100)", font=Theme.BODY_FONT, text_color=score_color).pack(side="right")
            else:
                ctk.CTkLabel(comp_frame, text="(N/A)", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY).pack(side="right")
    
    def display_performance_assessment(self, parent, score, config):
        perf_frame = ctk.CTkFrame(parent, corner_radius=8)
        perf_frame.pack(fill="x", padx=15, pady=10)
        
        # Determine performance tier
        if score >= 80:
            tier = "HIGH-END" if CURRENT_LANG == "en" else "CAO C·∫§P"
            tier_color = Theme.SUCCESS
            tier_desc = "M√°y t√≠nh hi·ªáu nƒÉng cao" if CURRENT_LANG == "vi" else "High-performance computer"
        elif score >= 60:
            tier = "MID-RANGE" if CURRENT_LANG == "en" else "TRUNG B√åNH"
            tier_color = Theme.INFO
            tier_desc = "M√°y t√≠nh t·∫ßm trung" if CURRENT_LANG == "vi" else "Mid-range computer"
        elif score >= 40:
            tier = "ENTRY-LEVEL" if CURRENT_LANG == "en" else "C∆† B·∫¢N"
            tier_color = Theme.WARNING
            tier_desc = "M√°y t√≠nh c∆° b·∫£n" if CURRENT_LANG == "vi" else "Entry-level computer"
        else:
            tier = "LOW-END" if CURRENT_LANG == "en" else "Y·∫æU"
            tier_color = Theme.ERROR
            tier_desc = "M√°y t√≠nh hi·ªáu nƒÉng th·∫•p" if CURRENT_LANG == "vi" else "Low-performance computer"
        
        perf_frame.configure(fg_color=tier_color)
        
        ctk.CTkLabel(perf_frame, text=f"üèÜ {tier} ({score}/100)", font=Theme.HEADING_FONT, text_color="white").pack(pady=(15, 5))
        ctk.CTkLabel(perf_frame, text=tier_desc, font=Theme.BODY_FONT, text_color="white").pack(pady=(0, 15))
    
    def display_usage_recommendations(self, parent, score, config):
        usage_frame = ctk.CTkFrame(parent, fg_color=Theme.FRAME, corner_radius=6)
        usage_frame.pack(fill="x", padx=15, pady=10)
        
        title_text = "üéØ KHUY·∫æN NGH·ªä S·ª¨ D·ª§NG" if CURRENT_LANG == "vi" else "üéØ USAGE RECOMMENDATIONS"
        ctk.CTkLabel(usage_frame, text=title_text, font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=(10, 5))
        
        recommendations = self.get_usage_recommendations(score, config)
        
        for category, tasks in recommendations.items():
            cat_frame = ctk.CTkFrame(usage_frame, fg_color=Theme.BACKGROUND, corner_radius=4)
            cat_frame.pack(fill="x", padx=10, pady=5)
            
            ctk.CTkLabel(cat_frame, text=category, font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=(5, 2))
            
            for task, suitable in tasks.items():
                icon = "‚úÖ" if suitable else "‚ùå"
                color = Theme.SUCCESS if suitable else Theme.ERROR
                ctk.CTkLabel(cat_frame, text=f"{icon} {task}", font=Theme.SMALL_FONT, text_color=color).pack(anchor="w", padx=20, pady=1)
            
            ctk.CTkLabel(cat_frame, text="", font=Theme.SMALL_FONT).pack(pady=2)
    
    def get_usage_recommendations(self, score, config):
        if CURRENT_LANG == "vi":
            base_tasks = {
                "üìÑ VƒÉn ph√≤ng c∆° b·∫£n": {
                    "Word, Excel, PowerPoint": score >= 30,
                    "Email, web browsing": score >= 25,
                    "PDF, in ·∫•n": score >= 30,
                    "Zoom, Teams meeting": score >= 35
                },
                "üé® ƒê·ªì h·ªça & Thi·∫øt k·∫ø": {
                    "Photoshop c∆° b·∫£n": score >= 50,
                    "Illustrator, CorelDraw": score >= 55,
                    "Video editing (1080p)": score >= 60,
                    "3D modeling": score >= 70,
                    "4K video editing": score >= 80
                },
                "üéÆ Gaming": {
                    "Game nh·∫π (LOL, CS:GO)": config['gpu_score'] >= 40,
                    "Game AAA (Medium)": config['gpu_score'] >= 60,
                    "Game AAA (High)": config['gpu_score'] >= 75,
                    "VR Gaming": config['gpu_score'] >= 80
                },
                "üíª L·∫≠p tr√¨nh": {
                    "Code editor, IDE": score >= 40,
                    "Web development": score >= 45,
                    "Mobile app dev": score >= 55,
                    "Machine Learning": score >= 70,
                    "Docker, VM": config['ram'] >= 16
                }
            }
        else:
            base_tasks = {
                "üìÑ Basic Office": {
                    "Word, Excel, PowerPoint": score >= 30,
                    "Email, web browsing": score >= 25,
                    "PDF, printing": score >= 30,
                    "Zoom, Teams meeting": score >= 35
                },
                "üé® Graphics & Design": {
                    "Basic Photoshop": score >= 50,
                    "Illustrator, CorelDraw": score >= 55,
                    "Video editing (1080p)": score >= 60,
                    "3D modeling": score >= 70,
                    "4K video editing": score >= 80
                },
                "üéÆ Gaming": {
                    "Light games (LOL, CS:GO)": config['gpu_score'] >= 40,
                    "AAA games (Medium)": config['gpu_score'] >= 60,
                    "AAA games (High)": config['gpu_score'] >= 75,
                    "VR Gaming": config['gpu_score'] >= 80
                },
                "üíª Programming": {
                    "Code editor, IDE": score >= 40,
                    "Web development": score >= 45,
                    "Mobile app dev": score >= 55,
                    "Machine Learning": score >= 70,
                    "Docker, VM": config['ram'] >= 16
                }
            }
        
        return base_tasks
    
    def display_upgrade_suggestions(self, parent, config):
        upgrade_frame = ctk.CTkFrame(parent, fg_color=Theme.INFO, corner_radius=8)
        upgrade_frame.pack(fill="x", padx=15, pady=15)
        
        title_text = "üîß G·ª¢I √ù N√ÇNG C·∫§P" if CURRENT_LANG == "vi" else "üîß UPGRADE SUGGESTIONS"
        ctk.CTkLabel(upgrade_frame, text=title_text, font=Theme.SUBHEADING_FONT, text_color="white").pack(pady=(10, 5))
        
        suggestions = self.get_upgrade_suggestions(config)
        
        if suggestions:
            for suggestion in suggestions:
                ctk.CTkLabel(upgrade_frame, text=f"‚Ä¢ {suggestion}", font=Theme.BODY_FONT, text_color="white").pack(anchor="w", padx=15, pady=2)
        else:
            no_upgrade_text = "C·∫•u h√¨nh ƒë√£ t·ªëi ∆∞u, kh√¥ng c·∫ßn n√¢ng c·∫•p" if CURRENT_LANG == "vi" else "Configuration is optimal, no upgrades needed"
            ctk.CTkLabel(upgrade_frame, text=no_upgrade_text, font=Theme.BODY_FONT, text_color="white").pack(padx=15, pady=5)
        
        ctk.CTkLabel(upgrade_frame, text="", font=Theme.SMALL_FONT).pack(pady=5)
    
    def get_upgrade_suggestions(self, config):
        suggestions = []
        
        if CURRENT_LANG == "vi":
            if config['ram'] < 8:
                suggestions.append(f"N√¢ng c·∫•p RAM l√™n 8GB+ (hi·ªán t·∫°i: {config['ram']}GB)")
            elif config['ram'] < 16:
                suggestions.append(f"N√¢ng c·∫•p RAM l√™n 16GB ƒë·ªÉ ƒëa nhi·ªám t·ªët h∆°n")
            
            if config['gpu_score'] < 50:
                suggestions.append("C√¢n nh·∫Øc laptop c√≥ GPU r·ªùi ƒë·ªÉ gaming/ƒë·ªì h·ªça")
            
            if config['cpu_score'] < 60:
                suggestions.append("CPU hi·ªáu nƒÉng th·∫•p, kh√≥ n√¢ng c·∫•p - c√¢n nh·∫Øc m√°y kh√°c")
            
            suggestions.append("Th√™m SSD n·∫øu ƒëang d√πng HDD ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô")
        else:
            if config['ram'] < 8:
                suggestions.append(f"Upgrade RAM to 8GB+ (current: {config['ram']}GB)")
            elif config['ram'] < 16:
                suggestions.append(f"Upgrade RAM to 16GB for better multitasking")
            
            if config['gpu_score'] < 50:
                suggestions.append("Consider laptop with dedicated GPU for gaming/graphics")
            
            if config['cpu_score'] < 60:
                suggestions.append("Low CPU performance, hard to upgrade - consider other laptop")
            
            suggestions.append("Add SSD if using HDD to improve speed")
        
        return suggestions
    
    def show_result_choices(self, performance_score):
        result_frame = ctk.CTkFrame(self.action_frame)
        result_frame.pack(fill="x", padx=20, pady=20)
        
        # Auto-complete with analysis results
        result_details = f"Ph√¢n t√≠ch ho√†n th√†nh (Score: {performance_score}/100)" if CURRENT_LANG == "vi" else f"Analysis completed (Score: {performance_score}/100)"
        self.mark_completed({"K·∫øt qu·∫£": result_details, "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=False)
        
        question_text = "C·∫•u h√¨nh n√†y c√≥ ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n kh√¥ng?" if CURRENT_LANG == "vi" else "Does this configuration meet your needs?"
        ctk.CTkLabel(result_frame, text=question_text, font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(result_frame, fg_color="transparent")
        button_bar.pack(pady=15)
        
        suitable_text = "‚úì Ph√π h·ª£p" if CURRENT_LANG == "vi" else "‚úì Suitable"
        ctk.CTkButton(button_bar, text=suitable_text, 
                     command=lambda: self.go_to_next_step_callback(), 
                     fg_color=Theme.SUCCESS, height=32, font=Theme.BUTTON_FONT).pack(side="left", padx=10)
        
        unsuitable_text = "‚ùå Kh√¥ng ph√π h·ª£p" if CURRENT_LANG == "vi" else "‚ùå Not suitable"
        ctk.CTkButton(button_bar, text=unsuitable_text, 
                     command=lambda: self.go_to_next_step_callback(), 
                     fg_color=Theme.ERROR, height=32, font=Theme.BUTTON_FONT).pack(side="left", padx=10)