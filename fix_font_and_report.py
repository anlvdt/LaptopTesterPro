"""
Fix Font Ti·∫øng Vi·ªát, B√°o C√°o v√† Encoding
Kh·∫Øc ph·ª•c 3 v·∫•n ƒë·ªÅ ch√≠nh:
1. Font ti·∫øng Vi·ªát kh√¥ng hi·ªÉn th·ªã ƒë√∫ng
2. B√°o c√°o thi·∫øu th√¥ng tin k·∫øt qu·∫£
3. L·ªói √¥ vu√¥ng trong h∆∞·ªõng d·∫´n (encoding)
"""

import os
import sys

def fix_main_py():
    """Fix main.py v·ªõi font v√† encoding ƒë√∫ng"""
    
    main_file = "main.py"
    
    if not os.path.exists(main_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y {main_file}")
        return False
    
    print(f"üìù ƒêang fix {main_file}...")
    
    with open(main_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 1. Fix font - Thay Segoe UI b·∫±ng font h·ªó tr·ª£ ti·∫øng Vi·ªát t·ªët
    replacements = [
        # Font ch√≠nh - d√πng Arial thay v√¨ Segoe UI
        ('self.TITLE_FONT = ("Segoe UI", 42, "bold")', 'self.TITLE_FONT = ("Arial", 42, "bold")'),
        ('self.HEADING_FONT = ("Segoe UI", 28, "bold")', 'self.HEADING_FONT = ("Arial", 28, "bold")'),
        ('self.SUBHEADING_FONT = ("Segoe UI", 22, "bold")', 'self.SUBHEADING_FONT = ("Arial", 22, "bold")'),
        ('self.BODY_FONT = ("Segoe UI", 16)', 'self.BODY_FONT = ("Arial", 16)'),
        ('self.SMALL_FONT = ("Segoe UI", 14)', 'self.SMALL_FONT = ("Arial", 14)'),
        ('self.KEY_FONT = ("Segoe UI", 12)', 'self.KEY_FONT = ("Arial", 12)'),
        ('self.BUTTON_FONT = ("Segoe UI", 14)', 'self.BUTTON_FONT = ("Arial", 14)'),
        
        # Font trong c√°c widget
        ('font=("Segoe UI"', 'font=("Arial"'),
        ('("Segoe UI", 24)', '("Arial", 24)'),
        ('("Segoe UI", 28, "bold")', '("Arial", 28, "bold")'),
        ('("Segoe UI", 20)', '("Arial", 20)'),
    ]
    
    for old, new in replacements:
        content = content.replace(old, new)
    
    # 2. Fix bullet points - Thay ‚Ä¢ b·∫±ng - ƒë·ªÉ tr√°nh l·ªói encoding
    bullet_fixes = [
        ('‚Ä¢ ', '- '),
        ('‚Ä¢', '-'),
    ]
    
    for old, new in bullet_fixes:
        content = content.replace(old, new)
    
    # 3. ƒê·∫£m b·∫£o encoding UTF-8 ·ªü ƒë·∫ßu file
    if not content.startswith('#!/usr/bin/env python3'):
        content = '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n' + content
    elif '# -*- coding: utf-8 -*-' not in content[:200]:
        content = content.replace('#!/usr/bin/env python3\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n')
    
    # Backup
    backup_file = "main_backup_before_font_fix.py"
    with open(backup_file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"‚úÖ ƒê√£ backup v√†o {backup_file}")
    
    # Save fixed version
    with open(main_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ ƒê√£ fix font v√† encoding trong {main_file}")
    return True

def fix_report_generator():
    """Fix report_generator.py ƒë·ªÉ l∆∞u ƒë·∫ßy ƒë·ªß th√¥ng tin"""
    
    report_file = "report_generator.py"
    
    if not os.path.exists(report_file):
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {report_file}")
        return False
    
    print(f"üìù ƒêang fix {report_file}...")
    
    with open(report_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Fix font trong report
    content = content.replace('("Segoe UI"', '("Arial"')
    content = content.replace('"Segoe UI"', '"Arial"')
    
    # Fix bullet points
    content = content.replace('‚Ä¢ ', '- ')
    content = content.replace('‚Ä¢', '-')
    
    # ƒê·∫£m b·∫£o encoding
    if '# -*- coding: utf-8 -*-' not in content[:200]:
        content = '# -*- coding: utf-8 -*-\n' + content
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ ƒê√£ fix {report_file}")
    return True

def create_enhanced_summary_step():
    """T·∫°o SummaryStep c·∫£i ti·∫øn v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin"""
    
    summary_code = '''# -*- coding: utf-8 -*-
"""
Enhanced Summary Step - Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin k·∫øt qu·∫£
"""

import customtkinter as ctk

class EnhancedSummaryStep(ctk.CTkFrame):
    """B∆∞·ªõc t·ªïng k·∫øt v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin"""
    
    def __init__(self, master, all_results, theme_manager, **kwargs):
        super().__init__(master, fg_color="transparent")
        self.all_results = all_results
        self.theme = theme_manager
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Scrollable frame
        self.scroll_frame = ctk.CTkScrollableFrame(
            self,
            fg_color=self.theme.get_color('CARD'),
            corner_radius=12
        )
        self.scroll_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        self.scroll_frame.grid_columnconfigure(0, weight=1)
        
        self.display_summary()
    
    def display_summary(self):
        """Hi·ªÉn th·ªã b√°o c√°o t·ªïng k·∫øt ƒë·∫ßy ƒë·ªß"""
        
        # Header
        header = ctk.CTkFrame(self.scroll_frame, fg_color="transparent")
        header.grid(row=0, column=0, sticky="ew", pady=(0, 20))
        
        ctk.CTkLabel(
            header,
            text="B√ÅO C√ÅO T·ªîNG K·∫æT",
            font=("Arial", 32, "bold"),
            text_color=self.theme.get_color('ACCENT')
        ).pack()
        
        # Statistics
        stats = self.calculate_stats()
        self.create_stats_section(stats)
        
        # Hardware capability
        self.create_hardware_section()
        
        # Detailed results
        self.create_results_section()
        
        # Export buttons
        self.create_export_section()
    
    def calculate_stats(self):
        """T√≠nh to√°n th·ªëng k√™"""
        total = len(self.all_results)
        passed = sum(1 for r in self.all_results.values() if r.get("Tr·∫°ng th√°i") == "T·ªët")
        warning = sum(1 for r in self.all_results.values() if r.get("Tr·∫°ng th√°i") == "C·∫£nh b√°o")
        failed = sum(1 for r in self.all_results.values() if r.get("Tr·∫°ng th√°i") == "L·ªói")
        skipped = sum(1 for r in self.all_results.values() if r.get("Tr·∫°ng th√°i") == "B·ªè qua")
        
        success_rate = (passed / total * 100) if total > 0 else 0
        
        return {
            "total": total,
            "passed": passed,
            "warning": warning,
            "failed": failed,
            "skipped": skipped,
            "success_rate": success_rate
        }
    
    def create_stats_section(self, stats):
        """T·∫°o ph·∫ßn th·ªëng k√™"""
        stats_frame = ctk.CTkFrame(
            self.scroll_frame,
            fg_color=self.theme.get_color('FRAME'),
            corner_radius=12
        )
        stats_frame.grid(row=1, column=0, sticky="ew", pady=10)
        stats_frame.grid_columnconfigure((0,1,2,3,4), weight=1)
        
        # Total
        self._create_stat_card(stats_frame, 0, "T·ªïng s·ªë", str(stats["total"]), "#64748B")
        
        # Passed
        self._create_stat_card(stats_frame, 1, "ƒê·∫°t", str(stats["passed"]), "#10B981")
        
        # Warning
        if stats["warning"] > 0:
            self._create_stat_card(stats_frame, 2, "C·∫£nh b√°o", str(stats["warning"]), "#F59E0B")
        
        # Failed
        if stats["failed"] > 0:
            self._create_stat_card(stats_frame, 3, "L·ªói", str(stats["failed"]), "#EF4444")
        
        # Success rate
        rate_color = "#10B981" if stats["success_rate"] >= 80 else "#F59E0B" if stats["success_rate"] >= 60 else "#EF4444"
        self._create_stat_card(stats_frame, 4, "T·ª∑ l·ªá", f"{stats['success_rate']:.0f}%", rate_color)
    
    def _create_stat_card(self, parent, col, label, value, color):
        """T·∫°o card th·ªëng k√™"""
        card = ctk.CTkFrame(parent, fg_color="transparent")
        card.grid(row=0, column=col, padx=10, pady=15)
        
        ctk.CTkLabel(
            card,
            text=value,
            font=("Arial", 28, "bold"),
            text_color=color
        ).pack()
        
        ctk.CTkLabel(
            card,
            text=label,
            font=("Arial", 14),
            text_color=self.theme.get_color('TEXT_SECONDARY')
        ).pack()
    
    def create_hardware_section(self):
        """T·∫°o ph·∫ßn ph√¢n t√≠ch ph·∫ßn c·ª©ng"""
        hw_info = self.all_results.get("ƒê·ªãnh danh ph·∫ßn c·ª©ng", {})
        
        if not hw_info:
            return
        
        hw_frame = ctk.CTkFrame(
            self.scroll_frame,
            fg_color=self.theme.get_color('FRAME'),
            corner_radius=12
        )
        hw_frame.grid(row=2, column=0, sticky="ew", pady=10)
        
        ctk.CTkLabel(
            hw_frame,
            text="Kh·∫£ NƒÉng S·ª≠ D·ª•ng Ph·∫ßn C·ª©ng",
            font=("Arial", 22, "bold"),
            text_color=self.theme.get_color('ACCENT')
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        # Ph√¢n t√≠ch CPU t·ª´ chi ti·∫øt
        chi_tiet = hw_info.get("Chi ti·∫øt", "")
        cpu_name = ""
        
        for line in chi_tiet.split("\\n"):
            if "CPU:" in line:
                cpu_name = line.split("CPU:")[1].strip()
                break
        
        if cpu_name:
            ctk.CTkLabel(
                hw_frame,
                text=f"D·ª±a tr√™n: {cpu_name}",
                font=("Arial", 14),
                text_color=self.theme.get_color('TEXT_SECONDARY')
            ).pack(anchor="w", padx=20, pady=(0, 10))
        
        # Capabilities
        capabilities = self._analyze_capabilities(cpu_name, chi_tiet)
        
        for cap in capabilities:
            cap_card = ctk.CTkFrame(
                hw_frame,
                fg_color=self.theme.get_color('BACKGROUND'),
                corner_radius=8,
                border_width=2,
                border_color=cap["color"]
            )
            cap_card.pack(fill="x", padx=20, pady=5)
            
            ctk.CTkLabel(
                cap_card,
                text=f"{cap['icon']} {cap['title']}",
                font=("Arial", 16, "bold"),
                text_color=cap["color"]
            ).pack(anchor="w", padx=15, pady=(10, 5))
            
            ctk.CTkLabel(
                cap_card,
                text=cap["desc"],
                font=("Arial", 14),
                text_color=self.theme.get_color('TEXT_SECONDARY'),
                wraplength=700,
                justify="left"
            ).pack(anchor="w", padx=15, pady=(0, 10))
        
        # Spacer
        ctk.CTkFrame(hw_frame, height=10, fg_color="transparent").pack()
    
    def _analyze_capabilities(self, cpu_name, chi_tiet):
        """Ph√¢n t√≠ch kh·∫£ nƒÉng s·ª≠ d·ª•ng"""
        capabilities = []
        
        # Ph√¢n t√≠ch CPU tier
        cpu_upper = cpu_name.upper()
        
        if any(x in cpu_upper for x in ["I9", "I7", "RYZEN 9", "RYZEN 7"]):
            capabilities.append({
                "icon": "üéÆ",
                "title": "Gaming & Rendering",
                "desc": "Ph√π h·ª£p cho gaming AAA, render 3D, video editing chuy√™n nghi·ªáp",
                "color": "#10B981"
            })
            capabilities.append({
                "icon": "üíº",
                "title": "Workstation",
                "desc": "X·ª≠ l√Ω ƒëa nhi·ªám n·∫∑ng, ph√°t tri·ªÉn ph·∫ßn m·ªÅm, m√°y ·∫£o",
                "color": "#3B82F6"
            })
        elif any(x in cpu_upper for x in ["I5", "RYZEN 5"]):
            capabilities.append({
                "icon": "üéÆ",
                "title": "Gaming Casual",
                "desc": "Ch∆°i game ·ªü m·ª©c trung b√¨nh, streaming, content creation",
                "color": "#F59E0B"
            })
            capabilities.append({
                "icon": "üíº",
                "title": "VƒÉn ph√≤ng n√¢ng cao",
                "desc": "Office, l·∫≠p tr√¨nh, thi·∫øt k·∫ø ƒë·ªì h·ªça 2D, ƒëa nhi·ªám v·ª´a ph·∫£i",
                "color": "#3B82F6"
            })
        else:
            capabilities.append({
                "icon": "üìù",
                "title": "VƒÉn ph√≤ng c∆° b·∫£n",
                "desc": "Office, web browsing, email, xem phim",
                "color": "#94A3B8"
            })
            capabilities.append({
                "icon": "üéì",
                "title": "H·ªçc t·∫≠p",
                "desc": "H·ªçc online, so·∫°n th·∫£o vƒÉn b·∫£n, nghi√™n c·ª©u",
                "color": "#06B6D4"
            })
        
        # Ki·ªÉm tra GPU r·ªùi
        if any(x in chi_tiet.upper() for x in ["RTX", "GTX", "RADEON RX", "RADEON PRO"]):
            capabilities.insert(0, {
                "icon": "üé®",
                "title": "ƒê·ªì h·ªça chuy√™n nghi·ªáp",
                "desc": "GPU r·ªùi m·∫°nh, ph√π h·ª£p cho CAD, 3D modeling, AI/ML",
                "color": "#8B5CF6"
            })
        
        return capabilities
    
    def create_results_section(self):
        """T·∫°o ph·∫ßn k·∫øt qu·∫£ chi ti·∫øt"""
        results_frame = ctk.CTkFrame(
            self.scroll_frame,
            fg_color=self.theme.get_color('FRAME'),
            corner_radius=12
        )
        results_frame.grid(row=3, column=0, sticky="ew", pady=10)
        
        ctk.CTkLabel(
            results_frame,
            text="Chi Ti·∫øt K·∫øt Qu·∫£",
            font=("Arial", 22, "bold"),
            text_color=self.theme.get_color('ACCENT')
        ).pack(anchor="w", padx=20, pady=(15, 10))
        
        # Hi·ªÉn th·ªã t·ª´ng k·∫øt qu·∫£
        for step_name, result_data in self.all_results.items():
            self._create_result_item(results_frame, step_name, result_data)
        
        # Spacer
        ctk.CTkFrame(results_frame, height=10, fg_color="transparent").pack()
    
    def _create_result_item(self, parent, step_name, result_data):
        """T·∫°o item k·∫øt qu·∫£"""
        status = result_data.get("Tr·∫°ng th√°i", "Kh√¥ng r√µ")
        result_text = result_data.get("K·∫øt qu·∫£", "")
        chi_tiet = result_data.get("Chi ti·∫øt", "")
        
        # Icon v√† m√†u
        status_map = {
            "T·ªët": ("‚úÖ", "#10B981"),
            "C·∫£nh b√°o": ("‚ö†Ô∏è", "#F59E0B"),
            "L·ªói": ("‚ùå", "#EF4444"),
            "B·ªè qua": ("‚è≠Ô∏è", "#94A3B8")
        }
        
        icon, color = status_map.get(status, ("‚ùì", "#64748B"))
        
        item_frame = ctk.CTkFrame(
            parent,
            fg_color=self.theme.get_color('BACKGROUND'),
            corner_radius=8
        )
        item_frame.pack(fill="x", padx=20, pady=5)
        
        # Header
        header = ctk.CTkFrame(item_frame, fg_color="transparent")
        header.pack(fill="x", padx=15, pady=10)
        header.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(
            header,
            text=f"{icon} {step_name}",
            font=("Arial", 16, "bold"),
            text_color=self.theme.get_color('TEXT')
        ).grid(row=0, column=0, sticky="w")
        
        ctk.CTkLabel(
            header,
            text=status,
            font=("Arial", 14),
            text_color=color,
            fg_color=color + "20",
            corner_radius=6
        ).grid(row=0, column=2, padx=10)
        
        # K·∫øt qu·∫£
        if result_text:
            ctk.CTkLabel(
                item_frame,
                text=f"K·∫øt qu·∫£: {result_text}",
                font=("Arial", 14),
                text_color=self.theme.get_color('TEXT_SECONDARY'),
                wraplength=700,
                justify="left"
            ).pack(anchor="w", padx=15, pady=(0, 5))
        
        # Chi ti·∫øt (n·∫øu c√≥ v√† kh√¥ng qu√° d√†i)
        if chi_tiet and len(chi_tiet) < 500:
            detail_text = chi_tiet.replace("\\n", " | ")
            ctk.CTkLabel(
                item_frame,
                text=f"Chi ti·∫øt: {detail_text}",
                font=("Arial", 12),
                text_color=self.theme.get_color('TEXT_SECONDARY'),
                wraplength=700,
                justify="left"
            ).pack(anchor="w", padx=15, pady=(0, 10))
    
    def create_export_section(self):
        """T·∫°o ph·∫ßn xu·∫•t b√°o c√°o"""
        export_frame = ctk.CTkFrame(
            self.scroll_frame,
            fg_color=self.theme.get_color('FRAME'),
            corner_radius=12
        )
        export_frame.grid(row=4, column=0, sticky="ew", pady=10)
        
        ctk.CTkLabel(
            export_frame,
            text="Xu·∫•t B√°o C√°o",
            font=("Arial", 18, "bold"),
            text_color=self.theme.get_color('ACCENT')
        ).pack(side="left", padx=20, pady=15)
        
        button_container = ctk.CTkFrame(export_frame, fg_color="transparent")
        button_container.pack(side="right", padx=20, pady=15)
        
        buttons = [
            ("üìÑ PDF", self.export_pdf),
            ("üìä Excel", self.export_excel),
            ("üìã Text", self.export_text)
        ]
        
        for text, command in buttons:
            ctk.CTkButton(
                button_container,
                text=text,
                command=command,
                font=("Arial", 14),
                width=100,
                height=40
            ).pack(side="left", padx=5)
    
    def export_pdf(self):
        """Xu·∫•t PDF"""
        print("Xu·∫•t PDF...")
        # TODO: Implement PDF export
    
    def export_excel(self):
        """Xu·∫•t Excel"""
        print("Xu·∫•t Excel...")
        # TODO: Implement Excel export
    
    def export_text(self):
        """Xu·∫•t Text"""
        from tkinter import filedialog
        from datetime import datetime
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt")],
            title="L∆∞u b√°o c√°o"
        )
        
        if not filename:
            return
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("=" * 60 + "\\n")
            f.write("B√ÅO C√ÅO KI·ªÇM TRA LAPTOP\\n")
            f.write("=" * 60 + "\\n\\n")
            f.write(f"Ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M')}\\n\\n")
            
            # Stats
            stats = self.calculate_stats()
            f.write("TH·ªêNG K√ä:\\n")
            f.write("-" * 30 + "\\n")
            f.write(f"T·ªïng s·ªë test: {stats['total']}\\n")
            f.write(f"ƒê·∫°t: {stats['passed']}\\n")
            f.write(f"C·∫£nh b√°o: {stats['warning']}\\n")
            f.write(f"L·ªói: {stats['failed']}\\n")
            f.write(f"T·ª∑ l·ªá th√†nh c√¥ng: {stats['success_rate']:.1f}%\\n\\n")
            
            # Results
            f.write("CHI TI·∫æT K·∫æT QU·∫¢:\\n")
            f.write("-" * 30 + "\\n\\n")
            
            for step_name, result_data in self.all_results.items():
                f.write(f"{step_name}:\\n")
                f.write(f"  Tr·∫°ng th√°i: {result_data.get('Tr·∫°ng th√°i', 'N/A')}\\n")
                f.write(f"  K·∫øt qu·∫£: {result_data.get('K·∫øt qu·∫£', 'N/A')}\\n")
                if result_data.get("Chi ti·∫øt"):
                    f.write(f"  Chi ti·∫øt: {result_data['Chi ti·∫øt']}\\n")
                f.write("\\n")
        
        print(f"‚úÖ ƒê√£ l∆∞u b√°o c√°o: {filename}")
'''
    
    with open("enhanced_summary_step.py", 'w', encoding='utf-8') as f:
        f.write(summary_code)
    
    print("‚úÖ ƒê√£ t·∫°o enhanced_summary_step.py")
    return True

def main():
    """Main function"""
    print("=" * 60)
    print("FIX FONT TI·∫æNG VI·ªÜT, B√ÅO C√ÅO V√Ä ENCODING")
    print("=" * 60)
    print()
    
    # Fix main.py
    if fix_main_py():
        print("‚úÖ ƒê√£ fix main.py")
    else:
        print("‚ùå L·ªói khi fix main.py")
    
    print()
    
    # Fix report_generator.py
    if fix_report_generator():
        print("‚úÖ ƒê√£ fix report_generator.py")
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y report_generator.py")
    
    print()
    
    # Create enhanced summary
    if create_enhanced_summary_step():
        print("‚úÖ ƒê√£ t·∫°o enhanced_summary_step.py")
    
    print()
    print("=" * 60)
    print("HO√ÄN TH√ÄNH!")
    print("=" * 60)
    print()
    print("üìù C√°c thay ƒë·ªïi:")
    print("  1. ‚úÖ Thay font Segoe UI -> Arial (h·ªó tr·ª£ ti·∫øng Vi·ªát t·ªët h∆°n)")
    print("  2. ‚úÖ Fix bullet points (‚Ä¢ -> -) ƒë·ªÉ tr√°nh l·ªói encoding")
    print("  3. ‚úÖ Th√™m # -*- coding: utf-8 -*- v√†o ƒë·∫ßu file")
    print("  4. ‚úÖ T·∫°o EnhancedSummaryStep v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin")
    print()
    print("üîÑ ƒê·ªÉ √°p d·ª•ng:")
    print("  1. Ch·∫°y l·∫°i ·ª©ng d·ª•ng: python main.py")
    print("  2. Ki·ªÉm tra font ti·∫øng Vi·ªát hi·ªÉn th·ªã ƒë√∫ng")
    print("  3. Ki·ªÉm tra b√°o c√°o c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin")
    print()

if __name__ == "__main__":
    main()
