# Advanced Report Generator for LaptopTester
import customtkinter as ctk
import tkinter as tk
from tkinter import filedialog, messagebox
import json
import os
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import io
import base64
from ui_improvements import ModernTheme, ModernCard

class ReportGeneratorFrame(ctk.CTkFrame):
    """Advanced report generator with multiple export formats"""
    
    def __init__(self, parent, results_data):
        super().__init__(parent, fg_color=ModernTheme.BACKGROUND)
        self.results = results_data
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        self.create_header()
        self.create_report_content()
        self.create_export_controls()
    
    def create_header(self):
        """Create report header"""
        header_frame = ctk.CTkFrame(self, fg_color=ModernTheme.PRIMARY, corner_radius=ModernTheme.RADIUS)
        header_frame.grid(row=0, column=0, sticky="ew", padx=ModernTheme.SPACE_LG, pady=(ModernTheme.SPACE_LG, ModernTheme.SPACE_MD))
        
        # Title and timestamp
        title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_frame.pack(fill="x", padx=ModernTheme.SPACE_XL, pady=ModernTheme.SPACE_LG)
        
        ctk.CTkLabel(
            title_frame,
            text="üìä B√ÅO C√ÅO KI·ªÇM TRA LAPTOP",
            font=ModernTheme.FONT_TITLE,
            text_color="white"
        ).pack(side="left")
        
        ctk.CTkLabel(
            title_frame,
            text=datetime.now().strftime("%d/%m/%Y %H:%M"),
            font=ModernTheme.FONT_SUBHEADING,
            text_color="white"
        ).pack(side="right")
        
        # Summary stats
        stats = self.calculate_summary_stats()
        stats_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        stats_frame.pack(fill="x", padx=ModernTheme.SPACE_XL, pady=(0, ModernTheme.SPACE_LG))
        
        stat_items = [
            ("T·ªïng Test", str(stats["total"])),
            ("ƒê·∫°t", f"{stats['passed']}/{stats['total']}"),
            ("T·ª∑ L·ªá", f"{stats['success_rate']:.1f}%")
        ]
        
        for i, (label, value) in enumerate(stat_items):
            stat_container = ctk.CTkFrame(stats_frame, fg_color="rgba(255,255,255,0.1)", corner_radius=8)
            stat_container.pack(side="left", padx=(0, ModernTheme.SPACE_MD) if i < len(stat_items)-1 else 0)
            
            ctk.CTkLabel(
                stat_container,
                text=label,
                font=ModernTheme.FONT_CAPTION,
                text_color="rgba(255,255,255,0.8)"
            ).pack(padx=ModernTheme.SPACE_MD, pady=(ModernTheme.SPACE_SM, 0))
            
            ctk.CTkLabel(
                stat_container,
                text=value,
                font=ModernTheme.FONT_SUBHEADING,
                text_color="white"
            ).pack(padx=ModernTheme.SPACE_MD, pady=(0, ModernTheme.SPACE_SM))
    
    def create_report_content(self):
        """Create main report content"""
        content_frame = ctk.CTkScrollableFrame(
            self,
            fg_color=ModernTheme.SURFACE,
            corner_radius=ModernTheme.RADIUS
        )
        content_frame.grid(row=1, column=0, sticky="nsew", padx=ModernTheme.SPACE_LG, pady=(0, ModernTheme.SPACE_MD))
        
        # Executive Summary
        self.create_executive_summary(content_frame)
        
        # Detailed Results
        self.create_detailed_results(content_frame)
        
        # Recommendations
        self.create_recommendations(content_frame)
        
        # Technical Details
        self.create_technical_details(content_frame)
    
    def create_executive_summary(self, parent):
        """Create executive summary section"""
        summary_card = ModernCard(
            parent,
            title="üìã T√≥m T·∫Øt ƒêi·ªÅu H√†nh",
            description="ƒê√°nh gi√° t·ªïng quan v·ªÅ t√¨nh tr·∫°ng laptop"
        )
        summary_card.pack(fill="x", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_LG)
        
        stats = self.calculate_summary_stats()
        
        # Overall assessment
        if stats["success_rate"] >= 90:
            assessment = "‚úÖ XU·∫§T S·∫ÆC"
            assessment_color = ModernTheme.SUCCESS
            assessment_desc = "Laptop trong t√¨nh tr·∫°ng r·∫•t t·ªët, ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh v√† an to√†n ƒë·ªÉ s·ª≠ d·ª•ng."
        elif stats["success_rate"] >= 75:
            assessment = "‚úÖ T·ªêT"
            assessment_color = ModernTheme.SUCCESS
            assessment_desc = "Laptop ho·∫°t ƒë·ªông t·ªët v·ªõi m·ªôt s·ªë l∆∞u √Ω nh·ªè c·∫ßn theo d√µi."
        elif stats["success_rate"] >= 60:
            assessment = "‚ö†Ô∏è TRUNG B√åNH"
            assessment_color = ModernTheme.WARNING
            assessment_desc = "Laptop c√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c tr∆∞·ªõc khi s·ª≠ d·ª•ng l√¢u d√†i."
        else:
            assessment = "‚ùå K√âM"
            assessment_color = ModernTheme.ERROR
            assessment_desc = "Laptop c√≥ nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng, kh√¥ng khuy·∫øn ngh·ªã mua."
        
        # Assessment display
        assessment_frame = ctk.CTkFrame(summary_card.content, fg_color=assessment_color, corner_radius=ModernTheme.RADIUS)
        assessment_frame.pack(fill="x", pady=ModernTheme.SPACE_MD)
        
        ctk.CTkLabel(
            assessment_frame,
            text=f"ƒê√ÅNH GI√Å T·ªîNG TH·ªÇ: {assessment}",
            font=ModernTheme.FONT_HEADING,
            text_color="white"
        ).pack(pady=ModernTheme.SPACE_MD)
        
        ctk.CTkLabel(
            summary_card.content,
            text=assessment_desc,
            font=ModernTheme.FONT_BODY,
            text_color=ModernTheme.TEXT,
            wraplength=600
        ).pack(pady=ModernTheme.SPACE_MD)
        
        # Key findings
        findings_frame = ctk.CTkFrame(summary_card.content, fg_color=ModernTheme.BACKGROUND)
        findings_frame.pack(fill="x", pady=ModernTheme.SPACE_MD)
        
        ctk.CTkLabel(
            findings_frame,
            text="üîç Ph√°t Hi·ªán Ch√≠nh:",
            font=ModernTheme.FONT_SUBHEADING,
            text_color=ModernTheme.TEXT
        ).pack(anchor="w", padx=ModernTheme.SPACE_MD, pady=(ModernTheme.SPACE_MD, ModernTheme.SPACE_SM))
        
        # Critical issues
        critical_issues = [name for name, result in self.results.items() 
                          if result.get("Tr·∫°ng th√°i") == "L·ªói"]
        
        if critical_issues:
            ctk.CTkLabel(
                findings_frame,
                text=f"‚ùå L·ªói nghi√™m tr·ªçng: {len(critical_issues)} v·∫•n ƒë·ªÅ",
                font=ModernTheme.FONT_BODY,
                text_color=ModernTheme.ERROR
            ).pack(anchor="w", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_XS)
        
        # Warnings
        warnings = [name for name, result in self.results.items() 
                   if result.get("Tr·∫°ng th√°i") == "C·∫£nh b√°o"]
        
        if warnings:
            ctk.CTkLabel(
                findings_frame,
                text=f"‚ö†Ô∏è C·∫£nh b√°o: {len(warnings)} v·∫•n ƒë·ªÅ",
                font=ModernTheme.FONT_BODY,
                text_color=ModernTheme.WARNING
            ).pack(anchor="w", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_XS)
        
        # Passed tests
        passed_tests = [name for name, result in self.results.items() 
                       if result.get("Tr·∫°ng th√°i") == "T·ªët"]
        
        ctk.CTkLabel(
            findings_frame,
            text=f"‚úÖ Test ƒë·∫°t: {len(passed_tests)} m·ª•c",
            font=ModernTheme.FONT_BODY,
            text_color=ModernTheme.SUCCESS
        ).pack(anchor="w", padx=ModernTheme.SPACE_LG, pady=(ModernTheme.SPACE_XS, ModernTheme.SPACE_MD))
    
    def create_detailed_results(self, parent):
        """Create detailed results section"""
        results_card = ModernCard(
            parent,
            title="üìä K·∫øt Qu·∫£ Chi Ti·∫øt",
            description="K·∫øt qu·∫£ t·ª´ng b∆∞·ªõc ki·ªÉm tra"
        )
        results_card.pack(fill="x", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_LG)
        
        # Group results by category
        categories = {
            "Ph·∫ßn c·ª©ng": ["ƒê·ªãnh danh ph·∫ßn c·ª©ng", "C·∫•u h√¨nh h·ªá th·ªëng", "S·ª©c kh·ªèe ·ªï c·ª©ng", "CPU Stress Test", "GPU Stress Test"],
            "Giao di·ªán": ["Ki·ªÉm tra m√†n h√¨nh", "B√†n ph√≠m & Touchpad", "Webcam", "Loa & Micro"],
            "K·∫øt n·ªëi": ["C·ªïng k·∫øt n·ªëi", "M·∫°ng & WiFi"],
            "H·ªá th·ªëng": ["B·∫£n quy·ªÅn Windows", "Ki·ªÉm tra BIOS", "Pin laptop", "Ki·ªÉm tra ngo·∫°i h√¨nh"]
        }
        
        for category_name, test_names in categories.items():
            category_results = {name: result for name, result in self.results.items() 
                              if name in test_names}
            
            if not category_results:
                continue
            
            # Category header
            cat_frame = ctk.CTkFrame(results_card.content, fg_color=ModernTheme.BACKGROUND)
            cat_frame.pack(fill="x", pady=ModernTheme.SPACE_SM)
            
            ctk.CTkLabel(
                cat_frame,
                text=f"üìÅ {category_name}",
                font=ModernTheme.FONT_SUBHEADING,
                text_color=ModernTheme.PRIMARY
            ).pack(anchor="w", padx=ModernTheme.SPACE_MD, pady=ModernTheme.SPACE_SM)
            
            # Category results
            for test_name, result in category_results.items():
                self.create_result_item(cat_frame, test_name, result)
    
    def create_result_item(self, parent, test_name, result):
        """Create individual result item"""
        item_frame = ctk.CTkFrame(parent, fg_color=ModernTheme.SURFACE, corner_radius=8)
        item_frame.pack(fill="x", padx=ModernTheme.SPACE_MD, pady=ModernTheme.SPACE_XS)
        
        # Status colors and icons
        status = result.get("Tr·∫°ng th√°i", "Kh√¥ng r√µ")
        status_config = {
            "T·ªët": ("‚úÖ", ModernTheme.SUCCESS),
            "L·ªói": ("‚ùå", ModernTheme.ERROR),
            "C·∫£nh b√°o": ("‚ö†Ô∏è", ModernTheme.WARNING),
            "B·ªè qua": ("‚è≠Ô∏è", ModernTheme.TEXT_MUTED)
        }
        
        icon, color = status_config.get(status, ("‚ùì", ModernTheme.TEXT_MUTED))
        
        # Header
        header_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=ModernTheme.SPACE_MD, pady=ModernTheme.SPACE_SM)
        
        ctk.CTkLabel(
            header_frame,
            text=f"{icon} {test_name}",
            font=ModernTheme.FONT_BODY,
            text_color=ModernTheme.TEXT
        ).pack(side="left")
        
        ctk.CTkLabel(
            header_frame,
            text=status,
            font=ModernTheme.FONT_BODY,
            text_color=color
        ).pack(side="right")
        
        # Details
        if result.get("K·∫øt qu·∫£"):
            ctk.CTkLabel(
                item_frame,
                text=f"K·∫øt qu·∫£: {result['K·∫øt qu·∫£']}",
                font=ModernTheme.FONT_CAPTION,
                text_color=ModernTheme.TEXT_MUTED
            ).pack(anchor="w", padx=ModernTheme.SPACE_MD, pady=(0, ModernTheme.SPACE_SM))
    
    def create_recommendations(self, parent):
        """Create recommendations section"""
        rec_card = ModernCard(
            parent,
            title="üí° Khuy·∫øn Ngh·ªã",
            description="ƒê·ªÅ xu·∫•t d·ª±a tr√™n k·∫øt qu·∫£ ki·ªÉm tra"
        )
        rec_card.pack(fill="x", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_LG)
        
        stats = self.calculate_summary_stats()
        recommendations = []
        
        # Generate recommendations based on results
        if stats["failed"] > 0:
            recommendations.append({
                "type": "critical",
                "title": "üîß Kh·∫Øc Ph·ª•c L·ªói Nghi√™m Tr·ªçng",
                "description": f"C√≥ {stats['failed']} l·ªói nghi√™m tr·ªçng c·∫ßn ƒë∆∞·ª£c kh·∫Øc ph·ª•c ngay l·∫≠p t·ª©c tr∆∞·ªõc khi s·ª≠ d·ª•ng laptop."
            })
        
        if stats["warnings"] > 0:
            recommendations.append({
                "type": "warning",
                "title": "‚ö†Ô∏è Theo D√µi C·∫£nh B√°o",
                "description": f"C√≥ {stats['warnings']} c·∫£nh b√°o c·∫ßn ƒë∆∞·ª£c theo d√µi trong qu√° tr√¨nh s·ª≠ d·ª•ng."
            })
        
        if stats["success_rate"] > 90:
            recommendations.append({
                "type": "success",
                "title": "‚ú® Laptop Ch·∫•t L∆∞·ª£ng Cao",
                "description": "Laptop trong t√¨nh tr·∫°ng xu·∫•t s·∫Øc, an to√†n ƒë·ªÉ s·ª≠ d·ª•ng cho m·ªçi m·ª•c ƒë√≠ch."
            })
        elif stats["success_rate"] > 70:
            recommendations.append({
                "type": "info",
                "title": "üëç Laptop ·ªîn ƒê·ªãnh",
                "description": "Laptop ho·∫°t ƒë·ªông t·ªët, ph√π h·ª£p cho c√¥ng vi·ªác vƒÉn ph√≤ng v√† gi·∫£i tr√≠."
            })
        else:
            recommendations.append({
                "type": "warning",
                "title": "‚ö†Ô∏è C·∫ßn C√¢n Nh·∫Øc K·ªπ",
                "description": "Laptop c√≥ nhi·ªÅu v·∫•n ƒë·ªÅ, c·∫ßn ƒë√°nh gi√° k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh mua."
            })
        
        # Maintenance recommendations
        recommendations.append({
            "type": "info",
            "title": "üîß B·∫£o Tr√¨ ƒê·ªãnh K·ª≥",
            "description": "Th·ª±c hi·ªán v·ªá sinh laptop, c·∫≠p nh·∫≠t driver v√† ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng ƒë·ªãnh k·ª≥."
        })
        
        # Display recommendations
        for rec in recommendations:
            rec_colors = {
                "critical": ModernTheme.ERROR,
                "warning": ModernTheme.WARNING,
                "success": ModernTheme.SUCCESS,
                "info": ModernTheme.PRIMARY
            }
            
            rec_frame = ctk.CTkFrame(
                rec_card.content,
                fg_color=rec_colors.get(rec["type"], ModernTheme.PRIMARY),
                corner_radius=8
            )
            rec_frame.pack(fill="x", pady=ModernTheme.SPACE_SM)
            
            ctk.CTkLabel(
                rec_frame,
                text=rec["title"],
                font=ModernTheme.FONT_SUBHEADING,
                text_color="white"
            ).pack(anchor="w", padx=ModernTheme.SPACE_MD, pady=(ModernTheme.SPACE_SM, 0))
            
            ctk.CTkLabel(
                rec_frame,
                text=rec["description"],
                font=ModernTheme.FONT_BODY,
                text_color="white",
                wraplength=600
            ).pack(anchor="w", padx=ModernTheme.SPACE_MD, pady=(0, ModernTheme.SPACE_SM))
    
    def create_technical_details(self, parent):
        """Create technical details section"""
        tech_card = ModernCard(
            parent,
            title="üîß Chi Ti·∫øt K·ªπ Thu·∫≠t",
            description="Th√¥ng tin k·ªπ thu·∫≠t v√† metadata"
        )
        tech_card.pack(fill="x", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_LG)
        
        # Test environment
        env_frame = ctk.CTkFrame(tech_card.content, fg_color=ModernTheme.BACKGROUND)
        env_frame.pack(fill="x", pady=ModernTheme.SPACE_SM)
        
        ctk.CTkLabel(
            env_frame,
            text="üñ•Ô∏è M√¥i Tr∆∞·ªùng Test:",
            font=ModernTheme.FONT_SUBHEADING,
            text_color=ModernTheme.TEXT
        ).pack(anchor="w", padx=ModernTheme.SPACE_MD, pady=ModernTheme.SPACE_SM)
        
        import platform
        import psutil
        
        env_details = [
            f"H·ªá ƒëi·ªÅu h√†nh: {platform.system()} {platform.release()}",
            f"Phi√™n b·∫£n Python: {platform.python_version()}",
            f"Th·ªùi gian test: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}",
            f"T·ªïng th·ªùi gian: ~{len(self.results) * 2} ph√∫t (∆∞·ªõc t√≠nh)"
        ]
        
        for detail in env_details:
            ctk.CTkLabel(
                env_frame,
                text=f"‚Ä¢ {detail}",
                font=ModernTheme.FONT_CAPTION,
                text_color=ModernTheme.TEXT_MUTED
            ).pack(anchor="w", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_XS)
    
    def create_export_controls(self):
        """Create export controls"""
        export_frame = ctk.CTkFrame(self, fg_color=ModernTheme.SURFACE, corner_radius=ModernTheme.RADIUS)
        export_frame.grid(row=2, column=0, sticky="ew", padx=ModernTheme.SPACE_LG, pady=(0, ModernTheme.SPACE_LG))
        
        ctk.CTkLabel(
            export_frame,
            text="üì§ Xu·∫•t B√°o C√°o",
            font=ModernTheme.FONT_SUBHEADING,
            text_color=ModernTheme.TEXT
        ).pack(side="left", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_MD)
        
        # Export buttons
        button_frame = ctk.CTkFrame(export_frame, fg_color="transparent")
        button_frame.pack(side="right", padx=ModernTheme.SPACE_LG, pady=ModernTheme.SPACE_MD)
        
        export_options = [
            ("üìÑ PDF", self.export_pdf),
            ("üìä Excel", self.export_excel),
            ("üíæ JSON", self.export_json),
            ("üìã Text", self.export_text)
        ]
        
        for text, command in export_options:
            ctk.CTkButton(
                button_frame,
                text=text,
                command=command,
                fg_color=ModernTheme.PRIMARY,
                hover_color=ModernTheme.PRIMARY_HOVER,
                width=100,
                height=ModernTheme.BUTTON_HEIGHT
            ).pack(side="left", padx=ModernTheme.SPACE_SM)
    
    def calculate_summary_stats(self):
        """Calculate summary statistics"""
        total_tests = len(self.results)
        passed_tests = sum(1 for r in self.results.values() 
                          if r.get("Tr·∫°ng th√°i") == "T·ªët")
        failed_tests = sum(1 for r in self.results.values() 
                          if r.get("Tr·∫°ng th√°i") == "L·ªói")
        warnings = sum(1 for r in self.results.values() 
                      if r.get("Tr·∫°ng th√°i") == "C·∫£nh b√°o")
        
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        return {
            "total": total_tests,
            "passed": passed_tests,
            "failed": failed_tests,
            "warnings": warnings,
            "success_rate": success_rate
        }
    
    def export_pdf(self):
        """Export report as PDF"""
        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib import colors
            from reportlab.lib.units import inch
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title="L∆∞u b√°o c√°o PDF"
            )
            
            if not filename:
                return
            
            doc = SimpleDocTemplate(filename, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                spaceAfter=30,
                textColor=colors.HexColor(ModernTheme.PRIMARY)
            )
            
            story.append(Paragraph("üìä B√ÅO C√ÅO KI·ªÇM TRA LAPTOP", title_style))
            story.append(Paragraph(f"Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # Summary
            stats = self.calculate_summary_stats()
            summary_data = [
                ['T·ªïng s·ªë test', str(stats["total"])],
                ['Test ƒë·∫°t', f"{stats['passed']}/{stats['total']}"],
                ['T·ª∑ l·ªá th√†nh c√¥ng', f"{stats['success_rate']:.1f}%"],
                ['L·ªói nghi√™m tr·ªçng', str(stats["failed"])],
                ['C·∫£nh b√°o', str(stats["warnings"])]
            ]
            
            summary_table = Table(summary_data)
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(ModernTheme.PRIMARY)),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 14),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(summary_table)
            story.append(Spacer(1, 20))
            
            # Detailed results
            story.append(Paragraph("Chi ti·∫øt k·∫øt qu·∫£:", styles['Heading2']))
            
            for test_name, result in self.results.items():
                status = result.get("Tr·∫°ng th√°i", "Kh√¥ng r√µ")
                result_text = result.get("K·∫øt qu·∫£", "")
                
                story.append(Paragraph(f"<b>{test_name}</b>: {status}", styles['Normal']))
                if result_text:
                    story.append(Paragraph(f"K·∫øt qu·∫£: {result_text}", styles['Normal']))
                story.append(Spacer(1, 10))
            
            doc.build(story)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o PDF: {filename}")
            
        except ImportError:
            messagebox.showerror("L·ªói", "C·∫ßn c√†i ƒë·∫∑t reportlab: pip install reportlab")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t PDF: {str(e)}")
    
    def export_excel(self):
        """Export report as Excel"""
        try:
            import pandas as pd
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                title="L∆∞u b√°o c√°o Excel"
            )
            
            if not filename:
                return
            
            # Prepare data
            data = []
            for test_name, result in self.results.items():
                data.append({
                    'T√™n Test': test_name,
                    'Tr·∫°ng th√°i': result.get("Tr·∫°ng th√°i", ""),
                    'K·∫øt qu·∫£': result.get("K·∫øt qu·∫£", ""),
                    'Chi ti·∫øt': result.get("Chi ti·∫øt", "")
                })
            
            df = pd.DataFrame(data)
            
            # Create Excel writer
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                # Summary sheet
                stats = self.calculate_summary_stats()
                summary_data = {
                    'Th·ªëng k√™': ['T·ªïng test', 'ƒê·∫°t', 'L·ªói', 'C·∫£nh b√°o', 'T·ª∑ l·ªá th√†nh c√¥ng'],
                    'Gi√° tr·ªã': [stats["total"], stats["passed"], stats["failed"], 
                               stats["warnings"], f"{stats['success_rate']:.1f}%"]
                }
                
                summary_df = pd.DataFrame(summary_data)
                summary_df.to_excel(writer, sheet_name='T·ªïng quan', index=False)
                
                # Detailed results sheet
                df.to_excel(writer, sheet_name='Chi ti·∫øt', index=False)
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o Excel: {filename}")
            
        except ImportError:
            messagebox.showerror("L·ªói", "C·∫ßn c√†i ƒë·∫∑t pandas v√† openpyxl: pip install pandas openpyxl")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t Excel: {str(e)}")
    
    def export_json(self):
        """Export report as JSON"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".json",
                filetypes=[("JSON files", "*.json")],
                title="L∆∞u b√°o c√°o JSON"
            )
            
            if not filename:
                return
            
            report_data = {
                "metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "version": "1.0",
                    "generator": "LaptopTester Pro"
                },
                "summary": self.calculate_summary_stats(),
                "results": self.results
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o JSON: {filename}")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t JSON: {str(e)}")
    
    def export_text(self):
        """Export report as plain text"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt")],
                title="L∆∞u b√°o c√°o Text"
            )
            
            if not filename:
                return
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=" * 60 + "\n")
                f.write("üìä B√ÅO C√ÅO KI·ªÇM TRA LAPTOP\n")
                f.write("=" * 60 + "\n\n")
                
                f.write(f"Ng√†y t·∫°o: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n")
                
                # Summary
                stats = self.calculate_summary_stats()
                f.write("T·ªîNG QUAN:\n")
                f.write("-" * 20 + "\n")
                f.write(f"T·ªïng s·ªë test: {stats['total']}\n")
                f.write(f"Test ƒë·∫°t: {stats['passed']}/{stats['total']}\n")
                f.write(f"T·ª∑ l·ªá th√†nh c√¥ng: {stats['success_rate']:.1f}%\n")
                f.write(f"L·ªói nghi√™m tr·ªçng: {stats['failed']}\n")
                f.write(f"C·∫£nh b√°o: {stats['warnings']}\n\n")
                
                # Detailed results
                f.write("CHI TI·∫æT K·∫æT QU·∫¢:\n")
                f.write("-" * 30 + "\n")
                
                for test_name, result in self.results.items():
                    f.write(f"\n{test_name}:\n")
                    f.write(f"  Tr·∫°ng th√°i: {result.get('Tr·∫°ng th√°i', 'Kh√¥ng r√µ')}\n")
                    if result.get("K·∫øt qu·∫£"):
                        f.write(f"  K·∫øt qu·∫£: {result['K·∫øt qu·∫£']}\n")
                    if result.get("Chi ti·∫øt"):
                        f.write(f"  Chi ti·∫øt: {result['Chi ti·∫øt']}\n")
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o Text: {filename}")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t Text: {str(e)}")

# Export class
__all__ = ['ReportGeneratorFrame']