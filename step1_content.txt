class PhysicalInspectionStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Kiểm Tra Ngoại Hình", 
            "Tình trạng vật lý phản ánh cách chủ cũ sử dụng máy. Các vết nứt, móp, bản lề lỏng hay ốc vít bị toét có thể là dấu hiệu máy bị rơi hoặc đã qua sửa chữa không chuyên nghiệp.", 
            "Kiểm tra vỏ máy, bản lề, cổng kết nối, ốc vít, tem bảo hành. Đánh giá tổng thể tình trạng vật lý.", **kwargs)
        self.create_inspection_checklist()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()
        self.mark_completed({"Kết quả": "Đã hiển thị checklist", "Trạng thái": "Sẵn sàng"}, auto_advance=False)
    
    def create_inspection_checklist(self):
        checklist_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        checklist_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        ctk.CTkLabel(checklist_frame, text=t("🔍 Checklist Kiểm Tra Ngoại Hình Chi Tiết"), font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Vỏ máy & Bản lề
        section1 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section1.pack(fill="x", padx=15, pady=5)
        ctk.CTkLabel(section1, text=t("💻 Vỏ Máy & Bản Lề:"), font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        for item in [
            "✓ Vỏ máy: Vết nứt, móp méo (đặc biệt góc máy)",
            "✓ Bản lề: Mở/đóng 10-15 lần, nghe tiếng kêu kèn kẹt",
            "✓ Bản lề giữ góc: Không rơ, không tự đóng",
            "✓ Vết nứt gần bản lề: DẤU HIỆU NGUY HIỂM"
        ]:
            ctk.CTkLabel(section1, text=item, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=25, pady=1)
        
        # Cổng kết nối
        section2 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section2.pack(fill="x", padx=15, pady=5)
        ctk.CTkLabel(section2, text=t("🔌 Cổng Kết Nối:"), font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        for item in [
            "✓ Cổng sạc: Cắm và lay nhẹ, KHÔNG được lỏng",
            "✓ USB: Cắm thử USB, kiểm tra độ chặt",
            "✓ HDMI/DisplayPort: Không bị lỏng lẻo",
            "✓ Audio jack: Cắm tai nghe thử"
        ]:
            ctk.CTkLabel(section2, text=item, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=25, pady=1)
        
        # Ốc vít & Tem
        section3 = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        section3.pack(fill="x", padx=15, pady=5)
        ctk.CTkLabel(section3, text=t("🔩 Ốc Vít & Tem Bảo Hành:"), font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        for item in [
            "✓ Ốc vít: Không toét đầu (dấu hiệu tháo lắp)",
            "✓ Tem bảo hành: Còn nguyên, không bị bóc",
            "✓ Serial number: Khớp với BIOS và sticker",
            "✓ Khe tản nhiệt: Không bị bịt tắc bụi"
        ]:
            ctk.CTkLabel(section3, text=item, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=25, pady=1)
        
        # ThinkPad đặc biệt
        thinkpad_frame = ctk.CTkFrame(checklist_frame, fg_color="#1E3A8A", border_width=2, border_color="#3B82F6")
        thinkpad_frame.pack(fill="x", padx=15, pady=10)
        ctk.CTkLabel(thinkpad_frame, text=t("🔴 LENOVO THINKPAD - KIỂM TRA ĐẶC BIỆT:"), font=Theme.BODY_FONT, text_color="#60A5FA").pack(anchor="w", padx=10, pady=5)
        for item in [
            "✓ Tem Lenovo chính hãng: Hologram, không nhòe",
            "✓ Sticker dưới đáy: COA Windows, Serial, Model",
            "✓ Asset tag: ThinkPad doanh nghiệp thường có",
            "✓ TrackPoint (nút đỏ): Hoạt động, không bị lỏng",
            "✓ ThinkLight/Đèn bàn phím: Test hoạt động",
            "✓ Khe Kensington Lock: Không bị gãy",
            "⚠️ Kiểm tra BIOS có bị khóa Computrace không!"
        ]:
            ctk.CTkLabel(thinkpad_frame, text=item, font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=25, pady=1)
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        question_text = t("Tình trạng vật lý tổng thể của máy như thế nào?")
        ctk.CTkLabel(self.result_container, text=question_text, font=Theme.SUBHEADING_FONT).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        btn1_text = t("Rất tốt")
        btn2_text = t("Tốt")
        btn3_text = t("Trung bình")
        btn4_text = t("Kém")
        
        ctk.CTkButton(button_bar, text=btn1_text, command=lambda: self.mark_completed({"Kết quả": btn1_text, "Trạng thái": "Tốt"}, auto_advance=True), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=5)
        ctk.CTkButton(button_bar, text=btn2_text, command=lambda: self.mark_completed({"Kết quả": btn2_text, "Trạng thái": "Tốt"}, auto_advance=True), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=5)
        ctk.CTkButton(button_bar, text=btn3_text, command=lambda: self.mark_completed({"Kết quả": btn3_text, "Trạng thái": "Cảnh báo"}, auto_advance=True), fg_color=Theme.WARNING, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=5)
        ctk.CTkButton(button_bar, text=btn4_text, command=lambda: self.mark_completed({"Kết quả": btn4_text, "Trạng thái": "Lỗi"}, auto_advance=True), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=5)

class BIOSCheckStep(BaseStepFrame):
