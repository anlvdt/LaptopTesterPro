import time
import math
import multiprocessing
import sys
import platform
import importlib.util
import os
import logging

import psutil

# C·ªë g·∫Øng import WMI, n·∫øu th·∫•t b·∫°i th√¨ b·ªè qua
try:
    if platform.system() == "Windows":
        import wmi
except ImportError:
    wmi = None

# Import enhanced hardware reader
try:
    from enhanced_hardware_reader_v2 import hardware_reader
except ImportError:
    hardware_reader = None

LHM_READER_PATH = os.path.join(os.path.dirname(__file__), "lhm_reader.py")
logger = logging.getLogger(__name__)

def stress_worker():
    """
    H√†m worker ƒë·ªÉ t·∫°o t·∫£i t√≠nh to√°n n·∫∑ng cho m·ªôt l√µi CPU.
    S·ª≠ d·ª•ng v√≤ng l·∫∑p v·ªõi bi·∫øn thay ƒë·ªïi ƒë·ªÉ tr√°nh b·ªã tr√¨nh bi√™n d·ªãch t·ªëi ∆∞u h√≥a.
    """
    x = 0
    while True:
        try:
            x += 0.0001
            math.sqrt(x * math.pi)
        except (OverflowError, ValueError):
            # Reset x n·∫øu n√≥ qu√° l·ªõn ho·∫∑c qu√° nh·ªè
            x = 0
        except Exception:
            # B·ªè qua c√°c l·ªói kh√¥ng mong mu·ªën kh√°c v√† ti·∫øp t·ª•c
            pass # pragma: no cover

def get_cpu_temperature():
    """
    L·∫•y nhi·ªát ƒë·ªô CPU ch√≠nh x√°c h∆°n.
    1. ∆Øu ti√™n WMI tr√™n Windows.
    2. Sau ƒë√≥ l√† psutil.
       - V·ªõi psutil, s·∫Ω l·∫•y nhi·ªát ƒë·ªô CAO NH·∫§T t·ª´ t·∫•t c·∫£ c√°c c·∫£m bi·∫øn CPU.
    3. S·ª≠ d·ª•ng round() thay v√¨ int() ƒë·ªÉ gi·ªØ ƒë·ªô ch√≠nh x√°c.
    4. Th√™m logging ƒë·ªÉ g·ª° l·ªói.

    Tr·∫£ v·ªÅ nhi·ªát ƒë·ªô Celsius ho·∫∑c None n·∫øu kh√¥ng th·ªÉ ƒë·ªçc.
    """
    # Ph∆∞∆°ng ph√°p 1: WMI (ch·ªâ d√†nh cho Windows, ƒë√°ng tin c·∫≠y h∆°n)
    if platform.system() == "Windows" and wmi:
        try:
            w = wmi.WMI(namespace="root\\wmi")
            temp_info = w.MSAcpi_ThermalZoneTemperature()
            if temp_info:
                # Nhi·ªát ƒë·ªô ƒë∆∞·ª£c tr·∫£ v·ªÅ ·ªü d·∫°ng deci-Kelvin
                temp_kelvin = temp_info[0].CurrentTemperature
                temp_celsius = (temp_kelvin / 10.0) - 273.15
                return round(temp_celsius, 1)
        except Exception as e:
            logger.warning(f"WMI temperature read failed: {e}. Falling back to psutil.")
            pass

    # Ph∆∞∆°ng ph√°p 2: psutil (ƒëa n·ªÅn t·∫£ng, k√©m tin c·∫≠y h∆°n)
    try:
        if hasattr(psutil, "sensors_temperatures"):
            temps = psutil.sensors_temperatures()
            if not temps:
                return None
            
            # T√¨m nhi·ªát ƒë·ªô cao nh·∫•t t·ª´ t·∫•t c·∫£ c√°c c·∫£m bi·∫øn CPU c√≥ th·ªÉ
            cpu_temps = []
            for key in ['coretemp', 'k10temp', 'acpi', 'cpu_thermal']:
                if key in temps:
                    for entry in temps[key]:
                        if entry.current is not None:
                            cpu_temps.append(entry.current)
            
            if cpu_temps:
                # Tr·∫£ v·ªÅ nhi·ªát ƒë·ªô cao nh·∫•t, l√†m tr√≤n ƒë·∫øn 1 ch·ªØ s·ªë th·∫≠p ph√¢n
                return round(max(cpu_temps), 1)

    except Exception as e:
        logger.error(f"psutil temperature read failed: {e}")
    
    return None

class LHM_Manager:
    """Qu·∫£n l√Ω vi·ªác ƒë·ªçc d·ªØ li·ªáu t·ª´ LibreHardwareMonitor ƒë·ªÉ tr√°nh import l·∫°i nhi·ªÅu l·∫ßn."""
    def __init__(self):
        self.lhm_module = None
        self._initialize()

    def _initialize(self):
        """Import v√† kh·ªüi t·∫°o module lhm_reader m·ªôt l·∫ßn duy nh·∫•t."""
        if not os.path.exists(LHM_READER_PATH):
            logger.warning("lhm_reader.py not found. LHM stats will be unavailable.")
            return
        try:
            spec = importlib.util.spec_from_file_location("lhm_reader", LHM_READER_PATH)
            self.lhm_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(self.lhm_module)
            logger.info("LHM_Manager initialized successfully.")
        except Exception as e:
            logger.error(f"Failed to initialize LHM_Manager: {e}")
            self.lhm_module = None

    def get_stats(self):
        """L·∫•y th√¥ng s·ªë CPU t·ª´ LibreHardwareMonitor n·∫øu c√≥."""
        if not self.lhm_module:
            return {}
        data = self.lhm_module.get_lhm_data()
        cpu, _ = self.lhm_module.extract_cpu_gpu_info(data)
        return cpu

def run_cpu_stress_test(queue, duration_seconds=60):
    """
    Ch·∫°y CPU stress test v·ªõi monitoring chi ti·∫øt.
    """
    try:
        # Th√¥ng tin CPU ban ƒë·∫ßu
        cpu_count = multiprocessing.cpu_count()
        queue.put({'type': 'status', 'message': f'Ph√°t hi·ªán {cpu_count} l√µi CPU. B·∫Øt ƒë·∫ßu stress test...'})
        
        # ƒêo baseline tr∆∞·ªõc khi test
        time.sleep(1)
        baseline_cpu = psutil.cpu_percent(interval=1)
        baseline_temp = get_cpu_temperature()
        
        queue.put({'type': 'baseline', 'data': {
            'cpu_cores': cpu_count,
            'baseline_cpu': baseline_cpu,
            'baseline_temp': baseline_temp
        }})
        
        # B·∫Øt ƒë·∫ßu stress workers
        workers = []
        for i in range(cpu_count):
            try:
                worker = multiprocessing.Process(target=stress_worker)
                worker.daemon = True
                worker.start()
                workers.append(worker)
                queue.put({'type': 'worker_started', 'worker_id': i})
            except Exception as e:
                queue.put({'type': 'error', 'message': f'L·ªói kh·ªüi ƒë·ªông worker {i}: {str(e)}'})
        
        if not workers:
            raise Exception("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông worker processes")
        
        queue.put({'type': 'status', 'message': f'ƒê√£ kh·ªüi ƒë·ªông {len(workers)} processes'})
        
        # Kh·ªüi t·∫°o LHM Manager v√† Enhanced Hardware Reader
        lhm_manager = LHM_Manager()
        
        # Monitoring loop
        start_time = time.time()
        max_temp = 0
        max_cpu_usage = 0
        temp_readings = []
        cpu_readings = []
        
        while time.time() - start_time < duration_seconds:
            current_time = time.time() - start_time
            progress = current_time / duration_seconds
            
            # ƒê·ªçc CPU usage
            cpu_usage = psutil.cpu_percent(interval=1)
            cpu_readings.append(cpu_usage)
            max_cpu_usage = max(max_cpu_usage, cpu_usage)
            
            # ƒê·ªçc nhi·ªát ƒë·ªô, t·∫ßn s·ªë, power t·ª´ Enhanced Hardware Reader ho·∫∑c LHM
            temp = None
            clock = None
            power = None
            load = None
            
            # Th·ª≠ Enhanced Hardware Reader tr∆∞·ªõc
            if hardware_reader:
                try:
                    cpu_info = hardware_reader.get_cpu_info_comprehensive()
                    temp = cpu_info.get('temperature')
                    clock = cpu_info.get('current_clock')
                    power = cpu_info.get('power')
                    load = cpu_info.get('load')
                except Exception as e:
                    logger.warning(f"Enhanced hardware reader failed: {e}")
            
            # Fallback to LHM n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
            if temp is None or clock is None:
                lhm_stats = lhm_manager.get_stats()
                if temp is None:
                    temp = lhm_stats.get('temp') or get_cpu_temperature()
                if clock is None:
                    clock = lhm_stats.get('clock')
                if power is None:
                    power = lhm_stats.get('power')
                if load is None:
                    load = lhm_stats.get('load')
            if temp is not None:
                temp_readings.append(temp)
                max_temp = max(max_temp, temp)
                temp_status = f"üå°Ô∏è {temp:.1f}¬∞C"
            else:
                temp_status = "üå°Ô∏è N/A"
            freq_status = f"‚ö° {clock:.0f} MHz" if clock else "‚ö° N/A"
            power_status = f"üîã {power:.1f}W" if power is not None else ""
            
            # G·ª≠i c·∫≠p nh·∫≠t
            queue.put({
                'type': 'update',
                'progress': progress,
                'cpu_usage': cpu_usage,
                'temperature': temp,
                'clock': clock,
                'power': power,
                'status': f'CPU: {cpu_usage:.1f}% | {temp_status} | {freq_status} {power_status}'
            })
            
            # C·∫£nh b√°o
            if temp and temp > 90:
                queue.put({'type': 'warning', 'message': f'‚ö†Ô∏è Nhi·ªát ƒë·ªô CPU r·∫•t cao: {temp:.1f}¬∞C!'})
            if power and power > 60:
                queue.put({'type': 'warning', 'message': f'‚ö†Ô∏è C√¥ng su·∫•t CPU cao: {power:.1f}W'})
            if clock and clock < 1000 and cpu_usage > 50:
                queue.put({'type': 'warning', 'message': f'‚ö†Ô∏è CPU c√≥ th·ªÉ ƒëang throttling (xung nh·ªãp th·∫•p khi t·∫£i cao)'})

        # D·ª´ng t·∫•t c·∫£ workers
        for worker in workers:
            worker.terminate()
            worker.join(timeout=1)
        
        # T√≠nh to√°n k·∫øt qu·∫£
        avg_cpu = sum(cpu_readings) / len(cpu_readings) if cpu_readings else 0
        avg_temp = sum(temp_readings) / len(temp_readings) if temp_readings else None
        
        result_data = {
            'duration': duration_seconds,
            'cpu_cores': cpu_count,
            'max_cpu_usage': max_cpu_usage,
            'avg_cpu_usage': round(avg_cpu, 2),
            'max_temperature': round(max_temp, 1) if max_temp > 0 else None,
            'avg_temperature': round(avg_temp, 1) if avg_temp is not None else None,
            'stable': max_cpu_usage > 80 and (max_temp < 90 if max_temp else True)
        }
        
        queue.put({'type': 'result', 'data': result_data})
        queue.put({'type': 'done'})
        
    except Exception as e:
        queue.put({'type': 'error', 'message': f'L·ªói CPU stress test: {str(e)}'})
        queue.put({'type': 'done'})