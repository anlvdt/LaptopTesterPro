# Enhanced frequency lock detection with scenario analysis
freq_locked = False
lock_scenario = "normal"
if max_freq and min_freq:
    freq_variation = ((max_freq - min_freq) / max_freq) * 100
    freq_locked = freq_variation < 5  # Less than 5% variation indicates locked frequency
    
    # Analyze lock scenario
    if freq_locked:
        base_freq = result_data.get('baseline_freq', 0)
        if min_freq < base_freq * 0.7:  # Locked at very low frequency
            lock_scenario = "power_saving_aggressive"
        elif min_freq < max_freq * 0.8:  # Locked below normal boost
            lock_scenario = "thermal_protection"
        elif max_temp and max_temp > 90:  # High temp + lock = thermal issue
            lock_scenario = "thermal_emergency"
        else:
            lock_scenario = "manufacturer_limit"

# Frequency lock analysis with scenario-specific recommendations
if freq_locked:
    if lock_scenario == "thermal_emergency":
        lock_frame = ctk.CTkFrame(self.results_frame, fg_color=Theme.ERROR)
        lock_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(lock_frame, text="üö® C·∫¢NH B√ÅO: KH√ìA XUNG DO QU√Å NHI·ªÜT", font=Theme.SUBHEADING_FONT, text_color="white").pack(pady=10)
        
        warning_frame = ctk.CTkFrame(lock_frame, fg_color="transparent")
        warning_frame.pack(fill="x", padx=15, pady=(0,15))
        
        ctk.CTkLabel(warning_frame, text="‚ö†Ô∏è NGUY HI·ªÇM: CPU b·ªã kh√≥a xung ƒë·ªÉ t·ª± b·∫£o v·ªá kh·ªèi h∆∞ h·ªèng!", font=Theme.BODY_FONT, text_color="white").pack(anchor="w")
        ctk.CTkLabel(warning_frame, text="‚Ä¢ Nhi·ªát ƒë·ªô qu√° cao c√≥ th·ªÉ l√†m h·ªèng CPU vƒ©nh vi·ªÖn", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        ctk.CTkLabel(warning_frame, text="‚Ä¢ C·∫¶N X·ª¨ L√ù NGAY: V·ªá sinh t·∫£n nhi·ªát, thay keo t·∫£n nhi·ªát", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        ctk.CTkLabel(warning_frame, text="‚Ä¢ KH√îNG N√äN m·ªü kh√≥a xung khi ch∆∞a s·ª≠a t·∫£n nhi·ªát", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        
    elif lock_scenario == "power_saving_aggressive":
        lock_frame = ctk.CTkFrame(self.results_frame, fg_color=Theme.WARNING)
        lock_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(lock_frame, text="üîã KH√ìA XUNG TI·∫æT KI·ªÜM ƒêI·ªÜN", font=Theme.SUBHEADING_FONT, text_color="white").pack(pady=10)
        
        info_frame = ctk.CTkFrame(lock_frame, fg_color="transparent")
        info_frame.pack(fill="x", padx=15, pady=(0,15))
        
        ctk.CTkLabel(info_frame, text="üìä Ph√¢n t√≠ch: CPU b·ªã kh√≥a ·ªü t·∫ßn s·ªë r·∫•t th·∫•p ƒë·ªÉ ti·∫øt ki·ªám pin", font=Theme.BODY_FONT, text_color="white").pack(anchor="w")
        ctk.CTkLabel(info_frame, text="‚Ä¢ C√≥ th·ªÉ do ch·∫ø ƒë·ªô ti·∫øt ki·ªám pin c·ª±c m·∫°nh", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        ctk.CTkLabel(info_frame, text="‚Ä¢ Hi·ªáu nƒÉng s·∫Ω gi·∫£m ƒë√°ng k·ªÉ", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        
        ctk.CTkLabel(info_frame, text="üí° Khuy·∫øn ngh·ªã: N√äN m·ªü kh√≥a ƒë·ªÉ c√≥ hi·ªáu nƒÉng t·ªët h∆°n", font=Theme.BODY_FONT, text_color="white").pack(anchor="w")
        ctk.CTkLabel(info_frame, text="‚Ä¢ Windows: Chuy·ªÉn sang High Performance mode", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        ctk.CTkLabel(info_frame, text="‚Ä¢ G√µ 'powercfg.cpl' ‚Üí Ch·ªçn 'High Performance'", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        
    elif lock_scenario == "manufacturer_limit":
        lock_frame = ctk.CTkFrame(self.results_frame, fg_color=Theme.INFO)
        lock_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(lock_frame, text="üè≠ KH√ìA XUNG C·ª¶A NH√Ä S·∫¢N XU·∫§T", font=Theme.SUBHEADING_FONT, text_color="white").pack(pady=10)
        
        info_frame = ctk.CTkFrame(lock_frame, fg_color="transparent")
        info_frame.pack(fill="x", padx=15, pady=(0,15))
        
        ctk.CTkLabel(info_frame, text="üìä Ph√¢n t√≠ch: Nh√† s·∫£n xu·∫•t c·ªë ƒë·ªãnh t·∫ßn s·ªë ƒë·ªÉ ·ªïn ƒë·ªãnh", font=Theme.BODY_FONT, text_color="white").pack(anchor="w")
        ctk.CTkLabel(info_frame, text="‚Ä¢ Th∆∞·ªùng th·∫•y tr√™n laptop vƒÉn ph√≤ng", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        ctk.CTkLabel(info_frame, text="‚Ä¢ Gi√∫p ti·∫øt ki·ªám pin v√† gi·∫£m nhi·ªát", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        
        ctk.CTkLabel(info_frame, text="üí° Khuy·∫øn ngh·ªã: C√≥ th·ªÉ m·ªü kh√≥a n·∫øu c·∫ßn hi·ªáu nƒÉng cao", font=Theme.BODY_FONT, text_color="white").pack(anchor="w")
        ctk.CTkLabel(info_frame, text="‚Ä¢ Ki·ªÉm tra BIOS: CPU Frequency ‚Üí Auto/Dynamic", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)
        ctk.CTkLabel(info_frame, text="‚Ä¢ L∆∞u √Ω: Pin s·∫Ω h·∫øt nhanh h∆°n", font=Theme.SMALL_FONT, text_color="white").pack(anchor="w", padx=20)