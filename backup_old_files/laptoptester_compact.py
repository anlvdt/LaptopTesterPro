import os
import sys
import time
import platform
import socket
import locale
import subprocess
import threading
import multiprocessing
from queue import Queue
from PIL import Image
import psutil
import pywifi
import pygame
import wmi
import pythoncom
import customtkinter as ctk
import tkinter as tk

# Language and theme globals
CURRENT_LANG = "vi"
CURRENT_THEME = "dark"

# Language dictionary
LANG = {
    "vi": {
        "title": "LaptopTester - Ki·ªÉm tra laptop to√†n di·ªán",
        "overview": "T·ªïng quan",
        "start_test": "B·∫Øt ƒë·∫ßu ki·ªÉm tra",
        "individual_test": "Ki·ªÉm tra t·ª´ng th√†nh ph·∫ßn",
        "exit": "Tho√°t",
        "system_info": "Th√¥ng tin h·ªá th·ªëng",
        "license_check": "Ki·ªÉm tra b·∫£n quy·ªÅn",
        "storage_test": "Ki·ªÉm tra ·ªï c·ª©ng",
        "display_test": "Ki·ªÉm tra m√†n h√¨nh",
        "keyboard_test": "Ki·ªÉm tra b√†n ph√≠m",
        "ports_test": "Ki·ªÉm tra c·ªïng k·∫øt n·ªëi",
        "battery_test": "Ki·ªÉm tra pin",
        "audio_test": "Ki·ªÉm tra √¢m thanh",
        "camera_test": "Ki·ªÉm tra camera",
        "cpu_test": "Ki·ªÉm tra CPU",
        "gpu_test": "Ki·ªÉm tra GPU",
        "memory_test": "Ki·ªÉm tra RAM",
        "thermal_test": "Ki·ªÉm tra nhi·ªát ƒë·ªô",
        "summary": "T·ªïng k·∫øt"
    },
    "en": {
        "title": "LaptopTester - Comprehensive Laptop Testing",
        "overview": "Overview",
        "start_test": "Start Test",
        "individual_test": "Individual Component Test",
        "exit": "Exit",
        "system_info": "System Information",
        "license_check": "License Check",
        "storage_test": "Storage Test",
        "display_test": "Display Test",
        "keyboard_test": "Keyboard Test",
        "ports_test": "Ports Test",
        "battery_test": "Battery Test",
        "audio_test": "Audio Test",
        "camera_test": "Camera Test",
        "cpu_test": "CPU Test",
        "gpu_test": "GPU Test",
        "memory_test": "Memory Test",
        "thermal_test": "Thermal Test",
        "summary": "Summary"
    }
}

def get_text(key):
    return LANG[CURRENT_LANG].get(key, key)

def toggle_theme():
    global CURRENT_THEME
    CURRENT_THEME = "dark" if CURRENT_THEME == "light" else "light"
    ctk.set_appearance_mode(CURRENT_THEME)

def toggle_language():
    global CURRENT_LANG
    CURRENT_LANG = "en" if CURRENT_LANG == "vi" else "vi"

# Dynamic theme system
class Theme:
    @staticmethod
    def get_colors():
        # GitHub's proven color system - WCAG AAA compliant
        if CURRENT_THEME == "dark":
            return {
                "BACKGROUND": "transparent", "FRAME": "#161b22", "CARD": "#0d1117", 
                "BORDER": "#30363d", "SEPARATOR": "#30363d",
                "TEXT": "#f0f6fc", "TEXT_SECONDARY": "#8b949e"
            }
        else:
            return {
                "BACKGROUND": "transparent", "FRAME": "#f6f8fa", "CARD": "#ffffff", 
                "BORDER": "#d0d7de", "SEPARATOR": "#d0d7de",
                "TEXT": "#24292f", "TEXT_SECONDARY": "#656d76"
            }
    
    # GitHub's semantic colors - proven accessibility
    ACCENT="#0969da"; ACCENT_HOVER="#0550ae"
    SUCCESS="#1a7f37"; WARNING="#9a6700"; ERROR="#cf222e"; SKIP="#656d76"; SKIP_HOVER="#424a53"
    INFO="#0969da"; GRADIENT_START="#0969da"; GRADIENT_END="#0550ae"
    
    # Dynamic properties
    @classmethod
    def get_bg(cls): return cls.get_colors()["BACKGROUND"]
    @classmethod
    def get_frame(cls): return cls.get_colors()["FRAME"]
    @classmethod
    def get_card(cls): return cls.get_colors()["CARD"]
    @classmethod
    def get_text(cls): return cls.get_colors()["TEXT"]
    @classmethod
    def get_text_secondary(cls): return cls.get_colors()["TEXT_SECONDARY"]
    
    # Extra large fonts for accessibility
    TITLE_FONT=("Segoe UI", 40, "bold"); HEADING_FONT=("Segoe UI", 28, "bold"); SUBHEADING_FONT=("Segoe UI", 24, "bold")
    BODY_FONT=("Segoe UI", 18); SMALL_FONT=("Segoe UI", 16); KEY_FONT = ("Consolas", 16)
    # Responsive layout with proper spacing
    CORNER_RADIUS = 8; PADDING_X = 20; PADDING_Y = 15; BUTTON_HEIGHT = 50
    CARD_PADDING = 20; SECTION_SPACING = 15; ELEMENT_SPACING = 10

class IconManager:
    def __init__(self):
        self.CHECK = None; self.CROSS = None; self.SKIP_ICON = None

class BaseStepFrame(ctk.CTkFrame):
    def __init__(self, master, title, why_text, how_text, **kwargs):
        super().__init__(master, fg_color="transparent")
        self.title = title
        self.record_result = kwargs.get("record_result_callback")
        self.enable_next_callback = kwargs.get("enable_next_callback")
        self.go_to_next_step_callback = kwargs.get("go_to_next_step_callback")
        self.icon_manager = kwargs.get("icon_manager")
        self.all_results = kwargs.get("all_results")
        self._completed, self._skipped = False, False
        
        # Compact layout
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Main content without scrollbars
        self.action_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.action_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        self.action_frame.grid_columnconfigure(0, weight=1)

    def is_ready_to_proceed(self): return self._completed or self._skipped
    def mark_completed(self, result_data, auto_advance=False):
        self._completed = True
        if self.record_result:
            self.record_result(self.title, result_data)
        if auto_advance and self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def mark_skipped(self, result_data): 
        self._skipped = True
        if self.record_result:
            self.record_result(self.title, result_data)
        if self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def stop_tasks(self): pass

class SystemInfoStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Th√¥ng tin h·ªá th·ªëng", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üíª Th√¥ng tin h·ªá th·ªëng", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class LicenseCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra b·∫£n quy·ªÅn", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üîë Ki·ªÉm tra b·∫£n quy·ªÅn Windows", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class HardDriveHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra ·ªï c·ª©ng", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üíæ Ki·ªÉm tra ·ªï c·ª©ng", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class ScreenTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra m√†n h√¨nh", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üñ•Ô∏è Ki·ªÉm tra m√†n h√¨nh", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class KeyboardVisualTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra b√†n ph√≠m", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="‚å®Ô∏è Ki·ªÉm tra b√†n ph√≠m", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class PortsConnectivityStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra c·ªïng k·∫øt n·ªëi", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üîå Ki·ªÉm tra c·ªïng k·∫øt n·ªëi", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class BatteryHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra pin", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üîã Ki·ªÉm tra pin", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class SpeakerTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra √¢m thanh", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üîä Ki·ªÉm tra √¢m thanh", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class WebcamTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra camera", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üì∑ Ki·ªÉm tra camera", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class NetworkTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra m·∫°ng", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üåê Ki·ªÉm tra m·∫°ng", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class CPUStressTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra CPU", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üß† Ki·ªÉm tra CPU", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class HardDriveSpeedStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra t·ªëc ƒë·ªô ·ªï c·ª©ng", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üíΩ Ki·ªÉm tra t·ªëc ƒë·ªô ·ªï c·ª©ng", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class GPUStressTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra GPU", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üéÆ Ki·ªÉm tra GPU", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class ThermalPerformanceStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra nhi·ªát ƒë·ªô", "", "", **kwargs)
        ctk.CTkLabel(self.action_frame, text="üå°Ô∏è Ki·ªÉm tra nhi·ªát ƒë·ªô", font=Theme.HEADING_FONT).pack(pady=10)
        ctk.CTkButton(self.action_frame, text="Ho√†n th√†nh", height=Theme.BUTTON_HEIGHT,
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "OK", "Tr·∫°ng th√°i": "T·ªët"}, True)).pack(pady=10)

class SummaryStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "T·ªïng k·∫øt", "", "", **kwargs)
        self.title = "T·ªïng k·∫øt"
    
    def display_summary(self, results):
        for widget in self.action_frame.winfo_children(): 
            widget.destroy()
        
        ctk.CTkLabel(self.action_frame, text="üìä B√ÅO C√ÅO T·ªîNG K·∫æT", font=Theme.HEADING_FONT).pack(pady=20)
        
        total_tests = len(results)
        passed_tests = sum(1 for r in results.values() if r.get("Tr·∫°ng th√°i") == "T·ªët")
        success_rate = (passed_tests/total_tests*100) if total_tests > 0 else 0
        
        stats_text = f"T·ªïng s·ªë test: {total_tests}\nƒê·∫°t: {passed_tests}/{total_tests}\nT·ª∑ l·ªá th√†nh c√¥ng: {success_rate:.1f}%"
        ctk.CTkLabel(self.action_frame, text=stats_text, font=Theme.BODY_FONT).pack(pady=10)

class WizardFrame(ctk.CTkFrame):
    def __init__(self, master, mode, icon_manager, app=None):
        super().__init__(master, fg_color="transparent")
        self.mode = mode
        self.icon_manager = icon_manager
        self.app = app
        self.current_step = 0
        self.steps = self._get_steps_for_mode(mode)
        self.all_results = {}
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        self.create_header()
        self.create_navigation()
        self.show_step(0)
    
    def create_header(self):
        # Compact header
        header = ctk.CTkFrame(self, fg_color="transparent", height=50)
        header.grid(row=0, column=0, sticky="ew", padx=10, pady=5)
        header.grid_columnconfigure(1, weight=1)
        
        self.step_label = ctk.CTkLabel(header, text="", font=Theme.BODY_FONT)
        self.step_label.grid(row=0, column=0, padx=5)
        
        self.progress_bar = ctk.CTkProgressBar(header, height=8)
        self.progress_bar.grid(row=0, column=1, sticky="ew", padx=10)
        
        mode_text = "Chuy√™n gia" if self.mode == "expert" else "C∆° b·∫£n"
        self.mode_label = ctk.CTkLabel(header, text=mode_text, font=Theme.SMALL_FONT)
        self.mode_label.grid(row=0, column=2, padx=5)
    
    def create_navigation(self):
        # Compact navigation
        nav = ctk.CTkFrame(self, fg_color="transparent", height=50)
        nav.grid(row=2, column=0, sticky="ew", padx=10, pady=5)
        nav.grid_columnconfigure(1, weight=1)
        
        self.prev_btn = ctk.CTkButton(nav, text="‚Üê Tr∆∞·ªõc", width=150, height=55,
                                     command=self.go_previous, fg_color=Theme.SKIP, font=Theme.BODY_FONT)
        self.prev_btn.grid(row=0, column=0, padx=20)
        
        self.skip_btn = ctk.CTkButton(nav, text="B·ªè qua", width=150, height=55,
                                     command=self.skip_current_step, fg_color=Theme.WARNING, font=Theme.BODY_FONT)
        self.skip_btn.grid(row=0, column=1, padx=20)
        
        self.next_btn = ctk.CTkButton(nav, text="Ti·∫øp ‚Üí", width=150, height=55,
                                     command=self.go_to_next_step, fg_color=Theme.ACCENT, font=Theme.BODY_FONT)
        self.next_btn.grid(row=0, column=2, padx=20)
        
        self.update_navigation_state()
    
    def _get_steps_for_mode(self, mode):
        basic_steps = [
            ("Th√¥ng tin h·ªá th·ªëng", SystemInfoStep),
            ("B·∫£n quy·ªÅn Windows", LicenseCheckStep), 
            ("S·ª©c kh·ªèe ·ªï c·ª©ng", HardDriveHealthStep),
            ("Ki·ªÉm tra m√†n h√¨nh", ScreenTestStep),
            ("B√†n ph√≠m & Touchpad", KeyboardVisualTestStep),
            ("C·ªïng k·∫øt n·ªëi", PortsConnectivityStep),
            ("Pin laptop", BatteryHealthStep),
            ("Loa & Micro", SpeakerTestStep),
            ("Webcam", WebcamTestStep),
            ("M·∫°ng & WiFi", NetworkTestStep)
        ]
        
        expert_steps = basic_steps + [
            ("CPU Stress Test", CPUStressTestStep),
            ("T·ªëc ƒë·ªô ·ªï c·ª©ng", HardDriveSpeedStep), 
            ("GPU Stress Test", GPUStressTestStep),
            ("Thermal Monitor", ThermalPerformanceStep)
        ]
        
        return expert_steps if mode == "expert" else basic_steps
    
    def show_step(self, step_index):
        # Clear content area
        for widget in self.winfo_children():
            if widget not in [self.winfo_children()[0], self.winfo_children()[-1]]:
                widget.destroy()
        
        if not hasattr(self, 'prev_btn') or not self.prev_btn.winfo_exists():
            self.create_navigation()
        
        # Compact header update
        total_steps = len(self.steps)
        if step_index < total_steps:
            step_name, step_class = self.steps[step_index]
            self.step_label.configure(text=f"{step_index + 1}/{total_steps}: {step_name}")
            self.progress_bar.set((step_index + 1) / total_steps)
            
            step_frame = step_class(
                self,
                record_result_callback=self.record_result,
                enable_next_callback=self.enable_next,
                go_to_next_step_callback=self.go_to_next_step,
                icon_manager=self.icon_manager,
                all_results=self.all_results
            )
            step_frame.grid(row=1, column=0, sticky="nsew")
        else:
            self.step_label.configure(text=f"T·ªïng k·∫øt ({total_steps} b∆∞·ªõc)")
            self.progress_bar.set(1.0)
            
            summary_step = SummaryStep(
                self,
                record_result_callback=self.record_result,
                enable_next_callback=self.enable_next,
                go_to_next_step_callback=self.go_to_next_step,
                icon_manager=self.icon_manager,
                all_results=self.all_results
            )
            summary_step.display_summary(self.all_results)
            summary_step.grid(row=1, column=0, sticky="nsew")
        
        self.update_navigation_state()
    
    def skip_current_step(self):
        if self.current_step < len(self.steps):
            step_name, _ = self.steps[self.current_step]
            self.record_result(step_name, {"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"})
        self.go_to_next_step()
    
    def go_previous(self):
        if self.current_step > 0:
            self.current_step -= 1
            self.show_step(self.current_step)
            self.update_navigation_state()
    
    def record_result(self, step_name, result_data):
        self.all_results[step_name] = result_data
    
    def enable_next(self): pass
    
    def go_to_next_step(self):
        self.current_step += 1
        self.show_step(self.current_step)
        self.update_navigation_state()
    
    def update_navigation_state(self):
        if self.current_step <= 0:
            self.prev_btn.configure(state="disabled")
        else:
            self.prev_btn.configure(state="normal")
        
        self.next_btn.configure(state="normal")
        
        if self.current_step >= len(self.steps):
            self.skip_btn.configure(state="disabled")
            self.next_btn.configure(text="Ho√†n th√†nh")
        else:
            self.skip_btn.configure(state="normal")
            self.next_btn.configure(text="Ti·∫øp ‚Üí")

class OverviewFrame(ctk.CTkFrame):
    def __init__(self, master, mode_callback):
        super().__init__(master, fg_color="transparent")
        self.mode_callback = mode_callback
        self.setup_ui()
    
    def setup_ui(self):
        # Main container with proper spacing
        main = ctk.CTkFrame(self, fg_color="transparent")
        main.pack(fill="both", expand=True, padx=30, pady=30)
        main.grid_columnconfigure(0, weight=1)
        
        # Welcome section
        welcome = ctk.CTkFrame(main, fg_color=Theme.get_card(), corner_radius=12)
        welcome.pack(fill="x", pady=(0,30))
        welcome.grid_columnconfigure(0, weight=1)
        
        ctk.CTkLabel(welcome, text="üíª " + get_text("title"), 
                    font=Theme.TITLE_FONT, text_color=Theme.get_text()).pack(pady=20)
        
        # Description
        desc_text = "Ph·∫ßn m·ªÅm ki·ªÉm tra laptop to√†n di·ªán v·ªõi 15+ b∆∞·ªõc ki·ªÉm tra" if CURRENT_LANG == "vi" else "Comprehensive laptop testing software with 15+ test steps"
        ctk.CTkLabel(welcome, text=desc_text, font=Theme.BODY_FONT, 
                    text_color=Theme.get_text_secondary()).pack(pady=(0,20))
        
        # Features grid
        features = ctk.CTkFrame(main, fg_color="transparent")
        features.pack(fill="x", pady=(0,30))
        features.grid_columnconfigure((0,1,2), weight=1)
        
        # Feature cards
        features_data = [
            ("üéØ", "Ki·ªÉm tra c∆° b·∫£n" if CURRENT_LANG == "vi" else "Basic Testing", 
             "9 b∆∞·ªõc ki·ªÉm tra thi·∫øt y·∫øu" if CURRENT_LANG == "vi" else "9 essential test steps"),
            ("‚ö°", "Ki·ªÉm tra n√¢ng cao" if CURRENT_LANG == "vi" else "Advanced Testing", 
             "Stress test & benchmark" if CURRENT_LANG == "vi" else "Stress test & benchmark"),
            ("üìä", "B√°o c√°o chi ti·∫øt" if CURRENT_LANG == "vi" else "Detailed Reports", 
             "K·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß & xu·∫•t file" if CURRENT_LANG == "vi" else "Complete results & export")
        ]
        
        for i, (icon, title, desc) in enumerate(features_data):
            card = ctk.CTkFrame(features, fg_color=Theme.get_card(), corner_radius=8)
            card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
            
            ctk.CTkLabel(card, text=icon, font=("Segoe UI", 24)).pack(pady=(15,5))
            ctk.CTkLabel(card, text=title, font=Theme.SUBHEADING_FONT, text_color=Theme.get_text()).pack(pady=5)
            ctk.CTkLabel(card, text=desc, font=Theme.SMALL_FONT, text_color=Theme.get_text_secondary()).pack(pady=(0,15))
        
        # Action buttons with better spacing
        actions = ctk.CTkFrame(main, fg_color="transparent")
        actions.pack(fill="x")
        actions.grid_columnconfigure((0,1), weight=1)
        
        # Large buttons with anti-overlap spacing
        ctk.CTkButton(actions, text="üöÄ " + get_text("start_test"), height=80, font=Theme.SUBHEADING_FONT,
                     fg_color=Theme.SUCCESS, hover_color="#0E6B0E", corner_radius=12,
                     command=lambda: self.mode_callback("basic")).grid(row=0, column=0, padx=(0,25), pady=25, sticky="ew")
        
        ctk.CTkButton(actions, text="‚öôÔ∏è " + get_text("individual_test"), height=80, font=Theme.SUBHEADING_FONT,
                     fg_color=Theme.ACCENT, hover_color=Theme.ACCENT_HOVER, corner_radius=12,
                     command=lambda: self.mode_callback("individual")).grid(row=0, column=1, padx=(25,0), pady=25, sticky="ew")
        
        # Secondary action
        ctk.CTkButton(actions, text="‚úï " + get_text("exit"), height=60, font=Theme.BODY_FONT,
                     fg_color=Theme.ERROR, hover_color="#B71C1C", corner_radius=12,
                     command=self.quit_app).grid(row=1, column=0, columnspan=2, pady=(25,0), sticky="ew")
    
    def refresh_ui(self):
        for widget in self.winfo_children():
            widget.destroy()
        self.setup_ui()
    
    def quit_app(self):
        self.master.master.master.quit()

class IndividualTestFrame(ctk.CTkFrame):
    def __init__(self, master, mode_callback):
        super().__init__(master, fg_color="transparent")
        self.mode_callback = mode_callback
        self.setup_ui()
    
    def setup_ui(self):
        # Header with better spacing
        header = ctk.CTkFrame(self, fg_color="transparent")
        header.pack(fill="x", padx=20, pady=15)
        
        ctk.CTkLabel(header, text="‚öôÔ∏è " + get_text("individual_test"), 
                    font=Theme.HEADING_FONT, text_color=Theme.get_text()).pack(side="left")
        ctk.CTkButton(header, text="‚Üê " + get_text("overview"), width=100, height=32,
                     command=lambda: self.mode_callback("overview")).pack(side="right")
        
        # Test grid with proper spacing
        tests = [
            ("system_info", "üíª"), ("license_check", "üîë"), ("storage_test", "üíæ"), ("display_test", "üñ•Ô∏è"),
            ("keyboard_test", "‚å®Ô∏è"), ("ports_test", "üîå"), ("battery_test", "üîã"), ("audio_test", "üîä"),
            ("camera_test", "üì∑"), ("cpu_test", "üß†"), ("gpu_test", "üéÆ"), ("thermal_test", "üå°Ô∏è")
        ]
        
        grid = ctk.CTkFrame(self, fg_color="transparent")
        grid.pack(fill="both", expand=True, padx=20, pady=10)
        
        for i, (key, icon) in enumerate(tests):
            row, col = i // 4, i % 4
            grid.grid_columnconfigure(col, weight=1)
            
            btn = ctk.CTkButton(grid, text=f"{icon}\n{get_text(key)}", height=120, 
                               font=Theme.BODY_FONT, corner_radius=12,
                               command=lambda k=key: self.run_individual_test(k))
            btn.grid(row=row, column=col, padx=20, pady=20, sticky="ew")
    
    def refresh_ui(self):
        for widget in self.winfo_children():
            widget.destroy()
        self.setup_ui()
    
    def run_individual_test(self, test_key):
        self.mode_callback(f"test_{test_key}")

class ModeSelectionFrame(ctk.CTkFrame):
    def __init__(self, master, mode_callback, icon_manager):
        super().__init__(master, fg_color="transparent")
        self.mode_callback = mode_callback
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Large tabview for better accessibility
        self.tabview = ctk.CTkTabview(self, corner_radius=8, height=80)
        self.tabview.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        # Configure tab button height
        self.tabview._segmented_button.configure(height=60, font=Theme.SUBHEADING_FONT)
        
        self.setup_tabs()
        self.tabview.set(self.overview_tab)
    
    def setup_tabs(self):
        # Create tabs with current language
        self.overview_tab = get_text("overview")
        self.tabview.add(self.overview_tab)
        self.overview_frame = OverviewFrame(self.tabview.tab(self.overview_tab), self.mode_callback)
        self.overview_frame.pack(fill="both", expand=True)
        
        self.test_tab = get_text("individual_test")
        self.tabview.add(self.test_tab)
        self.test_frame = IndividualTestFrame(self.tabview.tab(self.test_tab), self.mode_callback)
        self.test_frame.pack(fill="both", expand=True)
        
        self.mode_tab = "Ch·ªçn ch·∫ø ƒë·ªô" if CURRENT_LANG == "vi" else "Select Mode"
        self.tabview.add(self.mode_tab)
        self.create_mode_selection()
    
    def create_mode_selection(self):
        mode_frame = self.tabview.tab(self.mode_tab)
        
        # Mode selection with language support
        title_text = "Ch·ªçn ch·∫ø ƒë·ªô ki·ªÉm tra" if CURRENT_LANG == "vi" else "Select Testing Mode"
        ctk.CTkLabel(mode_frame, text=title_text, font=Theme.HEADING_FONT, text_color=Theme.get_text()).pack(pady=30)
        
        buttons = ctk.CTkFrame(mode_frame, fg_color="transparent")
        buttons.pack(pady=20, padx=40, fill="x")
        
        basic_text = "üü¢ Ch·∫ø ƒë·ªô C∆° b·∫£n\nNhanh ch√≥ng, d·ªÖ s·ª≠ d·ª•ng" if CURRENT_LANG == "vi" else "üü¢ Basic Mode\nQuick and easy to use"
        expert_text = "üî¥ Ch·∫ø ƒë·ªô Chuy√™n gia\nƒê·∫ßy ƒë·ªß t√≠nh nƒÉng, chi ti·∫øt" if CURRENT_LANG == "vi" else "üî¥ Expert Mode\nFull features, detailed"
        
        ctk.CTkButton(buttons, text=basic_text, height=120, font=Theme.SUBHEADING_FONT,
                     fg_color=Theme.SUCCESS, hover_color="#0E6B0E", corner_radius=12,
                     command=lambda: self.mode_callback("basic")).pack(pady=20, fill="x")
        
        ctk.CTkButton(buttons, text=expert_text, height=120, font=Theme.SUBHEADING_FONT,
                     fg_color=Theme.ERROR, hover_color="#B71C1C", corner_radius=12,
                     command=lambda: self.mode_callback("expert")).pack(pady=20, fill="x")
    
    def refresh_ui(self):
        # Simply refresh the content of existing frames
        if hasattr(self, 'overview_frame'):
            self.overview_frame.refresh_ui()
        if hasattr(self, 'test_frame'):
            self.test_frame.refresh_ui()

class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title(get_text("title"))
        self.state('zoomed')
        self.minsize(1200, 800)
        
        self.icon_manager = IconManager()
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        self.current_main_frame = None
        self.all_results = {}

        # Dynamic header
        self.header = ctk.CTkFrame(self, fg_color=Theme.get_frame(), height=60, corner_radius=0)
        self.header.grid(row=0, column=0, sticky="ew")
        self.header.grid_columnconfigure(1, weight=1)
        
        # Title
        self.title_label = ctk.CTkLabel(self.header, text="üíª LaptopTester Pro", 
                                       font=Theme.HEADING_FONT, text_color=Theme.get_text())
        self.title_label.grid(row=0, column=0, padx=15, pady=15)
        
        # Controls
        controls = ctk.CTkFrame(self.header, fg_color="transparent")
        controls.grid(row=0, column=2, padx=15, pady=15)
        
        self.dark_btn = ctk.CTkButton(controls, text="üåô", width=70, height=55, font=Theme.BODY_FONT,
                                     command=self.toggle_theme_enhanced, fg_color=Theme.ACCENT)
        self.dark_btn.pack(side="left", padx=10)
        
        self.lang_btn = ctk.CTkButton(controls, text="VI", width=70, height=55, font=Theme.BODY_FONT,
                                     command=self.toggle_language_enhanced, fg_color=Theme.SUCCESS)
        self.lang_btn.pack(side="left", padx=10)
        
        self.exit_btn = ctk.CTkButton(controls, text="‚úï", width=70, height=55, font=Theme.BODY_FONT,
                                     command=self.quit_app, fg_color=Theme.ERROR)
        self.exit_btn.pack(side="left", padx=10)

        # Main content
        self.main_content = ctk.CTkFrame(self)
        self.main_content.grid(row=1, column=0, sticky="nsew")
        self.main_content.grid_columnconfigure(0, weight=1)
        self.main_content.grid_rowconfigure(0, weight=1)

        self.show_mode_selection()

    def toggle_theme_enhanced(self):
        toggle_theme()
        icon = "‚òÄÔ∏è" if CURRENT_THEME == "light" else "üåô"
        self.dark_btn.configure(text=icon)
        self.refresh_all_ui()
    
    def toggle_language_enhanced(self):
        toggle_language()
        text = "EN" if CURRENT_LANG == "en" else "VI"
        self.lang_btn.configure(text=text)
        self.title(get_text("title"))
        self.refresh_all_ui()
    
    def refresh_all_ui(self):
        # Update title
        self.title(get_text("title"))
        
        # Update header colors
        self.header.configure(fg_color=Theme.get_frame())
        self.title_label.configure(text_color=Theme.get_text())
        
        # Refresh current frame
        if hasattr(self.current_main_frame, 'refresh_ui'):
            self.current_main_frame.refresh_ui()

    def clear_window(self):
        if self.current_main_frame:
            self.current_main_frame.destroy()
        self.current_main_frame = None

    def show_mode_selection(self):
        self.clear_window()
        self.current_main_frame = ModeSelectionFrame(self.main_content, self.start_wizard, self.icon_manager)
        self.current_main_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)

    def start_wizard(self, mode):
        if mode == "individual":
            if hasattr(self.current_main_frame, 'tabview'):
                self.current_main_frame.tabview.set(self.current_main_frame.test_tab)
        elif mode == "overview":
            if hasattr(self.current_main_frame, 'tabview'):
                self.current_main_frame.tabview.set(self.current_main_frame.overview_tab)
        elif mode.startswith("test_"):
            test_key = mode[5:]
            self.run_individual_test(test_key)
        else:
            self.clear_window()
            self.current_main_frame = WizardFrame(self.main_content, mode, self.icon_manager, app=self)
            self.current_main_frame.grid(row=0, column=0, sticky="nsew")
    
    def run_individual_test(self, test_key):
        test_map = {
            "system_info": ("Th√¥ng tin h·ªá th·ªëng", SystemInfoStep),
            "license_check": ("Ki·ªÉm tra b·∫£n quy·ªÅn", LicenseCheckStep),
            "storage_test": ("Ki·ªÉm tra ·ªï c·ª©ng", HardDriveHealthStep),
            "display_test": ("Ki·ªÉm tra m√†n h√¨nh", ScreenTestStep),
            "keyboard_test": ("Ki·ªÉm tra b√†n ph√≠m", KeyboardVisualTestStep),
            "ports_test": ("Ki·ªÉm tra c·ªïng k·∫øt n·ªëi", PortsConnectivityStep),
            "battery_test": ("Ki·ªÉm tra pin", BatteryHealthStep),
            "audio_test": ("Ki·ªÉm tra √¢m thanh", SpeakerTestStep),
            "camera_test": ("Ki·ªÉm tra camera", WebcamTestStep),
            "cpu_test": ("Ki·ªÉm tra CPU", CPUStressTestStep),
            "gpu_test": ("Ki·ªÉm tra GPU", GPUStressTestStep),
            "memory_test": ("Ki·ªÉm tra RAM", HardDriveSpeedStep),
            "thermal_test": ("Ki·ªÉm tra nhi·ªát ƒë·ªô", ThermalPerformanceStep)
        }
        
        if test_key in test_map:
            self.clear_window()
            test_name, test_class = test_map[test_key]
            
            test_frame = ctk.CTkFrame(self.main_content, fg_color="transparent")
            test_frame.grid(row=0, column=0, sticky="nsew")
            test_frame.grid_columnconfigure(0, weight=1)
            test_frame.grid_rowconfigure(1, weight=1)
            
            # Header
            header = ctk.CTkFrame(test_frame, fg_color=Theme.FRAME, height=60)
            header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20,10))
            header.grid_columnconfigure(1, weight=1)
            
            ctk.CTkLabel(header, text=f"Test: {test_name}", font=Theme.SUBHEADING_FONT).grid(row=0, column=0, padx=20, pady=15)
            ctk.CTkButton(header, text="‚Üê Quay l·∫°i", command=self.show_mode_selection, 
                         width=80, height=24).grid(row=0, column=2, padx=5, pady=5)
            
            # Test content
            test_instance = test_class(
                test_frame,
                record_result_callback=lambda name, result: print(f"Result: {name} - {result}"),
                enable_next_callback=lambda: None,
                go_to_next_step_callback=lambda: None,
                icon_manager=self.icon_manager,
                all_results={}
            )
            test_instance.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
            
            self.current_main_frame = test_frame
    
    def quit_app(self):
        self.clear_window()
        self.destroy()

if __name__ == "__main__":
    try:
        ctk.set_appearance_mode(CURRENT_THEME)
        app = App()
        app.mainloop()
    except Exception as e:
        print(f"Error starting application: {e}")
        import traceback
        traceback.print_exc()