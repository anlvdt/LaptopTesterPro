#!/usr/bin/env python3
"""
LaptopTester Pro - Clean Main File
"""

import os
import sys
import time
import platform
import threading
import multiprocessing
import tempfile
import math
import logging
from queue import Queue
import webbrowser
from tkinter import messagebox
import tkinter as tk

# Third-party imports
import customtkinter as ctk
import psutil
import numpy as np
from PIL import Image

# Optional imports
try:
    import pygame
except ImportError:
    pygame = None

try:
    import cv2
except ImportError:
    cv2 = None

try:
    import keyboard
except ImportError:
    keyboard = None

try:
    if platform.system() == "Windows":
        import wmi
        import pythoncom
except ImportError:
    wmi = None
    pythoncom = None

# Configuration
CURRENT_LANG = "vi"
CURRENT_THEME = "dark"

# Language Dictionary
LANG = {
    "vi": {
        "title": "LaptopTester Pro - Ki·ªÉm tra laptop to√†n di·ªán",
        "overview": "T·ªïng quan",
        "start_test": "B·∫Øt ƒë·∫ßu",
        "individual_test": "Test ri√™ng l·∫ª", 
        "exit": "Tho√°t",
        "dark_mode": "T·ªëi",
        "language": "Ng√¥n ng·ªØ",
        "basic_mode": "C∆° b·∫£n",
        "expert_mode": "Chuy√™n gia",
        "hardware_fingerprint": "ƒê·ªãnh danh ph·∫ßn c·ª©ng",
        "license_check": "B·∫£n quy·ªÅn Windows",
        "system_info": "C·∫•u h√¨nh h·ªá th·ªëng",
        "harddrive_health": "S·ª©c kh·ªèe ·ªï c·ª©ng",
        "screen_test": "Ki·ªÉm tra m√†n h√¨nh",
        "keyboard_test": "B√†n ph√≠m & Touchpad",
        "battery_health": "Pin laptop",
        "audio_test": "Loa & Micro",
        "webcam_test": "Webcam",
        "cpu_stress": "CPU Stress Test",
        "harddrive_speed": "T·ªëc ƒë·ªô ·ªï c·ª©ng",
        "gpu_stress": "GPU Stress Test",
        "summary": "T·ªïng k·∫øt",
        "continue": "Ti·∫øp t·ª•c",
        "skip": "B·ªè qua",
        "good": "T·ªët",
        "error": "L·ªói",
        "previous": "Tr∆∞·ªõc",
        "next": "Ti·∫øp theo",
        "complete": "Ho√†n th√†nh",
        "ready": "S·∫µn s√†ng",
        "checking": "ƒêang ki·ªÉm tra",
        "testing": "ƒêang test",
        "loading": "ƒêang t·∫£i",
        "finished": "ƒê√£ xong",
        "start_test_btn": "B·∫Øt ƒë·∫ßu Test",
        "stop_test_btn": "D·ª´ng Test",
        "clear_canvas": "X√≥a v·∫øt v·∫Ω",
        "all_good": "T·∫•t c·∫£ ƒë·ªÅu t·ªët",
        "config_match": "C·∫•u h√¨nh kh·ªõp",
        "mismatch": "C√≥ sai l·ªách",
        "screen_ok": "M√†n h√¨nh b√¨nh th∆∞·ªùng",
        "input_ok": "Thi·∫øt b·ªã nh·∫≠p t·ªët",
        "audio_clear": "√Çm thanh r√µ r√†ng",
        "webcam_ok": "Webcam ho·∫°t ƒë·ªông t·ªët",
        "cpu_good": "CPU ·ªïn ƒë·ªãnh",
        "gpu_good": "GPU ·ªïn ƒë·ªãnh",
        "battery_good": "Pin t·ªët",
        "ready_to_test": "S·∫µn s√†ng test",
        "status_good": "T·ªët",
        "status_error": "L·ªói",
        "status_warning": "C·∫£nh b√°o",
        "status_skip": "B·ªè qua"
    },
    "en": {
        "title": "LaptopTester Pro - Comprehensive Laptop Testing",
        "overview": "Overview",
        "start_test": "Start",
        "individual_test": "Individual",
        "exit": "Exit",
        "dark_mode": "Dark",
        "language": "Language",
        "basic_mode": "Basic",
        "expert_mode": "Expert",
        "hardware_fingerprint": "Hardware Fingerprint",
        "license_check": "Windows License",
        "system_info": "System Info",
        "harddrive_health": "HDD Health",
        "screen_test": "Screen Test",
        "keyboard_test": "Keyboard & Touchpad",
        "battery_health": "Battery Health",
        "audio_test": "Audio Test",
        "webcam_test": "Webcam Test",
        "cpu_stress": "CPU Stress Test",
        "harddrive_speed": "HDD Speed",
        "gpu_stress": "GPU Stress Test",
        "summary": "Summary",
        "continue": "Continue",
        "skip": "Skip",
        "good": "Good",
        "error": "Error",
        "previous": "Previous",
        "next": "Next",
        "complete": "Complete",
        "ready": "Ready",
        "checking": "Checking",
        "testing": "Testing",
        "loading": "Loading",
        "finished": "Finished",
        "start_test_btn": "Start Test",
        "stop_test_btn": "Stop Test",
        "clear_canvas": "Clear Drawing",
        "all_good": "All good",
        "config_match": "Config matches",
        "mismatch": "Mismatch detected",
        "screen_ok": "Screen normal",
        "input_ok": "Input devices OK",
        "audio_clear": "Audio clear",
        "webcam_ok": "Webcam working",
        "cpu_good": "CPU stable",
        "gpu_good": "GPU stable",
        "battery_good": "Battery good",
        "ready_to_test": "Ready to test",
        "status_good": "Good",
        "status_error": "Error",
        "status_warning": "Warning",
        "status_skip": "Skipped"
    }
}

def get_text(key):
    return LANG[CURRENT_LANG].get(key, key)

def toggle_theme():
    global CURRENT_THEME
    CURRENT_THEME = "dark" if CURRENT_THEME == "light" else "light"
    ctk.set_appearance_mode(CURRENT_THEME)

def toggle_language():
    global CURRENT_LANG
    CURRENT_LANG = "en" if CURRENT_LANG == "vi" else "vi"

# Theme System
class Theme:
    BACKGROUND = "#0d1117"
    FRAME = "#161b22"
    CARD = "#21262d"
    BORDER = "#30363d"
    SEPARATOR = "#21262d"
    
    TEXT = "#f0f6fc"
    TEXT_SECONDARY = "#c9d1d9"
    ACCENT = "#58a6ff"
    ACCENT_HOVER = "#1f6feb"
    
    SUCCESS = "#238636"
    WARNING = "#d29922"
    ERROR = "#f85149"
    SKIP = "#6e7681"
    INFO = "#58a6ff"
    
    TITLE_FONT = ("Segoe UI", 36, "bold")
    HEADING_FONT = ("Segoe UI", 28, "bold")
    SUBHEADING_FONT = ("Segoe UI", 22, "bold")
    BODY_FONT = ("Segoe UI", 20)
    SMALL_FONT = ("Segoe UI", 18)
    BUTTON_FONT = ("Segoe UI", 19, "bold")
    CODE_FONT = ("Consolas", 19)
    
    CORNER_RADIUS = 6
    PADDING = 12
    BUTTON_HEIGHT = 36
    CARD_PADDING = 16
    SPACING = 8

# Simple App Class
class App(ctk.CTk):
    def __init__(self):
        super().__init__(fg_color=Theme.BACKGROUND)
        self.title(get_text("title"))
        self.state('zoomed')
        self.minsize(1200, 800)
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        self.create_header()
        self.create_main_content()
    
    def create_header(self):
        header = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=60, corner_radius=0)
        header.grid(row=0, column=0, sticky="ew")
        header.grid_columnconfigure(1, weight=1)
        
        # Title
        ctk.CTkLabel(header, text="üíª LaptopTester Pro", font=Theme.HEADING_FONT, text_color=Theme.TEXT).grid(row=0, column=0, padx=Theme.PADDING, pady=Theme.PADDING)
        
        # Controls
        controls = ctk.CTkFrame(header, fg_color="transparent")
        controls.grid(row=0, column=2, padx=Theme.PADDING, pady=Theme.PADDING)
        
        ctk.CTkButton(controls, text="üåô", command=self.toggle_theme, width=40, height=32).pack(side="left", padx=Theme.SPACING)
        ctk.CTkButton(controls, text="VI", command=self.toggle_language, width=40, height=32).pack(side="left", padx=Theme.SPACING)
        ctk.CTkButton(controls, text="‚úï", command=self.quit, width=32, height=32, fg_color=Theme.ERROR).pack(side="left", padx=Theme.SPACING)
    
    def create_main_content(self):
        main = ctk.CTkFrame(self, fg_color=Theme.BACKGROUND)
        main.grid(row=1, column=0, sticky="nsew")
        
        # Welcome message
        welcome = ctk.CTkFrame(main, fg_color=Theme.ACCENT, corner_radius=8)
        welcome.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(welcome, text="üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi LaptopTester Pro!", font=Theme.HEADING_FONT, text_color="white").pack(pady=20)
        ctk.CTkLabel(welcome, text="Ph·∫ßn m·ªÅm ki·ªÉm tra laptop chuy√™n nghi·ªáp", font=Theme.BODY_FONT, text_color="white").pack(pady=(0,20))
        
        # Mode selection
        modes = ctk.CTkFrame(main, fg_color=Theme.FRAME)
        modes.pack(fill="both", expand=True, padx=20, pady=20)
        modes.grid_columnconfigure((0,1), weight=1)
        
        # Basic mode
        basic = ctk.CTkFrame(modes, fg_color=Theme.CARD)
        basic.grid(row=0, column=0, padx=10, pady=20, sticky="nsew")
        
        ctk.CTkLabel(basic, text="‚öôÔ∏è " + get_text("basic_mode"), font=Theme.SUBHEADING_FONT, text_color=Theme.SUCCESS).pack(pady=15)
        ctk.CTkLabel(basic, text="Ki·ªÉm tra nhanh c√°c ch·ª©c nƒÉng ch√≠nh", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=10)
        ctk.CTkButton(basic, text="Ch·ªçn ch·∫ø ƒë·ªô c∆° b·∫£n", command=lambda: self.start_test("basic"), fg_color=Theme.SUCCESS, height=40).pack(pady=20)
        
        # Expert mode  
        expert = ctk.CTkFrame(modes, fg_color=Theme.CARD)
        expert.grid(row=0, column=1, padx=10, pady=20, sticky="nsew")
        
        ctk.CTkLabel(expert, text="üî• " + get_text("expert_mode"), font=Theme.SUBHEADING_FONT, text_color=Theme.ERROR).pack(pady=15)
        ctk.CTkLabel(expert, text="Ki·ªÉm tra chuy√™n s√¢u v·ªõi stress test", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=10)
        ctk.CTkButton(expert, text="Ch·ªçn ch·∫ø ƒë·ªô chuy√™n gia", command=lambda: self.start_test("expert"), fg_color=Theme.ERROR, height=40).pack(pady=20)
    
    def start_test(self, mode):
        messagebox.showinfo("Th√¥ng b√°o", f"B·∫Øt ƒë·∫ßu test ·ªü ch·∫ø ƒë·ªô {mode}")
    
    def toggle_theme(self):
        toggle_theme()
        # Refresh UI colors here if needed
    
    def toggle_language(self):
        toggle_language()
        # Refresh UI text here if needed
        self.title(get_text("title"))

if __name__ == "__main__":
    try:
        if platform.system() == "Windows":
            multiprocessing.freeze_support()
        
        ctk.set_appearance_mode(CURRENT_THEME)
        app = App()
        app.mainloop()
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()