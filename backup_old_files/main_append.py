# Append remaining steps 6-17 to main.py

# 6. Keyboard Test Step
class KeyboardTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B√†n ph√≠m & Touchpad", 
                        "Ki·ªÉm tra t·∫•t c·∫£ c√°c ph√≠m v√† touchpad ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.",
                        "G√µ th·ª≠ t·∫•t c·∫£ c√°c ph√≠m v√† test touchpad trong v√πng b√™n d∆∞·ªõi.", **kwargs)
        self.create_keyboard_test()
    
    def create_keyboard_test(self):
        test_frame = ctk.CTkFrame(self.action_frame)
        test_frame.pack(fill="x", padx=12, pady=8)
        
        ctk.CTkLabel(test_frame, text="‚å®Ô∏è Test b√†n ph√≠m & touchpad", 
                    font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=8)
        
        keyboard_frame = ctk.CTkFrame(test_frame, fg_color=Theme.BACKGROUND)
        keyboard_frame.pack(fill="x", padx=8, pady=4)
        
        ctk.CTkLabel(keyboard_frame, text="G√µ th·ª≠:", font=Theme.BODY_FONT).pack(anchor="w", padx=8, pady=4)
        test_area = ctk.CTkTextbox(keyboard_frame, height=60, placeholder_text="G√µ th·ª≠ t·∫•t c·∫£ c√°c ph√≠m...")
        test_area.pack(fill="x", padx=8, pady=4)
        
        touchpad_frame = ctk.CTkFrame(test_frame, fg_color=Theme.BACKGROUND)
        touchpad_frame.pack(fill="x", padx=8, pady=4)
        
        ctk.CTkLabel(touchpad_frame, text="Touchpad test:", font=Theme.BODY_FONT).pack(anchor="w", padx=8, pady=4)
        
        canvas = tk.Canvas(touchpad_frame, height=80, bg="#E0E0E0")
        canvas.pack(fill="x", padx=8, pady=4)
        
        def on_mouse_move(event):
            canvas.create_oval(event.x-2, event.y-2, event.x+2, event.y+2, fill="blue", outline="blue")
        
        canvas.bind("<Motion>", on_mouse_move)
        
        self.create_result_buttons()

# 7. Ports Connectivity Step
class PortsConnectivityStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "C·ªïng k·∫øt n·ªëi", 
                        "Ki·ªÉm tra c√°c c·ªïng USB, HDMI, audio ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.",
                        "C·∫Øm th·ª≠ thi·∫øt b·ªã v√†o t·ª´ng c·ªïng v√† ƒë√°nh d·∫•u k·∫øt qu·∫£.", **kwargs)
        self.create_ports_test()
    
    def create_ports_test(self):
        ports_frame = ctk.CTkFrame(self.action_frame)
        ports_frame.pack(fill="x", padx=12, pady=8)
        
        ctk.CTkLabel(ports_frame, text="üîå Ki·ªÉm tra c·ªïng k·∫øt n·ªëi", 
                    font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=8)
        
        ports = [
            "USB-A (c·∫Øm chu·ªôt/USB)",
            "USB-C (c·∫Øm s·∫°c/thi·∫øt b·ªã)", 
            "HDMI (k·∫øt n·ªëi m√†n h√¨nh)",
            "Audio 3.5mm (tai nghe)",
            "C·ªïng s·∫°c",
            "Ethernet (d√¢y m·∫°ng)"
        ]
        
        self.port_vars = {}
        for port in ports:
            port_frame = ctk.CTkFrame(ports_frame, fg_color=Theme.BACKGROUND)
            port_frame.pack(fill="x", padx=8, pady=2)
            
            var = tk.BooleanVar()
            self.port_vars[port] = var
            
            checkbox = ctk.CTkCheckBox(port_frame, text=port, variable=var, font=Theme.SMALL_FONT)
            checkbox.pack(side="left", padx=8, pady=4)
        
        self.create_result_buttons()

# 8. Battery Health Step
class BatteryHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Pin laptop", 
                        "ƒê√°nh gi√° t√¨nh tr·∫°ng pin v√† kh·∫£ nƒÉng gi·ªØ ƒëi·ªán c·ªßa laptop.",
                        "Th√¥ng tin pin s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng.", **kwargs)
        self.create_battery_test()
    
    def create_battery_test(self):
        battery_frame = ctk.CTkFrame(self.action_frame)
        battery_frame.pack(fill="x", padx=12, pady=8)
        
        ctk.CTkLabel(battery_frame, text="üîã Th√¥ng tin pin", 
                    font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=8)
        
        try:
            battery = psutil.sensors_battery()
            if battery:
                info_items = [
                    ("M·ª©c pin hi·ªán t·∫°i", f"{battery.percent:.1f}%"),
                    ("Tr·∫°ng th√°i", "ƒêang s·∫°c" if battery.power_plugged else "D√πng pin"),
                    ("Th·ªùi gian c√≤n l·∫°i", f"{battery.secsleft//3600}h {(battery.secsleft%3600)//60}m" if battery.secsleft != psutil.POWER_TIME_UNLIMITED else "Kh√¥ng gi·ªõi h·∫°n"),
                    ("S·ª©c kh·ªèe pin", "T·ªët (∆∞·ªõc t√≠nh)")
                ]
                
                for label, value in info_items:
                    item_frame = ctk.CTkFrame(battery_frame, fg_color=Theme.BACKGROUND)
                    item_frame.pack(fill="x", padx=8, pady=2)
                    
                    ctk.CTkLabel(item_frame, text=label, font=Theme.BODY_FONT).pack(side="left", padx=8, pady=4)
                    ctk.CTkLabel(item_frame, text=value, font=Theme.BODY_FONT).pack(side="right", padx=8, pady=4)
            else:
                ctk.CTkLabel(battery_frame, text="Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin pin", 
                           text_color=Theme.ERROR).pack(pady=8)
        except Exception as e:
            ctk.CTkLabel(battery_frame, text=f"L·ªói: {e}", text_color=Theme.ERROR).pack(pady=8)
        
        self.create_result_buttons()

# 9. Audio Test Step
class AudioTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Loa & Micro", 
                        "Ki·ªÉm tra h·ªá th·ªëng √¢m thanh: loa ph√°t v√† microphone thu √¢m.",
                        "Test loa b·∫±ng c√°ch ph√°t √¢m thanh v√† test micro b·∫±ng ghi √¢m.", **kwargs)
        self.create_audio_test()
    
    def create_audio_test(self):
        audio_frame = ctk.CTkFrame(self.action_frame)
        audio_frame.pack(fill="x", padx=12, pady=8)
        
        ctk.CTkLabel(audio_frame, text="üîä Test √¢m thanh", 
                    font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=8)
        
        speaker_frame = ctk.CTkFrame(audio_frame, fg_color=Theme.BACKGROUND)
        speaker_frame.pack(fill="x", padx=8, pady=4)
        
        ctk.CTkLabel(speaker_frame, text="Loa:", font=Theme.BODY_FONT).pack(side="left", padx=8, pady=4)
        ctk.CTkButton(speaker_frame, text="üéµ Test loa", width=100, height=28,
                     command=self.test_speaker, fg_color=Theme.ACCENT).pack(side="right", padx=8, pady=4)
        
        mic_frame = ctk.CTkFrame(audio_frame, fg_color=Theme.BACKGROUND)
        mic_frame.pack(fill="x", padx=8, pady=4)
        
        ctk.CTkLabel(mic_frame, text="Micro:", font=Theme.BODY_FONT).pack(side="left", padx=8, pady=4)
        ctk.CTkButton(mic_frame, text="üé§ Test micro", width=100, height=28,
                     command=self.test_microphone, fg_color=Theme.SUCCESS).pack(side="right", padx=8, pady=4)
        
        volume_frame = ctk.CTkFrame(audio_frame, fg_color=Theme.BACKGROUND)
        volume_frame.pack(fill="x", padx=8, pady=4)
        
        ctk.CTkLabel(volume_frame, text="√Çm l∆∞·ª£ng:", font=Theme.BODY_FONT).pack(side="left", padx=8, pady=4)
        volume_slider = ctk.CTkSlider(volume_frame, from_=0, to=100, number_of_steps=100)
        volume_slider.set(50)
        volume_slider.pack(side="right", padx=8, pady=4, fill="x", expand=True)
        
        self.create_result_buttons()
    
    def test_speaker(self):
        messagebox.showinfo("Test loa", "ƒêang ph√°t √¢m thanh test...\nB·∫°n c√≥ nghe th·∫•y √¢m thanh kh√¥ng?")
    
    def test_microphone(self):
        messagebox.showinfo("Test micro", "N√≥i v√†o micro...\nKi·ªÉm tra xem c√≥ thu ƒë∆∞·ª£c √¢m thanh kh√¥ng?")

# 10. Webcam Test Step
class WebcamTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Webcam", 
                        "Ki·ªÉm tra camera ho·∫°t ƒë·ªông v√† ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh cho video call.",
                        "Nh·∫•n 'B·∫Øt ƒë·∫ßu' ƒë·ªÉ m·ªü camera v√† ki·ªÉm tra ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh.", **kwargs)
        self.create_webcam_test()
    
    def create_webcam_test(self):
        webcam_frame = ctk.CTkFrame(self.action_frame)
        webcam_frame.pack(fill="x", padx=12, pady=8)
        
        ctk.CTkLabel(webcam_frame, text="üì∑ Test webcam", 
                    font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=8)
        
        preview_frame = ctk.CTkFrame(webcam_frame, height=120, fg_color=Theme.BACKGROUND)
        preview_frame.pack(fill="x", padx=8, pady=8)
        
        self.preview_label = ctk.CTkLabel(preview_frame, text="Camera ch∆∞a kh·ªüi ƒë·ªông\nNh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu", 
                                         font=Theme.BODY_FONT)
        self.preview_label.pack(expand=True)
        
        control_frame = ctk.CTkFrame(webcam_frame, fg_color=Theme.BACKGROUND)
        control_frame.pack(fill="x", padx=8, pady=4)
        
        ctk.CTkButton(control_frame, text="üì∑ B·∫Øt ƒë·∫ßu camera", 
                     command=self.start_camera,
                     fg_color=Theme.ACCENT, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=4)
        
        ctk.CTkButton(control_frame, text="‚èπÔ∏è D·ª´ng camera", 
                     command=self.stop_camera,
                     fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="right", padx=4)
        
        self.create_result_buttons()
    
    def start_camera(self):
        self.preview_label.configure(text="Camera ƒëang kh·ªüi ƒë·ªông...\nƒêang k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã")
        self.after(2000, lambda: self.preview_label.configure(text="‚úÖ Camera ho·∫°t ƒë·ªông\nKi·ªÉm tra ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh"))
    
    def stop_camera(self):
        self.preview_label.configure(text="Camera ƒë√£ d·ª´ng")

# 11. Network Test Step
class NetworkTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "M·∫°ng & WiFi", 
                        "Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng, WiFi v√† t·ªëc ƒë·ªô Internet ·ªïn ƒë·ªãnh.",
                        "Test s·∫Ω ki·ªÉm tra k·∫øt n·ªëi Internet v√† t·ªëc ƒë·ªô m·∫°ng.", **kwargs)
        self.create_network_test()
    
    def create_network_test(self):
        network_frame = ctk.CTkFrame(self.action_frame)
        network_frame.pack(fill="x", padx=12, pady=8)
        
        ctk.CTkLabel(network_frame, text="üì∂ Test m·∫°ng & WiFi", 
                    font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=8)
        
        try:
            import socket
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            
            info_items = [
                ("Hostname", hostname),
                ("Local IP", local_ip),
                ("Internet", "ƒêang ki·ªÉm tra...")
            ]
            
            for label, value in info_items:
                item_frame = ctk.CTkFrame(network_frame, fg_color=Theme.BACKGROUND)
                item_frame.pack(fill="x", padx=8, pady=2)
                
                ctk.CTkLabel(item_frame, text=label, font=Theme.BODY_FONT).pack(side="left", padx=8, pady=4)
                ctk.CTkLabel(item_frame, text=value, font=Theme.BODY_FONT).pack(side="right", padx=8, pady=4)
        
        except Exception as e:
            ctk.CTkLabel(network_frame, text=f"L·ªói: {e}", text_color=Theme.ERROR).pack(pady=8)
        
        ctk.CTkButton(network_frame, text="üöÄ Test t·ªëc ƒë·ªô m·∫°ng", 
                     command=self.test_speed,
                     fg_color=Theme.INFO, height=Theme.BUTTON_HEIGHT).pack(pady=8)
        
        self.create_result_buttons()
    
    def test_speed(self):
        messagebox.showinfo("Speed Test", "ƒêang test t·ªëc ƒë·ªô m·∫°ng...\n(T√≠nh nƒÉng demo)")