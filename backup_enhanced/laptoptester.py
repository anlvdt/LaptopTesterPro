import os
import sys
import time
import platform
import socket
import locale
import subprocess
import threading
import multiprocessing
from queue import Queue
from PIL import Image
import psutil
import pywifi
import pygame
import wmi
import pythoncom
import ai_analyzer  # Th√™m module AI
from app_overview import AppOverviewFrame

import customtkinter as ctk
import tkinter as tk

# --- ENHANCED THEME & ASSETS ---
class Theme:
    # Colors - Modern design system
    BACKGROUND="#F8FAFC"; FRAME="#FFFFFF"; CARD="#FFFFFF"; BORDER="#E2E8F0"; SEPARATOR = "#F1F5F9"
    TEXT="#0F172A"; TEXT_SECONDARY="#64748B"; ACCENT="#3B82F6"; ACCENT_HOVER="#2563EB"
    SUCCESS="#10B981"; WARNING="#F59E0B"; ERROR="#EF4444"; SKIP="#94A3B8"; SKIP_HOVER="#64748B"
    INFO="#06B6D4"; GRADIENT_START="#3B82F6"; GRADIENT_END="#8B5CF6"
    # Typography - Improved hierarchy
    TITLE_FONT=("Segoe UI", 42, "bold"); HEADING_FONT=("Segoe UI", 28, "bold"); SUBHEADING_FONT=("Segoe UI", 22, "bold")
    BODY_FONT=("Segoe UI", 16); SMALL_FONT=("Segoe UI", 14); KEY_FONT = ("Segoe UI", 11)
    # Layout - Better spacing
    CORNER_RADIUS = 12; PADDING_X = 24; PADDING_Y = 20; BUTTON_HEIGHT = 48
    CARD_PADDING = 20; SECTION_SPACING = 16; ELEMENT_SPACING = 12
import numpy as np
import webbrowser
from tkinter import messagebox
import logging
import tempfile
import keyboard
from collections import deque
from worker_disk import run_benchmark as run_disk_benchmark
from worker_cpu import run_cpu_stress_test
from worker_gpu import run_gpu_stress

# Utility function for asset path
def asset_path(rel_path):
    return os.path.join(os.path.dirname(__file__), 'assets', rel_path)

# Logger setup
logger = logging.getLogger("laptoptester")
if not logger.hasHandlers():
    logging.basicConfig(level=logging.INFO)
    logger.setLevel(logging.INFO)


# --- THEME AND ICON MANAGER ---

class IconManager:
    def __init__(self):
        self.CHECK = self._load_icon("icons/checkmark.png", (30, 30)); self.CROSS = self._load_icon("icons/cross.png", (30, 30))
        self.SKIP_ICON = self._load_icon("icons/skip.png", (30, 30)); self.WHY = self._load_icon("icons/lightbulb.png", (32, 32))
        self.HOW = self._load_icon("icons/checklist.png", (32, 32)); self.SHIELD = self._load_icon("icons/shield.png", (32, 32))
        self.BASIC_MODE = self._load_icon("icons/new_basic_mode.png", (100, 100)); self.EXPERT_MODE = self._load_icon("icons/new_expert_mode.png", (100, 100))
        self.ARROW_LEFT = self._load_icon("icons/new_arrow_left.png", (26, 26)); self.ARROW_RIGHT = self._load_icon("icons/new_arrow_right.png", (26, 26))
        self.SKIP_ARROW = self._load_icon("icons/new_skip_arrow.png", (26, 26)); self.HOME = self._load_icon("icons/home.png", (26, 26))
        self.EXPORT = self._load_icon("icons/export.png", (26, 26)); self.WIFI = self._load_icon("icons/wifi.png", (26, 26))
        self.CPU = self._load_icon("icons/cpu.png", (32, 32)); self.GPU = self._load_icon("icons/gpu.png", (32, 32))
        self.HDD = self._load_icon("icons/hdd.png", (32, 32))
        self.LOGO_SMALL = self._load_icon("icons/logo.png", (48, 48))

    def _load_icon(self, path, size):
        try: return ctk.CTkImage(Image.open(asset_path(path)), size=size)
        except Exception: return None

# --- Canonical BaseStepFrame from backup ---

# --- Canonical BaseStepFrame from backup ---
class BaseStepFrame(ctk.CTkFrame):
    def __init__(self, master, title, why_text, how_text, **kwargs):
        # This is the combined, correct __init__ from the original file's logic
        super().__init__(master, fg_color="transparent")
        self.grid_columnconfigure(1, weight=1); self.grid_rowconfigure(0, weight=1)
        self.title = title
        # Extract callbacks from kwargs
        self.record_result = kwargs.get("record_result_callback")
        self.enable_next_callback = kwargs.get("enable_next_callback")
        self.go_to_next_step_callback = kwargs.get("go_to_next_step_callback")
        self.icon_manager = kwargs.get("icon_manager")
        self.all_results = kwargs.get("all_results")
        
        self._completed, self._skipped = False, False
        self.after_id = None

        # Layout c√¢n b·∫±ng v√† t·∫≠n d·ª•ng kh√¥ng gian - C·∫£i ti·∫øn spacing
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=2)  # Guide panel
        self.grid_columnconfigure(1, weight=3)  # Action panel - r·ªông h∆°n
        # Guide container (left panel) - C·∫£i ti·∫øn padding v√† margin
        guide_container = ctk.CTkFrame(self, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        guide_container.grid(row=0, column=0, sticky="nsew", padx=(Theme.PADDING_X, Theme.ELEMENT_SPACING), pady=Theme.PADDING_Y)
        guide_container.grid_columnconfigure(0, weight=1)
        guide_container.grid_rowconfigure(0, weight=1)
        guide_container.grid_rowconfigure(1, weight=0)
        guide_container.grid_rowconfigure(2, weight=1)
        guide_container.grid_rowconfigure(3, weight=0)  # Tips frame
        why_frame = ctk.CTkFrame(guide_container, fg_color="transparent")
        why_frame.grid(row=0, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.CARD_PADDING)
        ctk.CTkLabel(why_frame, image=self.icon_manager.WHY, text=" T·∫°i sao c·∫ßn test?", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT, compound="left").pack(anchor="w")
        ctk.CTkLabel(why_frame, text=why_text, font=Theme.BODY_FONT, wraplength=380, justify="left", text_color=Theme.TEXT).pack(anchor="w", pady=(Theme.ELEMENT_SPACING,0))
        ctk.CTkFrame(guide_container, height=1, fg_color=Theme.SEPARATOR).grid(row=1, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.ELEMENT_SPACING)
        how_frame = ctk.CTkFrame(guide_container, fg_color="transparent")
        how_frame.grid(row=2, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=Theme.CARD_PADDING)
        ctk.CTkLabel(how_frame, image=self.icon_manager.HOW, text=" H∆∞·ªõng d·∫´n th·ª±c hi·ªán:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT, compound="left").pack(anchor="w")
        ctk.CTkLabel(how_frame, text=how_text, font=Theme.BODY_FONT, wraplength=380, justify="left", text_color=Theme.TEXT).pack(anchor="w", pady=(Theme.ELEMENT_SPACING,0))
        
        # Th√™m g·ª£i √Ω ƒë·ªçc k·∫øt qu·∫£ - C·∫£i ti·∫øn design
        tips_frame = ctk.CTkFrame(guide_container, fg_color="#E3F2FD", corner_radius=Theme.CORNER_RADIUS)
        tips_frame.grid(row=3, column=0, sticky="ew", padx=Theme.CARD_PADDING, pady=(Theme.SECTION_SPACING, Theme.CARD_PADDING))
        ctk.CTkLabel(tips_frame, text="üí° G·ª£i √Ω ƒë·ªçc k·∫øt qu·∫£:", font=Theme.BODY_FONT, text_color="#1565C0").pack(anchor="w", padx=Theme.ELEMENT_SPACING, pady=(Theme.ELEMENT_SPACING, 8))
        tips_text = "‚Ä¢ M√†u xanh: K·∫øt qu·∫£ t·ªët, an to√†n\n‚Ä¢ M√†u v√†ng: C·∫£nh b√°o, c·∫ßn ch√∫ √Ω\n‚Ä¢ M√†u ƒë·ªè: L·ªói nghi√™m tr·ªçng, c·∫ßn x·ª≠ l√Ω"
        ctk.CTkLabel(tips_frame, text=tips_text, font=Theme.SMALL_FONT, text_color="#424242", justify="left").pack(anchor="w", padx=Theme.ELEMENT_SPACING, pady=(0, Theme.ELEMENT_SPACING))
        # Action container (right panel) - C·∫£i ti·∫øn spacing v√† layout
        action_container = ctk.CTkFrame(self, fg_color="transparent")
        action_container.grid(row=0, column=1, sticky="nsew", padx=(Theme.ELEMENT_SPACING, Theme.PADDING_X), pady=Theme.PADDING_Y)
        action_container.grid_columnconfigure(0, weight=1)
        action_container.grid_rowconfigure(0, weight=1)
        # Action frame - bung h·∫øt kh√¥ng gian ho·∫∑c cƒÉn gi·ªØa
        self.action_frame_container = ctk.CTkFrame(action_container, fg_color="transparent")
        self.action_frame_container.grid(row=0, column=0, sticky="nsew")
        self.action_frame_container.grid_columnconfigure(0, weight=1)
        self.action_frame_container.grid_rowconfigure(0, weight=1)
        # Scrollable action frame - c·∫£i ti·∫øn layout
        self.action_canvas = tk.Canvas(self.action_frame_container, bg=Theme.CARD, highlightthickness=0)
        self.action_canvas.grid(row=0, column=0, sticky="nsew")
        self.action_scrollbar = tk.Scrollbar(self.action_frame_container, orient="vertical", command=self.action_canvas.yview)
        self.action_scrollbar.grid(row=0, column=1, sticky="ns")
        self.action_canvas.configure(yscrollcommand=self.action_scrollbar.set)
        self.action_frame = ctk.CTkFrame(self.action_canvas, fg_color=Theme.CARD, corner_radius=Theme.CORNER_RADIUS)
        self.action_window = self.action_canvas.create_window((0,0), window=self.action_frame, anchor="nw")
        self.action_frame.bind("<Configure>", lambda e: self.action_canvas.configure(scrollregion=self.action_canvas.bbox("all")))
        # Bung h·∫øt chi·ªÅu r·ªông v√† cƒÉn gi·ªØa n·ªôi dung
        self.action_canvas.bind("<Configure>", self._on_canvas_configure)
        # ƒê·∫£m b·∫£o action_frame lu√¥n bung h·∫øt
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.action_frame.grid_rowconfigure((0,1,2,3,4), weight=1)

    def _on_canvas_configure(self, event):
        """X·ª≠ l√Ω khi canvas thay ƒë·ªïi k√≠ch th∆∞·ªõc - ƒë·∫£m b·∫£o n·ªôi dung bung h·∫øt ho·∫∑c cƒÉn gi·ªØa"""
        canvas_width = event.width
        # Lu√¥n bung h·∫øt chi·ªÅu r·ªông canvas
        self.action_canvas.itemconfig(self.action_window, width=canvas_width-20)
        # CƒÉn gi·ªØa theo chi·ªÅu ngang
        self.action_canvas.coords(self.action_window, 10, 0)
    
    def on_show(self):
        # Force update of scrollable canvas and window to ensure all content is visible
        if hasattr(self, 'action_canvas') and hasattr(self, 'action_window'):
            self.action_canvas.update_idletasks()
            self.action_canvas.configure(scrollregion=self.action_canvas.bbox("all"))
            # Resize window to fit content if needed
            width = min(900, self.action_canvas.winfo_width())
            self.action_canvas.itemconfig(self.action_window, width=width)
        # Also ensure result_container and button bars are visible if present
        if hasattr(self, 'result_container'):
            self.result_container.update_idletasks()
        if hasattr(self, 'container'):
            self.container.update_idletasks()
    def is_ready_to_proceed(self): return self._completed or self._skipped
    def mark_completed(self, result_data, auto_advance=False):
        self._completed = True
        self._skipped = False
        if self.record_result:
            self.record_result(self.title, result_data)
        if auto_advance and self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def mark_skipped(self, result_data): 
        self._skipped = True; self._completed = False
        if self.record_result:
            self.record_result(self.title, result_data)
        if self.go_to_next_step_callback:
            self.go_to_next_step_callback()
    def handle_result_generic(self, is_ok, ok_data, bad_data):
        if hasattr(self, 'btn_yes'):
            self.btn_yes.configure(state="disabled")
        if hasattr(self, 'btn_no'):
            self.btn_no.configure(state="disabled")
        result = ok_data if is_ok else bad_data
        if is_ok:
            if hasattr(self, 'btn_yes'):
                self.btn_yes.configure(fg_color=Theme.ACCENT)
            self.mark_completed(result, auto_advance=True)
        else:
            if hasattr(self, 'btn_no'):
                self.btn_no.configure(fg_color=Theme.WARNING)
            self.mark_completed(result, auto_advance=True)
    def stop_tasks(self):
        if self.after_id: self.after_cancel(self.after_id); self.after_id = None
    def create_external_benchmark_box(self, parent_grid, row, column, benchmarks):
        box = ctk.CTkFrame(parent_grid, border_width=1, border_color=Theme.SEPARATOR, corner_radius=Theme.CORNER_RADIUS)
        box.grid(row=row, column=column, columnspan=3, sticky="ew", padx=20, pady=(10, 20))
        ctk.CTkLabel(box, text="T√πy ch·ªçn: Ch·∫°y Benchmark chuy√™n nghi·ªáp", font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(pady=(10,5), padx=15, anchor="w")
        ctk.CTkLabel(box, text="ƒê·ªÉ c√≥ k·∫øt qu·∫£ so s√°nh ti√™u chu·∫©n, b·∫°n c√≥ th·ªÉ d√πng c√°c ph·∫ßn m·ªÅm sau:", font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=(0,10), padx=15, anchor="w")
        btn_frame = ctk.CTkFrame(box, fg_color="transparent")
        btn_frame.pack(fill="x", padx=10, pady=(0, 10))
        for name, url in benchmarks.items():
            ctk.CTkButton(btn_frame, text=f"T·∫£i {name}", command=lambda u=url: webbrowser.open(u), font=Theme.BODY_FONT, height=45).pack(side="left", expand=True, padx=5)

class HardwareFingerprintStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(
            master,
            "ƒê·ªãnh Danh Ph·∫ßn C·ª©ng",
            "ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng nh·∫•t ƒë·ªÉ ch·ªëng l·ª´a ƒë·∫£o. C√°c th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë∆∞·ª£c ƒë·ªçc tr·ª±c ti·∫øp t·ª´ BIOS v√† linh ki·ªán ph·∫ßn c·ª©ng. Ch√∫ng **c·ª±c k·ª≥ kh√≥ l√†m gi·∫£** t·ª´ b√™n trong Windows.",
            "H√£y so s√°nh c√°c th√¥ng tin 'v√†ng' n√†y v·ªõi c·∫•u h√¨nh m√† ng∆∞·ªùi b√°n qu·∫£ng c√°o. N·∫øu c√≥ b·∫•t k·ª≥ s·ª± sai l·ªách n√†o, h√£y ƒë·∫∑t c√¢u h·ªèi v√† ki·ªÉm tra th·∫≠t k·ªπ.",
            **kwargs
        )
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.action_frame.grid_rowconfigure(0, weight=1)
        self.info_labels = {}
        self.loading_spinner = ctk.CTkProgressBar(self.action_frame, mode="indeterminate", progress_color=Theme.ACCENT)
        self.loading_spinner.grid(row=0, column=0, pady=20, padx=20, sticky="ew")
        self.loading_spinner.start()
        self.container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        self.container.grid_columnconfigure(1, weight=1)
        self.info_items = ["Model Laptop", "Serial Number", "CPU", "GPU", "Model ·ªî C·ª©ng", "Ng√†y BIOS"]
        for idx, item in enumerate(self.info_items):
            row_frame = ctk.CTkFrame(self.container, fg_color="transparent")
            row_frame.grid(row=idx, column=0, sticky="w", pady=10, padx=20)
            ctk.CTkLabel(row_frame, image=self.icon_manager.SHIELD, text="").pack(side="left", padx=(0, 10))
            ctk.CTkLabel(row_frame, text=f"{item}:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(side="left", padx=(0, 15))
            self.info_labels[item] = ctk.CTkLabel(row_frame, text="", justify="left", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY, wraplength=900)
            self.info_labels[item].pack(side="left")
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        threading.Thread(target=self.fetch_hardware_info, daemon=True).start()

    def fetch_hardware_info(self):
        hw_info = {k: "ƒêang ƒë·ªçc..." for k in self.info_items}
        if platform.system() == "Windows":
            pythoncom.CoInitializeEx(0)
            try:
                c = wmi.WMI()
                # L·∫•y th√¥ng tin h·ªá th·ªëng
                system_info = c.Win32_ComputerSystem()[0]
                hw_info["Model Laptop"] = f"{system_info.Manufacturer} {system_info.Model}"
                
                # L·∫•y th√¥ng tin BIOS
                bios = c.Win32_BIOS()[0]
                hw_info["Serial Number"] = getattr(bios, 'SerialNumber', 'N/A')
                
                # X·ª≠ l√Ω ng√†y BIOS an to√†n h∆°n
                try:
                    bios_date = getattr(bios, 'ReleaseDate', '')
                    if bios_date and len(bios_date) >= 8:
                        bios_date_str = bios_date.split('.')[0]
                        hw_info["Ng√†y BIOS"] = f"{bios_date_str[6:8]}/{bios_date_str[4:6]}/{bios_date_str[:4]}"
                    else:
                        hw_info["Ng√†y BIOS"] = "Kh√¥ng x√°c ƒë·ªãnh"
                except:
                    hw_info["Ng√†y BIOS"] = "Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c"
                
                # L·∫•y th√¥ng tin CPU - c·∫£i ti·∫øn
                try:
                    processors = c.Win32_Processor()
                    if processors:
                        cpu_name = processors[0].Name.strip()
                        hw_info["CPU"] = cpu_name
                        # L∆∞u th√™m th√¥ng tin CPU cho so s√°nh
                        self.bios_cpu_info = cpu_name
                    else:
                        hw_info["CPU"] = "Kh√¥ng t√¨m th·∫•y CPU"
                        self.bios_cpu_info = None
                except Exception as e:
                    hw_info["CPU"] = f"L·ªói ƒë·ªçc CPU: {e}"
                    self.bios_cpu_info = None
                
                # L·∫•y th√¥ng tin GPU
                try:
                    gpus = c.Win32_VideoController()
                    gpu_names = [gpu.Name for gpu in gpus if gpu.Name]
                    hw_info["GPU"] = "\n".join(gpu_names) if gpu_names else "Kh√¥ng t√¨m th·∫•y GPU"
                except:
                    hw_info["GPU"] = "L·ªói ƒë·ªçc GPU"
                
                # L·∫•y th√¥ng tin ·ªï c·ª©ng
                try:
                    drives = c.Win32_DiskDrive()
                    drive_models = [d.Model for d in drives if d.Model]
                    hw_info["Model ·ªî C·ª©ng"] = "\n".join(drive_models) if drive_models else "Kh√¥ng t√¨m th·∫•y ·ªï c·ª©ng"
                except:
                    hw_info["Model ·ªî C·ª©ng"] = "L·ªói ƒë·ªçc ·ªï c·ª©ng"
                    
            except Exception as e: 
                hw_info = {k: f"L·ªói WMI: {e}" for k in self.info_items}
                self.bios_cpu_info = None
            finally: 
                pythoncom.CoUninitialize()
        else: 
            hw_info = {k: "Ch·ªâ h·ªó tr·ª£ Windows" for k in self.info_items}
            self.bios_cpu_info = None
        if self.winfo_exists(): 
            self.after(0, self.display_info, hw_info)

    def display_info(self, hw_info):
        full_details = ""
        self.loading_spinner.grid_remove()
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        for key, value in hw_info.items():
            if key in self.info_labels:
                self.info_labels[key].configure(text=value)
            full_details += f"  - {key}: {value}\n"
        self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ l·∫•y ƒë·ªãnh danh ph·∫ßn c·ª©ng", "Tr·∫°ng th√°i": "T·ªët", "Chi ti·∫øt": f"Th√¥ng tin ƒë·ªãnh danh ph·∫ßn c·ª©ng:\n{full_details}"}, auto_advance=False)
        if hasattr(self, 'show_result_choices'):
            self.show_result_choices()
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="ƒê·ªãnh danh ph·∫ßn c·ª©ng ƒë√£ ho√†n th√†nh. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="Ti·∫øp t·ª•c", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Ti·∫øp t·ª•c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_skip = ctk.CTkButton(button_bar, text="B·ªè qua", image=self.icon_manager.SKIP_ICON if hasattr(self.icon_manager, 'SKIP_ICON') else None, compound="left", command=lambda: self.mark_skipped({"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"}), fg_color=Theme.SKIP, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_skip.pack(side="left", padx=10)
        self.result_container.lift()
        self.result_container.update_idletasks()
        if hasattr(self, 'action_canvas'):
            self.action_canvas.update_idletasks()
            self.action_canvas.configure(scrollregion=self.action_canvas.bbox("all"))
            self.action_canvas.yview_moveto(0)
        # Also ensure button bar is visible
        if hasattr(self, 'controls_frame'):
            self.controls_frame.update_idletasks()

class LicenseCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B·∫£n Quy·ªÅn Windows", "M·ªôt m√°y t√≠nh c√≥ b·∫£n quy·ªÅn Windows h·ª£p l·ªá ƒë·∫£m b·∫£o b·∫°n nh·∫≠n ƒë∆∞·ª£c c√°c b·∫£n c·∫≠p nh·∫≠t b·∫£o m·∫≠t quan tr·ªçng v√† tr√°nh c√°c r·ªßi ro ph√°p l√Ω.", "·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông ch·∫°y l·ªánh ki·ªÉm tra tr·∫°ng th√°i k√≠ch ho·∫°t c·ªßa Windows. K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.", **kwargs)
        self.action_frame.grid_rowconfigure(0, weight=1)
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.status_label = ctk.CTkLabel(self.action_frame, text="ƒêang ki·ªÉm tra...", font=Theme.SUBHEADING_FONT, text_color=Theme.TEXT_SECONDARY)
        self.status_label.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        threading.Thread(target=self.check_license, daemon=True).start()

    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="Ki·ªÉm tra b·∫£n quy·ªÅn ƒë√£ ho√†n th√†nh. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="Ti·∫øp t·ª•c", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Ti·∫øp t·ª•c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_skip = ctk.CTkButton(button_bar, text="B·ªè qua", image=self.icon_manager.SKIP_ICON if hasattr(self.icon_manager, 'SKIP_ICON') else None, compound="left", command=lambda: self.mark_skipped({"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"}), fg_color=Theme.SKIP, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_skip.pack(side="left", padx=10)

    def check_license(self):
        status, color, result_data = "Kh√¥ng th·ªÉ ki·ªÉm tra", Theme.WARNING, {"K·∫øt qu·∫£": "Kh√¥ng th·ªÉ ki·ªÉm tra", "Tr·∫°ng th√°i": "L·ªói"}
        if platform.system() == "Windows":
            try:
                startupinfo = subprocess.STARTUPINFO(); startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                output_bytes = subprocess.check_output("cscript //Nologo C:\\Windows\\System32\\slmgr.vbs /xpr", shell=False, stderr=subprocess.DEVNULL, startupinfo=startupinfo)
                try: result = output_bytes.decode('utf-8').lower()
                except UnicodeDecodeError: result = output_bytes.decode(locale.getpreferredencoding(), errors='ignore').lower()
                activated_strings = ["activated permanently", "k√≠ch ho·∫°t vƒ©nh vi·ªÖn", "the machine is permanently activated"]
                if any(s in result for s in activated_strings):
                    status, color, result_data = "Windows ƒë∆∞·ª£c k√≠ch ho·∫°t vƒ©nh vi·ªÖn", Theme.SUCCESS, {"K·∫øt qu·∫£": "ƒê√£ k√≠ch ho·∫°t vƒ©nh vi·ªÖn", "Tr·∫°ng th√°i": "T·ªët"}
                elif "will expire" in result or "s·∫Ω h·∫øt h·∫°n" in result:
                    expiry_date = result.split("on")[-1].strip() if "on" in result else result.split(" v√†o ")[-1].strip()
                    status, color, result_data = f"Windows s·∫Ω h·∫øt h·∫°n v√†o {expiry_date}", Theme.WARNING, {"K·∫øt qu·∫£": f"S·∫Ω h·∫øt h·∫°n ({expiry_date})", "Tr·∫°ng th√°i": "L·ªói"}
                else: status, color, result_data = "Windows ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t", Theme.ERROR, {"K·∫øt qu·∫£": "Ch∆∞a k√≠ch ho·∫°t", "Tr·∫°ng th√°i": "L·ªói"}
            except (subprocess.CalledProcessError, FileNotFoundError):
                status, color, result_data = "L·ªói khi ch·∫°y l·ªánh ki·ªÉm tra", Theme.ERROR, {"K·∫øt qu·∫£": "L·ªói khi ch·∫°y l·ªánh ki·ªÉm tra", "Tr·∫°ng th√°i": "L·ªói"}
        else:
            status, color, result_data = "Ch·ªâ h·ªó tr·ª£ Windows", Theme.SKIP, {"K·∫øt qu·∫£": "Ch·ªâ h·ªó tr·ª£ Windows", "Tr·∫°ng th√°i": "B·ªè qua"}
        if self.winfo_exists():
            self.after(0, self.update_ui, status, color, result_data)

    def update_ui(self, status, color, result_data):
        self.status_label.configure(text=status, text_color=color)
        self.mark_completed(result_data, auto_advance=False)
        self.show_result_choices()

class SystemInfoStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "C·∫•u H√¨nh Windows", "B∆∞·ªõc n√†y hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh m√† Windows nh·∫≠n di·ªán v√† t·ª± ƒë·ªông so s√°nh v·ªõi th√¥ng tin t·ª´ BIOS ƒë·ªÉ ph√°t hi·ªán sai l·ªách.", "ƒê·ªëi chi·∫øu th√¥ng tin d∆∞·ªõi ƒë√¢y v·ªõi b∆∞·ªõc tr∆∞·ªõc v√† v·ªõi th√¥ng tin qu·∫£ng c√°o. N·∫øu m·ªçi th·ª© kh·ªõp, ch·ªçn 'C·∫•u h√¨nh kh·ªõp'.", **kwargs)
        self.action_frame.grid_rowconfigure(0, weight=1)
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.loading_spinner = ctk.CTkProgressBar(self.action_frame, mode="indeterminate", progress_color=Theme.ACCENT)
        self.loading_spinner.grid(row=0, column=0, pady=20, padx=20, sticky="ew")
        self.container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=20)
        self.container.grid_columnconfigure(1, weight=1)
        self.info_labels = {}
        self.info_items = ["CPU", "RAM", "GPU", "·ªî c·ª©ng"]
        for i, item in enumerate(self.info_items):
            ctk.CTkLabel(self.container, text=f"{item}:", font=Theme.SUBHEADING_FONT).grid(row=i, column=0, padx=(0, 15), pady=12, sticky="nw")
            self.info_labels[item] = ctk.CTkLabel(self.container, text="", justify="left", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY, wraplength=600)
            self.info_labels[item].grid(row=i, column=1, padx=5, pady=12, sticky="w")
        self.comparison_frame = ctk.CTkFrame(self.container, fg_color="transparent")
        self.comparison_frame.grid(row=len(self.info_items), column=0, columnspan=2, pady=(20, 0), sticky="ew")
        ctk.CTkLabel(self.comparison_frame, text="So s√°nh t·ª± ƒë·ªông:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(anchor="w")
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        threading.Thread(target=self.fetch_info, daemon=True).start()

    def fetch_info(self):
        full_info = {k: "ƒêang ƒë·ªçc..." for k in self.info_items}
        try:
            full_info["RAM"] = f"{round(psutil.virtual_memory().total / (1024**3), 2)} GB"
            if platform.system() == "Windows":
                pythoncom.CoInitializeEx(0)
                try:
                    c = wmi.WMI()
                    full_info["CPU"] = c.Win32_Processor()[0].Name.strip()
                    full_info["GPU"] = "\n".join([gpu.Name for gpu in c.Win32_VideoController()])
                    disk_details = [f"- {d.Model} ({round(int(d.Size)/(1024**3))} GB)" for d in c.Win32_DiskDrive() if d.Size]
                    full_info["·ªî c·ª©ng"] = "\n".join(disk_details) if disk_details else "Kh√¥ng t√¨m th·∫•y"
                except Exception as e: full_info.update({k: f"L·ªói WMI: {e}" for k in ["CPU", "GPU", "·ªî c·ª©ng"]})
                finally: pythoncom.CoUninitialize()
            else: full_info.update({k: "Ch·ªâ h·ªó tr·ª£ Windows" for k in ["CPU", "GPU", "·ªî c·ª©ng"]})
        except Exception as e: full_info = {k: f"L·ªói: {e}" for k in self.info_items}
        if self.winfo_exists(): self.after(0, self.display_info, full_info)

    def display_info(self, info):
        self.full_info_text = ""
        self.loading_spinner.grid_remove()
        self.container.grid(row=1, column=0, sticky="nsew", padx=20, pady=20)
        for key, value in info.items():
            if key in self.info_labels:
                self.info_labels[key].configure(text=value)
            self.full_info_text += f"{key}: {value}\n"
        self.perform_comparison()
        self.show_result_choices()
        # Force UI update and scroll to top to ensure buttons are visible
        if hasattr(self, 'action_canvas'):
            self.action_canvas.update_idletasks()
            self.action_canvas.yview_moveto(0)
    def normalize_cpu_name(self, name):
        if not name or name == "N/A":
            return ""
        name = name.lower().strip()
        # Remove common suffixes and prefixes
        to_remove = ["(r)", "(tm)", "cpu", "@", "ghz", "mhz", "processor", 
                    "with radeon graphics", "with vega graphics", "apu", "mobile"]
        for term in to_remove: 
            name = name.replace(term, "")
        # Clean up extra spaces
        return " ".join(name.split())
    
    def extract_cpu_key(self, normalized_name):
        """Extract key CPU identifier like 'intel i5', 'amd ryzen 5', etc."""
        if not normalized_name:
            return "unknown"
        
        name = normalized_name.lower()
        
        # Intel patterns
        if "intel" in name:
            if "i3" in name: return "intel i3"
            elif "i5" in name: return "intel i5"
            elif "i7" in name: return "intel i7"
            elif "i9" in name: return "intel i9"
            elif "celeron" in name: return "intel celeron"
            elif "pentium" in name: return "intel pentium"
            elif "xeon" in name: return "intel xeon"
            else: return "intel"
        
        # AMD patterns
        elif "amd" in name:
            if "ryzen 3" in name: return "amd ryzen 3"
            elif "ryzen 5" in name: return "amd ryzen 5"
            elif "ryzen 7" in name: return "amd ryzen 7"
            elif "ryzen 9" in name: return "amd ryzen 9"
            elif "ryzen" in name: return "amd ryzen"
            elif "athlon" in name: return "amd athlon"
            elif "fx" in name: return "amd fx"
            else: return "amd"
        
        return "unknown"
    def perform_comparison(self):
        # L·∫•y th√¥ng tin CPU t·ª´ BIOS (t·ª´ HardwareFingerprintStep)
        cpu_bios = "N/A"
        hw_fingerprint_step = None
        
        # T√¨m HardwareFingerprintStep trong c√°c step ƒë√£ ch·∫°y
        try:
            # Ki·ªÉm tra xem c√≥ th√¥ng tin CPU t·ª´ BIOS kh√¥ng
            hw_data = self.all_results.get("ƒê·ªãnh Danh Ph·∫ßn C·ª©ng", {})
            hw_details = hw_data.get("Chi ti·∫øt", "")
            
            # Ph∆∞∆°ng ph√°p 1: T√¨m trong chi ti·∫øt
            if hw_details:
                for line in hw_details.splitlines():
                    line = line.strip()
                    if any(pattern in line.lower() for pattern in ["cpu:", "processor:", "- cpu"]):
                        parts = line.split(":", 1)
                        if len(parts) > 1:
                            cpu_bios = parts[1].strip()
                            break
            
            # Ph∆∞∆°ng ph√°p 2: L·∫•y tr·ª±c ti·∫øp t·ª´ WMI (backup)
            if cpu_bios == "N/A":
                if platform.system() == "Windows":
                    pythoncom.CoInitializeEx(0)
                    try:
                        c = wmi.WMI()
                        processors = c.Win32_Processor()
                        if processors:
                            cpu_bios = processors[0].Name.strip()
                    except:
                        pass
                    finally:
                        pythoncom.CoUninitialize()
        except Exception as e:
            print(f"L·ªói l·∫•y th√¥ng tin CPU BIOS: {e}")
        
        # Extract Windows CPU info
        cpu_win = "N/A"
        if hasattr(self, 'full_info_text'):
            for line in self.full_info_text.splitlines():
                if "CPU:" in line:
                    cpu_win = line.split(":", 1)[1].strip()
                    break
        
        # Improved CPU comparison
        if cpu_bios != "N/A" and cpu_win != "N/A":
            norm_bios = self.normalize_cpu_name(cpu_bios)
            norm_win = self.normalize_cpu_name(cpu_win)
            
            # Multiple comparison methods
            exact_match = norm_bios == norm_win
            contains_match = norm_bios in norm_win or norm_win in norm_bios
            
            # Extract key identifiers (Intel i5, AMD Ryzen, etc.)
            bios_key = self.extract_cpu_key(norm_bios)
            win_key = self.extract_cpu_key(norm_win)
            key_match = bios_key == win_key and bios_key != "unknown"
            
            match = exact_match or contains_match or key_match
        else:
            match = False
        
        # Display comparison results
        ctk.CTkLabel(self.comparison_frame, text=f"CPU (BIOS): {cpu_bios}", font=Theme.BODY_FONT, wraplength=800).pack(anchor="w")
        ctk.CTkLabel(self.comparison_frame, text=f"CPU (Windows): {cpu_win}", font=Theme.BODY_FONT, wraplength=800).pack(anchor="w")
        
        result_label = ctk.CTkLabel(self.comparison_frame, font=Theme.BODY_FONT)
        if cpu_bios == "N/A" or cpu_win == "N/A":
            result_label.configure(text="K·∫øt qu·∫£: Kh√¥ng th·ªÉ so s√°nh (thi·∫øu d·ªØ li·ªáu)", text_color=Theme.WARNING)
        elif match:
            result_label.configure(text="‚úÖ K·∫øt qu·∫£: Kh·ªõp", text_color=Theme.SUCCESS)
        else:
            result_label.configure(text="‚ö†Ô∏è C·∫£nh b√°o: C√≥ sai l·ªách - Ki·ªÉm tra l·∫°i!", text_color=Theme.ERROR)
        result_label.pack(anchor="w")
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="C·∫•u h√¨nh c√≥ kh·ªõp v·ªõi th√¥ng tin qu·∫£ng c√°o kh√¥ng?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="C√≥, c·∫•u h√¨nh kh·ªõp", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "C·∫•u h√¨nh kh·ªõp", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(button_bar, text="Kh√¥ng, c√≥ sai l·ªách", image=self.icon_manager.CROSS, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ sai l·ªách", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)
    
    def copy_to_clipboard(self): self.clipboard_clear(); self.clipboard_append(self.full_info_text)

class HardDriveHealthStep(BaseStepFrame):
    # Already patched above, but add scroll-to-top for visibility
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="[DEBUG] result_container", font=Theme.SMALL_FONT, fg_color="#FFDDDD").pack(fill="x")
        ctk.CTkLabel(self.result_container, text="·ªî c·ª©ng c√≥ ho·∫°t ƒë·ªông t·ªët kh√¥ng?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        ctk.CTkLabel(button_bar, text="[DEBUG] button_bar", font=Theme.SMALL_FONT, fg_color="#DDFFDD").pack(fill="x")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(
            button_bar,
            text="C√≥, t·∫•t c·∫£ ƒë·ªÅu t·ªët",
            image=self.icon_manager.CHECK,
            compound="left",
            command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "T·ªët", "Tr·∫°ng th√°i": "T·ªët", "Chi ti·∫øt": self.full_details}, {}),
            fg_color=Theme.SUCCESS,
            height=Theme.BUTTON_HEIGHT,
            font=Theme.BODY_FONT
        )
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(
            button_bar,
            text="Kh√¥ng, c√≥ l·ªói",
            image=self.icon_manager.CROSS,
            compound="left",
            command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ ·ªï c·ª©ng l·ªói", "Tr·∫°ng th√°i": "L·ªói", "Chi ti·∫øt": self.full_details}),
            fg_color=Theme.ERROR,
            height=Theme.BUTTON_HEIGHT,
            font=Theme.BODY_FONT
        )
        self.btn_no.pack(side="left", padx=10)
        self.btn_skip = ctk.CTkButton(
            button_bar,
            text="B·ªè qua",
            image=self.icon_manager.SKIP_ICON if hasattr(self.icon_manager, 'SKIP_ICON') else None,
            compound="left",
            command=lambda: self.mark_skipped({"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua", "Chi ti·∫øt": self.full_details}),
            fg_color=Theme.SKIP,
            height=Theme.BUTTON_HEIGHT,
            font=Theme.BODY_FONT
        )
        self.btn_skip.pack(side="left", padx=10)
        # Force result_container to front and update UI
        self.result_container.lift()
        self.result_container.update_idletasks()
        # Update scroll region and bring result_container into view
        if hasattr(self, 'action_canvas'):
            self.action_canvas.update_idletasks()
            self.action_canvas.configure(scrollregion=self.action_canvas.bbox("all"))
            self.action_canvas.yview_moveto(0)
        # Force UI update and scroll to top to ensure buttons are visible
        if hasattr(self, 'action_canvas'):
            self.action_canvas.update_idletasks()
            self.action_canvas.yview_moveto(0)
    def __init__(self, master, **kwargs):
        super().__init__(master, "S·ª©c Kh·ªèe ·ªî C·ª©ng (S.M.A.R.T)", "·ªî c·ª©ng s·∫Øp h·ªèng l√† m·ªëi r·ªßi ro m·∫•t d·ªØ li·ªáu c·ª±c l·ªõn. B∆∞·ªõc n√†y ƒë·ªçc 'b√°o c√°o y t·∫ø' (S.M.A.R.T.) c·ªßa ·ªï c·ª©ng ƒë·ªÉ ƒë√°nh gi√° ƒë·ªô b·ªÅn.", "Ch√∫ √Ω ƒë·∫øn m·ª•c 'Tr·∫°ng th√°i'. 'T·ªët' l√† b√¨nh th∆∞·ªùng. 'L·ªói/C·∫£nh b√°o' l√† r·ªßi ro cao. B∆∞·ªõc ti·∫øp theo s·∫Ω ki·ªÉm tra t·ªëc ƒë·ªô th·ª±c t·∫ø.", **kwargs)
        self.action_frame.grid_rowconfigure(0, weight=1)
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.loading_spinner = ctk.CTkProgressBar(self.action_frame, mode="indeterminate", progress_color=Theme.ACCENT)
        self.loading_spinner.grid(row=0, column=0, pady=20, padx=20, sticky="ew"); self.loading_spinner.start()
        self.drive_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.drive_container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        self.drive_container.grid_columnconfigure(0, weight=1)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        threading.Thread(target=self.fetch_drive_info, daemon=True).start()
    def fetch_drive_info(self):
        drives_info = []
        if platform.system() == "Windows":
            pythoncom.CoInitializeEx(0)
            try:
                c = wmi.WMI()
                drives = c.Win32_DiskDrive()
                if not drives: drives_info.append({"T√™n": "Kh√¥ng t√¨m th·∫•y ·ªï c·ª©ng", "Tr·∫°ng th√°i": "L·ªói"})
                else:
                    for drive in drives: drives_info.append({"T√™n": drive.Model, "Tr·∫°ng th√°i": "T·ªët" if drive.Status == "OK" else "L·ªói/C·∫£nh b√°o"})
            except Exception as e: drives_info.append({"T√™n": "Kh√¥ng th·ªÉ ƒë·ªçc S.M.A.R.T", "Tr·∫°ng th√°i": f"L·ªói: {e}"})
            finally: pythoncom.CoUninitialize()
        else: drives_info.append({"T√™n": "N/A", "Tr·∫°ng th√°i": "Ch·ªâ h·ªó tr·ª£ Windows"})
        if self.winfo_exists(): self.after(0, self.display_info, drives_info)
    def display_info(self, drives_info):
        self.loading_spinner.grid_remove()
        self.drive_container.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        full_details = ""; has_error = False
        for drive_data in drives_info:
            drive_frame = ctk.CTkFrame(self.drive_container, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS, border_width=1, border_color=Theme.BORDER)
            drive_frame.pack(fill="x", pady=10)
            status = drive_data.get('Tr·∫°ng th√°i', 'Kh√¥ng r√µ')
            color = Theme.SUCCESS if status == "T·ªët" else Theme.ERROR
            if status != "T·ªët": has_error = True
            ctk.CTkLabel(drive_frame, text=f"·ªî c·ª©ng: {drive_data.get('T√™n', 'N/A')}", font=Theme.SUBHEADING_FONT).pack(anchor="w", padx=20, pady=(15,5))
            ctk.CTkLabel(drive_frame, text=f"Tr·∫°ng th√°i: {status}", font=Theme.SUBHEADING_FONT, text_color=color).pack(anchor="w", padx=20, pady=(5,15))
            full_details += f"- ·ªî {drive_data.get('T√™n', 'N/A')}: {status}\n"
        self.full_details = full_details
        self.has_error = has_error
        self.show_result_choices()

    def show_result_choices(self):
        # Remove old widgets if any
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="·ªî c·ª©ng c√≥ ho·∫°t ƒë·ªông t·ªët kh√¥ng?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="C√≥, t·∫•t c·∫£ ƒë·ªÅu t·ªët", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "T·ªët", "Tr·∫°ng th√°i": "T·ªët", "Chi ti·∫øt": self.full_details}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(button_bar, text="Kh√¥ng, c√≥ l·ªói", image=self.icon_manager.CROSS, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ ·ªï c·ª©ng l·ªói", "Tr·∫°ng th√°i": "L·ªói", "Chi ti·∫øt": self.full_details}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)
        # Optionally, auto-select if only Windows is supported
        if not hasattr(self, 'has_error') or not hasattr(self, 'full_details'):
            return
        if not self.has_error and "Ch·ªâ h·ªó tr·ª£ Windows" in self.full_details:
            self.mark_completed({"K·∫øt qu·∫£": "Ch·ªâ h·ªó tr·ª£ Windows", "Tr·∫°ng th√°i": "B·ªè qua"}, auto_advance=False)

class ScreenTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "M√†n H√¨nh", "M√†n h√¨nh l√† m·ªôt trong nh·ªØng linh ki·ªán ƒë·∫Øt ti·ªÅn v√† d·ªÖ h·ªèng nh·∫•t. L·ªói ƒëi·ªÉm ch·∫øt, h·ªü s√°ng, √°m m√†u hay 'ung th∆∞ panel' (ch·ªõp gi·∫≠t ·ªü c·∫°nh vi·ªÅn) l√† nh·ªØng v·∫•n ƒë·ªÅ nghi√™m tr·ªçng.", "Nh·∫•n 'B·∫Øt ƒë·∫ßu Test' ƒë·ªÉ ch·∫°y test m√†n h√¨nh t·ª± ƒë·ªông. Test s·∫Ω hi·ªÉn th·ªã c√°c m√†u kh√°c nhau, nh·∫•n ESC ƒë·ªÉ d·ª´ng b·∫•t c·ª© l√∫c n√†o.", **kwargs)
        self.create_screen_test()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()
    
    def create_screen_test(self):
        test_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        test_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        ctk.CTkLabel(test_frame, text="Test M√†n H√¨nh T·ª± ƒê·ªông", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # G·ª£i √Ω ki·ªÉm tra
        tips_frame = ctk.CTkFrame(test_frame, fg_color=Theme.BACKGROUND)
        tips_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(tips_frame, text="G·ª£i √Ω ki·ªÉm tra:", font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        tips = [
            "‚Ä¢ Pixel ch·∫øt: Ch·∫•m ƒëen/s√°ng kh√¥ng ƒë·ªïi m√†u",
            "‚Ä¢ H·ªü s√°ng: V√πng s√°ng b·∫•t th∆∞·ªùng tr√™n n·ªÅn ƒëen",
            "‚Ä¢ √Åm m√†u: V√πng t·ªëi b·∫•t th∆∞·ªùng tr√™n n·ªÅn s√°ng",
            "‚Ä¢ Ch·ªõp gi·∫≠t: Nh·∫•p nh√°y ·ªü vi·ªÅn m√†n h√¨nh"
        ]
        for tip in tips:
            ctk.CTkLabel(tips_frame, text=tip, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=20)
        
        ctk.CTkButton(test_frame, text="B·∫Øt ƒë·∫ßu Test M√†n H√¨nh", command=self.start_screen_test, fg_color=Theme.ACCENT, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT).pack(pady=10)
        
        ctk.CTkLabel(test_frame, text="Test s·∫Ω hi·ªÉn th·ªã: ƒêen ‚Üí Tr·∫Øng ‚Üí ƒê·ªè ‚Üí Xanh L√° ‚Üí Xanh D∆∞∆°ng\nM·ªói m√†u 3 gi√¢y. Nh·∫•n ESC ƒë·ªÉ d·ª´ng.", font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=10)
    
    def start_screen_test(self):
        def run_test():
            colors = [("black", "white"), ("white", "black"), ("red", "white"), ("green", "black"), ("blue", "white")]
            names = ["ƒêen", "Tr·∫Øng", "ƒê·ªè", "Xanh L√°", "Xanh D∆∞∆°ng"]
            
            win = ctk.CTkToplevel(self)
            win.attributes("-fullscreen", True)
            win.attributes("-topmost", True)
            win.focus_force()
            
            label = ctk.CTkLabel(win, font=Theme.TITLE_FONT)
            label.place(relx=0.5, rely=0.5, anchor="center")
            
            self.test_running = True
            
            def stop_test(event=None):
                self.test_running = False
                if win.winfo_exists():
                    win.destroy()
            
            win.bind("<Escape>", stop_test)
            
            for i, ((bg, fg), name) in enumerate(zip(colors, names)):
                if not self.test_running:
                    break
                win.configure(fg_color=bg)
                label.configure(text=f"Test {name}\n({i+1}/5)\n\nESC ƒë·ªÉ d·ª´ng", text_color=fg)
                
                for _ in range(30):
                    if not self.test_running:
                        break
                    win.update()
                    time.sleep(0.1)
            
            if self.test_running:
                stop_test()
        
        threading.Thread(target=run_test, daemon=True).start()
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.result_container, text="B·∫°n c√≥ ph√°t hi·ªán ƒëi·ªÉm ch·∫øt, h·ªü s√°ng, √°m m√†u hay ch·ªõp gi·∫≠t b·∫•t th∆∞·ªùng kh√¥ng?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        self.btn_yes = ctk.CTkButton(button_bar, text="Kh√¥ng, m√†n h√¨nh b√¨nh th∆∞·ªùng", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "B√¨nh th∆∞·ªùng", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        
        self.btn_no = ctk.CTkButton(button_bar, text="C√≥, t√¥i th·∫•y v·∫•n ƒë·ªÅ", image=self.icon_manager.CROSS, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ v·∫•n ƒë·ªÅ", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)

class KeyboardVisualTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B√†n ph√≠m & Touchpad", "M·ªôt ph√≠m b·ªã li·ªát, k·∫πt, ho·∫∑c touchpad b·ªã lo·∫°n/m·∫•t c·ª≠ ch·ªâ ƒëa ƒëi·ªÉm s·∫Ω l√†m gi√°n ƒëo·∫°n ho√†n to√†n c√¥ng vi·ªác.", "**B√†n ph√≠m:** G√µ l·∫ßn l∆∞·ª£t t·∫•t c·∫£ c√°c ph√≠m. Ph√≠m b·∫°n g√µ s·∫Ω s√°ng l√™n m√†u xanh d∆∞∆°ng, v√† chuy·ªÉn sang xanh l√° khi ƒë∆∞·ª£c nh·∫£ ra.\n**Touchpad & Chu·ªôt:** V·∫Ω tr√™n v√πng test, th·ª≠ click tr√°i/ph·∫£i, cu·ªôn 2 ng√≥n tay.", **kwargs)
        
        self.key_widgets = {}
        self.pressed_keys = set()
        self.mouse_clicks = {'left': 0, 'right': 0}
        
        # Create keyboard layout
        self.create_keyboard_layout()
        
        # Create touchpad test area
        self.create_touchpad_test()
        
        # Start keyboard listening
        self.start_listening()
        
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=3, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()

    def create_keyboard_layout(self):
        keyboard_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        keyboard_frame.grid(row=0, column=0, sticky="nsew", padx=20, pady=10)
        self.action_frame.grid_rowconfigure(0, weight=1)
        
        ctk.CTkLabel(keyboard_frame, text="Layout B√†n Ph√≠m - Nh·∫•n ph√≠m ƒë·ªÉ test:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=10)
        
        # Function keys row
        self.create_key_row(keyboard_frame, [
            ('Esc', 1), ('F1', 1), ('F2', 1), ('F3', 1), ('F4', 1), ('F5', 1), 
            ('F6', 1), ('F7', 1), ('F8', 1), ('F9', 1), ('F10', 1), ('F11', 1), ('F12', 1), ('Del', 1)
        ])
        
        # Number row
        self.create_key_row(keyboard_frame, [
            ('`', 1), ('1', 1), ('2', 1), ('3', 1), ('4', 1), ('5', 1), ('6', 1), 
            ('7', 1), ('8', 1), ('9', 1), ('0', 1), ('-', 1), ('=', 1), ('Backspace', 2)
        ])
        
        # QWERTY row
        self.create_key_row(keyboard_frame, [
            ('Tab', 1.5), ('Q', 1), ('W', 1), ('E', 1), ('R', 1), ('T', 1), ('Y', 1), 
            ('U', 1), ('I', 1), ('O', 1), ('P', 1), ('[', 1), (']', 1), ('\\', 1.5)
        ])
        
        # ASDF row
        self.create_key_row(keyboard_frame, [
            ('Caps', 1.75), ('A', 1), ('S', 1), ('D', 1), ('F', 1), ('G', 1), ('H', 1), 
            ('J', 1), ('K', 1), ('L', 1), (';', 1), ("'", 1), ('Enter', 2.25)
        ])
        
        # ZXCV row
        self.create_key_row(keyboard_frame, [
            ('Shift', 2.25), ('Z', 1), ('X', 1), ('C', 1), ('V', 1), ('B', 1), ('N', 1), 
            ('M', 1), (',', 1), ('.', 1), ('/', 1), ('Shift', 2.75)
        ])
        
        # Bottom row
        self.create_key_row(keyboard_frame, [
            ('Ctrl', 1.25), ('Win', 1.25), ('Alt', 1.25), ('Space', 6.25), 
            ('Alt', 1.25), ('Fn', 1.25), ('Ctrl', 1.25), ('‚Üê', 1), ('‚Üë', 1), ('‚Üì', 1), ('‚Üí', 1)
        ])

    def create_key_row(self, parent, keys):
        row_frame = ctk.CTkFrame(parent, fg_color="transparent")
        row_frame.pack(fill="x", padx=5, pady=1)
        
        # Configure grid weights for proper stretching
        total_weight = sum(width for _, width in keys)
        for i, (_, width) in enumerate(keys):
            row_frame.grid_columnconfigure(i, weight=int(width * 100))
        
        for i, (key_text, width) in enumerate(keys):
            key_widget = ctk.CTkLabel(
                row_frame, 
                text=key_text, 
                font=Theme.KEY_FONT,
                fg_color=Theme.BORDER,
                text_color=Theme.TEXT,
                corner_radius=4,
                height=35
            )
            key_widget.grid(row=0, column=i, sticky="ew", padx=1, pady=1)
            
            # Map key to widget
            key_lower = key_text.lower()
            self.key_widgets[key_lower] = key_widget
            
            # Handle special key mappings
            if key_text == 'Space':
                self.key_widgets['space'] = key_widget
            elif key_text == 'Backspace':
                self.key_widgets['backspace'] = key_widget
            elif key_text == 'Enter':
                self.key_widgets['enter'] = key_widget
            elif key_text == 'Caps':
                self.key_widgets['caps lock'] = key_widget
            elif key_text == 'Win':
                self.key_widgets['windows'] = key_widget
                self.key_widgets['cmd'] = key_widget

    def create_touchpad_test(self):
        touchpad_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        touchpad_frame.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        self.action_frame.grid_rowconfigure(1, weight=1)
        
        ctk.CTkLabel(touchpad_frame, text="Test Touchpad & Chu·ªôt:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=10)
        
        # Instructions
        instructions = ctk.CTkLabel(
            touchpad_frame, 
            text="‚Ä¢ Di chuy·ªÉn chu·ªôt/touchpad tr√™n v√πng x√°m\n‚Ä¢ Click tr√°i v√† ph·∫£i ƒë·ªÉ test\n‚Ä¢ Th·ª≠ cu·ªôn 2 ng√≥n tay (touchpad)", 
            font=Theme.BODY_FONT, 
            text_color=Theme.TEXT_SECONDARY
        )
        instructions.pack(pady=5)
        
        # Test area
        test_area_frame = ctk.CTkFrame(touchpad_frame)
        test_area_frame.pack(fill="x", padx=20, pady=10)
        
        self.canvas = tk.Canvas(
            test_area_frame, 
            height=150, 
            bg="#E0E0E0", 
            highlightthickness=1,
            highlightbackground=Theme.BORDER
        )
        self.canvas.pack(fill="x", padx=10, pady=10)
        
        # Bind mouse events - c·∫£i thi·ªán v·ªõi focus v√† event handling
        self.canvas.bind("<Motion>", self.on_mouse_move)
        self.canvas.bind("<Button-1>", self.on_left_click)
        self.canvas.bind("<Button-3>", self.on_right_click)
        self.canvas.bind("<MouseWheel>", self.on_scroll)
        # Th√™m binding cho frame ƒë·ªÉ ƒë·∫£m b·∫£o events ho·∫°t ƒë·ªông
        test_area_frame.bind("<Button-1>", self.on_left_click)
        test_area_frame.bind("<Button-3>", self.on_right_click)
        # ƒê·∫£m b·∫£o canvas c√≥ th·ªÉ nh·∫≠n focus v√† events
        self.canvas.focus_set()
        self.canvas.configure(cursor="crosshair")
        # Th√™m event binding tr·ª±c ti·∫øp cho touchpad frame
        touchpad_frame.bind("<Button-1>", self.on_left_click)
        touchpad_frame.bind("<Button-3>", self.on_right_click)
        
        # Click counters
        counter_frame = ctk.CTkFrame(touchpad_frame, fg_color="transparent")
        counter_frame.pack(fill="x", padx=20, pady=5)
        
        self.left_click_label = ctk.CTkLabel(counter_frame, text="Click tr√°i: 0", font=Theme.BODY_FONT)
        self.left_click_label.pack(side="left", padx=20)
        
        self.right_click_label = ctk.CTkLabel(counter_frame, text="Click ph·∫£i: 0", font=Theme.BODY_FONT)
        self.right_click_label.pack(side="right", padx=20)
        
        # Clear button
        ctk.CTkButton(
            touchpad_frame, 
            text="X√≥a v·∫øt v·∫Ω", 
            command=self.clear_canvas,
            height=30,
            font=Theme.BODY_FONT
        ).pack(pady=5)

    def on_mouse_move(self, event):
        # Draw trail
        x, y = event.x, event.y
        self.canvas.create_oval(x-2, y-2, x+2, y+2, fill=Theme.ACCENT, outline=Theme.ACCENT, tags="trail")

    def on_left_click(self, event):
        self.mouse_clicks['left'] += 1
        self.left_click_label.configure(text=f"Click tr√°i: {self.mouse_clicks['left']}")
        # Visual feedback - c·∫£i thi·ªán v·ªõi x·ª≠ l√Ω event ƒë√∫ng
        x = getattr(event, 'x', 75)
        y = getattr(event, 'y', 75)
        self.canvas.create_oval(x-10, y-10, x+10, y+10, fill="#FF4444", outline="#CC0000", width=3, tags="click")
        self.canvas.create_text(x, y, text="L", font=("Arial", 12, "bold"), fill="white", tags="click")
        self.after(1500, lambda: self.canvas.delete("click"))

    def on_right_click(self, event):
        self.mouse_clicks['right'] += 1
        self.right_click_label.configure(text=f"Click ph·∫£i: {self.mouse_clicks['right']}")
        # Visual feedback - c·∫£i thi·ªán v·ªõi x·ª≠ l√Ω event ƒë√∫ng
        x = getattr(event, 'x', 225)
        y = getattr(event, 'y', 75)
        self.canvas.create_oval(x-10, y-10, x+10, y+10, fill="#4444FF", outline="#0000CC", width=3, tags="click")
        self.canvas.create_text(x, y, text="R", font=("Arial", 12, "bold"), fill="white", tags="click")
        self.after(1500, lambda: self.canvas.delete("click"))

    def on_scroll(self, event):
        # Visual feedback for scroll
        direction = "‚Üë" if event.delta > 0 else "‚Üì"
        self.canvas.create_text(event.x, event.y, text=direction, font=("Arial", 20), fill="green", tags="scroll")
        self.after(500, lambda: self.canvas.delete("scroll"))

    def clear_canvas(self):
        self.canvas.delete("trail")
        self.canvas.delete("click")
        self.canvas.delete("scroll")

    def on_key_event(self, event):
        if self.winfo_exists():
            self.after(0, self._update_key_ui, event.name, event.event_type)

    def _update_key_ui(self, key_name_raw, event_type):
        key_name = key_name_raw.lower()
        
        # Key mapping for special keys
        key_map = {
            'left shift': 'shift',
            'right shift': 'shift', 
            'left ctrl': 'ctrl',
            'right ctrl': 'ctrl',
            'left alt': 'alt',
            'right alt': 'alt',
            'alt gr': 'alt',
            'left windows': 'windows',
            'right windows': 'windows',
            'caps lock': 'caps',
            'page up': 'page up',
            'page down': 'page down',
            'print screen': 'print screen',
            'delete': 'del',
            'insert': 'insert',
            'home': 'home',
            'end': 'end',
            'num lock': 'num lock',
            'up': '‚Üë',
            'down': '‚Üì', 
            'left': '‚Üê',
            'right': '‚Üí'
        }
        
        mapped_key = key_map.get(key_name, key_name)
        widget = self.key_widgets.get(mapped_key)
        
        if not widget:
            return
            
        if event_type == 'down':
            widget.configure(fg_color=Theme.ACCENT, text_color="white")
            self.pressed_keys.add(mapped_key)
        elif event_type == 'up':
            widget.configure(fg_color=Theme.SUCCESS, text_color="white")
            if mapped_key in self.pressed_keys:
                self.pressed_keys.remove(mapped_key)

    def start_listening(self):
        try:
            keyboard.hook(self.on_key_event, suppress=False)
        except Exception as e:
            if "root" in str(e).lower() or "permission" in str(e).lower():
                messagebox.showwarning(
                    "Y√™u c·∫ßu quy·ªÅn Admin", 
                    "Kh√¥ng th·ªÉ b·∫Øt s·ª± ki·ªán b√†n ph√≠m do thi·∫øu quy·ªÅn Admin/root. Vui l√≤ng ch·∫°y l·∫°i ·ª©ng d·ª•ng v·ªõi quy·ªÅn qu·∫£n tr·ªã vi√™n."
                )

    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
            
        ctk.CTkLabel(
            self.result_container, 
            text="B√†n ph√≠m, touchpad v√† chu·ªôt c√≥ ho·∫°t ƒë·ªông t·ªët kh√¥ng?", 
            font=Theme.SUBHEADING_FONT, 
            wraplength=900
        ).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        self.btn_yes = ctk.CTkButton(
            button_bar, 
            text="C√≥, t·∫•t c·∫£ ƒë·ªÅu t·ªët", 
            image=self.icon_manager.CHECK, 
            compound="left", 
            command=lambda: self.handle_result_generic(
                True, 
                {"K·∫øt qu·∫£": "Ho·∫°t ƒë·ªông t·ªët", "Tr·∫°ng th√°i": "T·ªët", "Chi ti·∫øt": f"Click tr√°i: {self.mouse_clicks['left']}, Click ph·∫£i: {self.mouse_clicks['right']}"}, 
                {}
            ), 
            fg_color=Theme.SUCCESS, 
            height=Theme.BUTTON_HEIGHT, 
            font=Theme.BODY_FONT
        )
        self.btn_yes.pack(side="left", padx=10)
        
        self.btn_no = ctk.CTkButton(
            button_bar, 
            text="Kh√¥ng, c√≥ l·ªói", 
            image=self.icon_manager.CROSS, 
            compound="left", 
            command=lambda: self.handle_result_generic(
                False, 
                {}, 
                {"K·∫øt qu·∫£": "C√≥ l·ªói", "Tr·∫°ng th√°i": "L·ªói", "Chi ti·∫øt": f"Click tr√°i: {self.mouse_clicks['left']}, Click ph·∫£i: {self.mouse_clicks['right']}"}
            ), 
            fg_color=Theme.ERROR, 
            height=Theme.BUTTON_HEIGHT, 
            font=Theme.BODY_FONT
        )
        self.btn_no.pack(side="left", padx=10)

    def stop_tasks(self):
        super().stop_tasks()
        try:
            keyboard.unhook_all()
        except Exception:
            pass

class BIOSCheckStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        how_text = (
            "1. Kh·ªüi ƒë·ªông l·∫°i m√°y v√† nh·∫•n li√™n t·ª•c ph√≠m ƒë·ªÉ v√†o BIOS:\n"
            "   ‚Ä¢ **Dell/Alienware:** F2 ho·∫∑c F12\n"
            "   ‚Ä¢ **HP/Compaq:** F10 ho·∫∑c ESC\n"
            "   ‚Ä¢ **Lenovo/ThinkPad:** F1, F2 ho·∫∑c Enter\n"
            "   ‚Ä¢ **ASUS:** F2 ho·∫∑c Delete\n"
            "   ‚Ä¢ **Acer:** F2 ho·∫∑c Delete\n"
            "   ‚Ä¢ **MSI:** Delete ho·∫∑c F2\n\n"
            "2. Ki·ªÉm tra c√°c m·ª•c quan tr·ªçng:\n"
            "   ‚Ä¢ **CPU Features:** Intel Turbo Boost / AMD Boost ph·∫£i 'Enabled'\n"
            "   ‚Ä¢ **Memory:** XMP/DOCP profile n√™n b·∫≠t (n·∫øu c√≥)\n"
            "   ‚Ä¢ **Security:** Kh√¥ng c√≥ BIOS password l·∫°\n"
            "   ‚Ä¢ **‚ö†Ô∏è C·∫¢NH B√ÅO:** T√¨m 'Computrace' ho·∫∑c 'Absolute' - n·∫øu 'Enabled' th√¨ m√°y c√≥ th·ªÉ b·ªã kh√≥a t·ª´ xa!\n"
            "   ‚Ä¢ **Boot Order:** Ki·ªÉm tra th·ª© t·ª± kh·ªüi ƒë·ªông\n"
            "   ‚Ä¢ **Secure Boot:** N√™n ƒë·ªÉ 'Enabled' cho b·∫£o m·∫≠t"
        )
        super().__init__(master, "Ki·ªÉm Tra C√†i ƒê·∫∑t BIOS", "BIOS ch·ª©a c√°c c√†i ƒë·∫∑t n·ªÅn t·∫£ng. Ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu nƒÉng t·ªëi ∆∞u v√† kh√¥ng b·ªã kh√≥a b·ªüi c√°c t√≠nh nƒÉng doanh nghi·ªáp.", how_text, **kwargs)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()

    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="C√°c c√†i ƒë·∫∑t trong BIOS c√≥ ch√≠nh x√°c v√† an to√†n kh√¥ng?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="C√≥, m·ªçi c√†i ƒë·∫∑t ƒë·ªÅu ƒë√∫ng", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "C√†i ƒë·∫∑t ch√≠nh x√°c", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(button_bar, text="Kh√¥ng, c√≥ c√†i ƒë·∫∑t sai/b·ªã kh√≥a", image=self.icon_manager.CROSS, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ v·∫•n ƒë·ªÅ v·ªõi c√†i ƒë·∫∑t BIOS", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)

class PhysicalInspectionStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm Tra Ngo·∫°i H√¨nh", "T√¨nh tr·∫°ng v·∫≠t l√Ω ph·∫£n √°nh c√°ch ch·ªß c≈© s·ª≠ d·ª•ng m√°y. C√°c v·∫øt n·ª©t, m√≥p, b·∫£n l·ªÅ l·ªèng hay ·ªëc v√≠t b·ªã to√©t c√≥ th·ªÉ l√† d·∫•u hi·ªáu m√°y b·ªã r∆°i ho·∫∑c ƒë√£ qua s·ª≠a ch·ªØa kh√¥ng chuy√™n nghi·ªáp.", "**B√™n ngo√†i:**\n  ‚Ä¢ Ki·ªÉm tra c√°c v·∫øt tr·∫ßy x∆∞·ªõc, c·∫•n, m√≥p ·ªü c√°c g√≥c v√† m·∫∑t m√°y.\n  ‚Ä¢ M·ªü ra g·∫≠p v√†o nhi·ªÅu l·∫ßn, l·∫Øng nghe **ti·∫øng k√™u l·∫°** v√† c·∫£m nh·∫≠n **ƒë·ªô r∆°, l·ªèng l·∫ªo c·ªßa b·∫£n l·ªÅ**.\n  ‚Ä¢ C·∫Øm s·∫°c v√† lay nh·∫π ƒë·ªÉ ki·ªÉm tra **ƒë·ªô l·ªèng c·ªßa c·ªïng s·∫°c**.\n  ‚Ä¢ Nh√¨n k·ªπ c√°c con ·ªëc xem c√≥ b·ªã **to√©t ƒë·∫ßu, m·∫•t ·ªëc** hay kh√¥ng.\n**B√™n trong (N·∫øu c√≥ th·ªÉ):**\n  ‚Ä¢ Soi t√¨m d·∫•u hi·ªáu oxy h√≥a, b·ª•i b·∫©n, l√¥ng th√∫ c∆∞ng t√≠ch t·ª•.", **kwargs)
        self.create_inspection_checklist()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()
        # Mark as completed to enable navigation
        self.mark_completed({"K·∫øt qu·∫£": "ƒê√£ hi·ªÉn th·ªã checklist", "Tr·∫°ng th√°i": "S·∫µn s√†ng"}, auto_advance=False)
    
    def create_inspection_checklist(self):
        """T·∫°o checklist ki·ªÉm tra ngo·∫°i h√¨nh chi ti·∫øt"""
        checklist_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        checklist_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        ctk.CTkLabel(checklist_frame, text="üîç Checklist Ki·ªÉm Tra Ngo·∫°i H√¨nh", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        
        # Exterior checks
        exterior_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        exterior_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(exterior_frame, text="üíª B√™n Ngo√†i:", font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        
        exterior_checks = [
            "‚Ä¢ V·ªè m√°y: Ki·ªÉm tra v·∫øt n·ª©t, r·∫°n n·ª©t, m√≥p m√©o",
            "‚Ä¢ B·∫£n l·ªÅ m√†n h√¨nh: M·ªü/ƒë√≥ng nhi·ªÅu l·∫ßn, nghe ti·∫øng k√™u",
            "‚Ä¢ B√†n ph√≠m: Ki·ªÉm tra ph√≠m l·ªèng, kh√¥ng nh·∫•n",
            "‚Ä¢ Touchpad: B·ªÅ m·∫∑t ph·∫≥ng, kh√¥ng b·ªã l·ªìi",
            "‚Ä¢ C·ªïng k·∫øt n·ªëi: USB, HDMI, audio, s·∫°c",
            "‚Ä¢ L·ªó tho√°t kh√≠: Kh√¥ng b·ªã b·ªãt t·∫Øc"
        ]
        
        for check in exterior_checks:
            ctk.CTkLabel(exterior_frame, text=check, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=20, pady=2)
        
        # Hardware checks
        hardware_frame = ctk.CTkFrame(checklist_frame, fg_color=Theme.BACKGROUND)
        hardware_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(hardware_frame, text="üî© Ph·∫ßn C·ª©ng:", font=Theme.BODY_FONT, text_color=Theme.ACCENT).pack(anchor="w", padx=10, pady=5)
        
        hardware_checks = [
            "‚Ä¢ ·ªêc v√≠t: Ki·ªÉm tra c√°c ·ªëc kh√¥ng b·ªã to√©t, thi·∫øu",
            "‚Ä¢ Nh√£n d√°n: C√≤n nguy√™n, kh√¥ng b·ªã x√≥a",
            "‚Ä¢ ƒê√®n LED: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
            "‚Ä¢ L∆∞·ªõi tho√°t kh√≠: S·∫°ch s·∫Ω, kh√¥ng b·ª•i b·∫©n"
        ]
        
        for check in hardware_checks:
            ctk.CTkLabel(hardware_frame, text=check, font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=20, pady=2)
        
        # Warning signs
        warning_frame = ctk.CTkFrame(checklist_frame, fg_color="#FFF3CD", border_width=1, border_color=Theme.WARNING)
        warning_frame.pack(fill="x", padx=15, pady=10)
        
        ctk.CTkLabel(warning_frame, text="‚ö†Ô∏è D·∫•u Hi·ªáu C·∫£nh B√°o:", font=Theme.BODY_FONT, text_color=Theme.WARNING).pack(anchor="w", padx=10, pady=5)
        
        warnings = [
            "‚Ä¢ B·∫£n l·ªÅ r·∫•t l·ªèng ho·∫∑c k√™u k√®n k·∫πt",
            "‚Ä¢ C·ªïng s·∫°c l·ªèng, kh√¥ng gi·ªØ ch·∫∑t",
            "‚Ä¢ V·∫øt n·ª©t g·∫ßn b·∫£n l·ªÅ (nguy hi·ªÉm)",
            "‚Ä¢ M√πi l·∫° (ch√°y, h√≥a ch·∫•t)",
            "‚Ä¢ ·ªêc v√≠t b·ªã to√©t nhi·ªÅu (d·∫•u hi·ªáu th√°o l·∫Øp)"
        ]
        
        for warning in warnings:
            ctk.CTkLabel(warning_frame, text=warning, font=Theme.SMALL_FONT, text_color="#856404").pack(anchor="w", padx=20, pady=2)
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.result_container, text="D·ª±a tr√™n checklist tr√™n, t√¨nh tr·∫°ng v·∫≠t l√Ω t·ªïng th·ªÉ c·ªßa m√°y nh∆∞ th·∫ø n√†o?", font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        self.btn_excellent = ctk.CTkButton(button_bar, text="‚ú® R·∫•t t·ªët - Nh∆∞ m·ªõi", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "R·∫•t t·ªët - Nh∆∞ m·ªõi", "Tr·∫°ng th√°i": "Xu·∫•t s·∫Øc"}, {}), fg_color="#28a745", height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_excellent.pack(side="left", padx=5)
        
        self.btn_good = ctk.CTkButton(button_bar, text="‚úÖ T·ªët - V·∫øt nh·ªè", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "T·ªët - C√≥ v·∫øt s·ª≠ d·ª•ng nh·ªè", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_good.pack(side="left", padx=5)
        
        self.btn_fair = ctk.CTkButton(button_bar, text="‚ö†Ô∏è Trung b√¨nh - C√≥ l·ªói nh·ªè", image=self.icon_manager.WHY, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "Trung b√¨nh - C√≥ l·ªói nh·ªè c·∫ßn l∆∞u √Ω", "Tr·∫°ng th√°i": "C·∫£nh b√°o"}, {}), fg_color=Theme.WARNING, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_fair.pack(side="left", padx=5)
        
        self.btn_poor = ctk.CTkButton(button_bar, text="‚ùå K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ", image=self.icon_manager.CROSS, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "K√©m - Nhi·ªÅu v·∫•n ƒë·ªÅ nghi√™m tr·ªçng", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_poor.pack(side="left", padx=5)
        
        self.result_container.lift()
        self.result_container.update_idletasks()


class SummaryStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "B√°o C√°o T·ªïng K·∫øt", "", "", **kwargs)
        self.title = "B√°o C√°o T·ªïng K·∫øt"
    
    def display_summary(self, results):
        for widget in self.action_frame.winfo_children(): 
            widget.destroy()
        
        # Import report generator
        try:
            from report_generator import ReportGeneratorFrame
            
            # T·∫°o b√°o c√°o chuy√™n nghi·ªáp
            report_frame = ReportGeneratorFrame(self.action_frame, results)
            report_frame.pack(fill="both", expand=True, padx=Theme.CARD_PADDING, pady=Theme.CARD_PADDING)
            
        except ImportError:
            # Fallback to simple summary if report generator not available
            self.create_simple_summary(results)
    
    def create_simple_summary(self, results):
        """T·∫°o b√°o c√°o ƒë∆°n gi·∫£n n·∫øu kh√¥ng c√≥ report generator"""
        # Header
        header_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.ACCENT, corner_radius=Theme.CORNER_RADIUS)
        header_frame.pack(fill="x", padx=Theme.CARD_PADDING, pady=(Theme.CARD_PADDING, Theme.SECTION_SPACING))
        
        ctk.CTkLabel(header_frame, text="üìä B√ÅO C√ÅO T·ªîNG K·∫æT", 
                    font=Theme.HEADING_FONT, text_color="white").pack(pady=Theme.CARD_PADDING)
        
        # Quick stats
        stats_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        stats_frame.pack(fill="x", padx=Theme.CARD_PADDING, pady=(0, Theme.SECTION_SPACING))
        stats_frame.grid_columnconfigure((0,1,2), weight=1)
        
        total_tests = len(results)
        passed_tests = sum(1 for r in results.values() if r.get("Tr·∫°ng th√°i") == "T·ªët")
        success_rate = (passed_tests/total_tests*100) if total_tests > 0 else 0
        
        # Stats cards
        stats = [
            ("üìã T·ªïng Test", str(total_tests), Theme.INFO),
            ("‚úÖ ƒê·∫°t", f"{passed_tests}/{total_tests}", Theme.SUCCESS),
            ("üìà T·ª∑ L·ªá", f"{success_rate:.1f}%", Theme.ACCENT)
        ]
        
        for i, (label, value, color) in enumerate(stats):
            stat_card = ctk.CTkFrame(stats_frame, fg_color=Theme.BACKGROUND)
            stat_card.grid(row=0, column=i, padx=Theme.ELEMENT_SPACING, pady=Theme.CARD_PADDING, sticky="ew")
            
            ctk.CTkLabel(stat_card, text=label, font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=(10, 5))
            ctk.CTkLabel(stat_card, text=value, font=Theme.HEADING_FONT, text_color=color).pack(pady=(0, 10))
        
        # Detailed results
        results_frame = ctk.CTkScrollableFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        results_frame.pack(fill="both", expand=True, padx=Theme.CARD_PADDING, pady=(0, Theme.CARD_PADDING))
        
        ctk.CTkLabel(results_frame, text="üìã Chi Ti·∫øt K·∫øt Qu·∫£", font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=Theme.CARD_PADDING)
        
        for step, result in results.items():
            result_card = ctk.CTkFrame(results_frame, fg_color=Theme.BACKGROUND, corner_radius=8)
            result_card.pack(fill="x", padx=Theme.CARD_PADDING, pady=Theme.ELEMENT_SPACING)
            
            # Status color
            status = result.get("Tr·∫°ng th√°i", "Kh√¥ng r√µ")
            status_colors = {"T·ªët": Theme.SUCCESS, "L·ªói": Theme.ERROR, "C·∫£nh b√°o": Theme.WARNING, "B·ªè qua": Theme.SKIP}
            status_color = status_colors.get(status, Theme.TEXT_SECONDARY)
            
            # Header
            header = ctk.CTkFrame(result_card, fg_color="transparent")
            header.pack(fill="x", padx=15, pady=(15, 10))
            
            ctk.CTkLabel(header, text=step, font=Theme.SUBHEADING_FONT, text_color=Theme.TEXT).pack(side="left")
            ctk.CTkLabel(header, text=status, font=Theme.BODY_FONT, text_color=status_color).pack(side="right")
            
            # Details
            if result.get("K·∫øt qu·∫£"):
                ctk.CTkLabel(result_card, text=f"K·∫øt qu·∫£: {result['K·∫øt qu·∫£']}", 
                            font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY).pack(anchor="w", padx=15, pady=(0, 5))
            
            if result.get("Chi ti·∫øt"):
                detail_text = result["Chi ti·∫øt"][:200] + "..." if len(result["Chi ti·∫øt"]) > 200 else result["Chi ti·∫øt"]
                ctk.CTkLabel(result_card, text=f"Chi ti·∫øt: {detail_text}", 
                            font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY, wraplength=600).pack(anchor="w", padx=15, pady=(0, 15))

class BaseStressTestStep(BaseStepFrame):
    def __init__(self, master, title, why_text, how_text, **kwargs):
        super().__init__(master, title, why_text, how_text, **kwargs)
        self.test_process = None
        self.queue = multiprocessing.Queue()
        self.is_testing = False
        self.action_frame.grid_columnconfigure(0, weight=1)
        self.action_frame.grid_rowconfigure(3, weight=1)
        self.controls_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.controls_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=20)
        self.start_button = ctk.CTkButton(self.controls_frame, text="B·∫Øt ƒë·∫ßu Test", command=self.start_test, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.start_button.pack(side="left", padx=(0, 10))
        self.stop_button = ctk.CTkButton(self.controls_frame, text="D·ª´ng Test", command=self.stop_test, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT, state="disabled", fg_color=Theme.WARNING, text_color=Theme.TEXT)
        self.stop_button.pack(side="left")
        self.status_label = ctk.CTkLabel(self.action_frame, text="S·∫µn s√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu.", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY)
        self.status_label.grid(row=1, column=0, sticky="ew", padx=20, pady=(0, 10))
        self.progress_bar = ctk.CTkProgressBar(self.action_frame, progress_color=Theme.ACCENT)
        self.progress_bar.set(0)
        self.progress_bar.grid(row=2, column=0, sticky="ew", padx=20, pady=(0, 20))
        self.results_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.results_frame.grid(row=4, column=0, sticky="nsew", padx=20, pady=10)

    def start_test(self):
        raise NotImplementedError("Child class must implement start_test")

    def run_worker(self, worker_func, args_tuple):
        if self.is_testing: return
        self.is_testing = True
        self.progress_bar.set(0)
        self._completed = False 
        self.start_button.configure(state="disabled")
        self.stop_button.configure(state="normal")
        self.status_label.configure(text="ƒêang kh·ªüi t·∫°o worker...", text_color=Theme.ACCENT)
        for w in self.results_frame.winfo_children(): w.destroy()
        try:
            self.test_process = multiprocessing.Process(target=worker_func, args=args_tuple, daemon=True)
            self.test_process.start()
            self.after(100, self.check_queue)
        except Exception as e:
            self.status_label.configure(text=f"L·ªói kh·ªüi t·∫°o Process: {e}", text_color=Theme.ERROR)
            self.stop_test()

    def stop_test(self):
        if self.test_process and self.test_process.is_alive():
            self.test_process.terminate()
            self.test_process.join(timeout=2)
        self.is_testing = False
        self.start_button.configure(state="normal")
        self.stop_button.configure(state="disabled")
        self.status_label.configure(text="Test ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi ng∆∞·ªùi d√πng.", text_color=Theme.TEXT_SECONDARY)
        if not self._completed:
            self.mark_completed({"K·∫øt qu·∫£": "B·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng", "Tr·∫°ng th√°i": "B·ªè qua"})

    def check_queue(self):
        if not self.is_testing: return
        try:
            while not self.queue.empty():
                msg = self.queue.get_nowait()
                self.handle_message(msg)
        except Exception as e:
            print(f"L·ªói ƒë·ªçc queue: {e}")
        finally:
            self.after(200, self.check_queue)

    def handle_message(self, msg):
        msg_type = msg.get('type')
        if msg_type == 'status':
            self.status_label.configure(text=msg.get('message', ''))
        elif msg_type == 'update':
            self.progress_bar.set(msg.get('progress', 0))
            self.update_ui(msg)
        elif msg_type == 'result':
            self.finalize_test(msg)
        elif msg_type == 'error':
            self.status_label.configure(text=f"L·ªói Worker: {msg.get('message', 'Kh√¥ng r√µ')}", text_color=Theme.ERROR)
            self.mark_completed({"K·∫øt qu·∫£": "L·ªói Worker", "Tr·∫°ng th√°i": "L·ªói", "Chi ti·∫øt": msg.get('message', '')})
            self.stop_test()
        elif msg_type == 'done':
            self.is_testing = False
            self.start_button.configure(state="normal")
            self.stop_button.configure(state="disabled")
            if not self._completed:
                 self.status_label.configure(text="Ho√†n th√†nh.")
                 self.mark_completed({"K·∫øt qu·∫£": "Ho√†n th√†nh", "Tr·∫°ng th√°i": "T·ªët"})

    def update_ui(self, data):
        pass

    def finalize_test(self, data):
        pass

    def stop_tasks(self):
        super().stop_tasks()
        self.stop_test()

class CPUStressTestStep(BaseStressTestStep):
    def start_test(self):
        import threading
        import time
        import psutil
        
        def cpu_stress_test():
            temps = []
            freqs = []
            
            for i in range(30):  # 30 gi√¢y test
                if not self.is_testing:
                    break
                
                # Simulate CPU load
                cpu_percent = psutil.cpu_percent(interval=1)
                
                # Get CPU frequency
                try:
                    freq = psutil.cpu_freq().current if psutil.cpu_freq() else 0
                    freqs.append(freq)
                except:
                    freq = 0
                
                # Mock temperature (real implementation would use sensors)
                temp = 45 + (i * 1.5) + (cpu_percent * 0.3)
                temps.append(temp)
                
                self.progress_bar.set(i / 30)
                self.status_label.configure(text=f"CPU: {cpu_percent:.1f}% | Temp: {temp:.1f}¬∞C | Freq: {freq:.0f}MHz")
                
            if self.is_testing:
                self.show_cpu_results(temps, freqs)
        
        self.is_testing = True
        self.start_button.configure(state="disabled")
        self.stop_button.configure(state="normal")
        threading.Thread(target=cpu_stress_test, daemon=True).start()
    
    def show_cpu_results(self, temps, freqs):
        for widget in self.results_frame.winfo_children():
            widget.destroy()
        
        max_temp = max(temps) if temps else 0
        min_freq = min(freqs) if freqs else 0
        max_freq = max(freqs) if freqs else 0
        
        ctk.CTkLabel(self.results_frame, text="K·∫øt qu·∫£ CPU Stress Test:", font=Theme.SUBHEADING_FONT).pack(pady=10)
        ctk.CTkLabel(self.results_frame, text=f"Nhi·ªát ƒë·ªô t·ªëi ƒëa: {max_temp:.1f}¬∞C", font=Theme.BODY_FONT).pack()
        ctk.CTkLabel(self.results_frame, text=f"T·∫ßn s·ªë: {min_freq:.0f} - {max_freq:.0f} MHz", font=Theme.BODY_FONT).pack()
        
        # Throttling detection
        if max_freq > 0 and min_freq < max_freq * 0.8:
            ctk.CTkLabel(self.results_frame, text="‚ö†Ô∏è Ph√°t hi·ªán gi·∫£m t·∫ßn s·ªë (Throttling)", font=Theme.BODY_FONT, text_color=Theme.WARNING).pack()
        
        button_bar = ctk.CTkFrame(self.results_frame)
        button_bar.pack(pady=15)
        
        ctk.CTkButton(button_bar, text="CPU ho·∫°t ƒë·ªông t·ªët", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": f"Temp: {max_temp:.1f}¬∞C, Freq: {min_freq:.0f}-{max_freq:.0f}MHz", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), 
                     fg_color=Theme.SUCCESS).pack(side="left", padx=10)
        
        ctk.CTkButton(button_bar, text="CPU c√≥ v·∫•n ƒë·ªÅ", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "CPU kh√¥ng ·ªïn ƒë·ªãnh", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), 
                     fg_color=Theme.ERROR).pack(side="left", padx=10)
        
        self.is_testing = False
        self.start_button.configure(state="normal")
        self.stop_button.configure(state="disabled")
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="Test CPU ƒë√£ ho√†n th√†nh. Nhi·ªát ƒë·ªô t·ªëi ƒëa ghi nh·∫≠n: {}¬∞C".format(self.max_temp), font=Theme.SUBHEADING_FONT, wraplength=900).pack(pady=15)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="#DDFFDD")
        button_bar.pack(pady=15)
        self.btn_yes = ctk.CTkButton(button_bar, text="·ªîn ƒë·ªãnh, kh√¥ng qu√° nhi·ªát", image=self.icon_manager.CHECK, compound="left", command=lambda: self.handle_result_generic(True, {"K·∫øt qu·∫£": "·ªîn ƒë·ªãnh, kh√¥ng qu√° nhi·ªát", "Tr·∫°ng th√°i": "T·ªët"}, {}), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_yes.pack(side="left", padx=10)
        self.btn_no = ctk.CTkButton(button_bar, text="C√≥ d·∫•u hi·ªáu qu√° nhi·ªát", image=self.icon_manager.CROSS, compound="left", command=lambda: self.handle_result_generic(False, {}, {"K·∫øt qu·∫£": "C√≥ d·∫•u hi·ªáu qu√° nhi·ªát", "Tr·∫°ng th√°i": "L·ªói"}), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT, font=Theme.BODY_FONT)
        self.btn_no.pack(side="left", padx=10)
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm Tra CPU & T·∫£n Nhi·ªát", "M·ªôt CPU qu√° nhi·ªát s·∫Ω t·ª± gi·∫£m hi·ªáu nƒÉng (throttling) g√¢y gi·∫≠t lag. B√†i test n√†y s·∫Ω ƒë·∫©y CPU l√™n 100% t·∫£i ƒë·ªÉ ki·ªÉm tra kh·∫£ nƒÉng t·∫£n nhi·ªát c·ªßa m√°y.", "Nh·∫•n 'B·∫Øt ƒë·∫ßu Test' trong 2-5 ph√∫t. Theo d√µi bi·ªÉu ƒë·ªì nhi·ªát ƒë·ªô. N·∫øu nhi·ªát ƒë·ªô ·ªïn ƒë·ªãnh d∆∞·ªõi 95¬∞C v√† kh√¥ng c√≥ hi·ªán t∆∞·ª£ng treo m√°y, h·ªá th·ªëng t·∫£n nhi·ªát ho·∫°t ƒë·ªông t·ªët.", **kwargs)
        self.TEST_DURATION = 120
        self.start_button.configure(image=self.icon_manager.CPU, compound="left")

    def finalize_test(self, msg):
        self.chart_frame.grid_remove()
        details = f"Th·ªùi gian test: {len(self.temp_data)} gi√¢y.\nNhi·ªát ƒë·ªô t·ªëi ƒëa ghi nh·∫≠n: {self.max_temp}¬∞C."
        is_ok = self.max_temp > 0 and self.max_temp < 98
        result_data = {"K·∫øt qu·∫£": f"Nhi·ªát ƒë·ªô t·ªëi ƒëa: {self.max_temp}¬∞C", "Tr·∫°ng th√°i": "T·ªët" if is_ok else "L·ªói", "Chi ti·∫øt": details}
        self.mark_completed(result_data)
        self.status_label.configure(text=f"Test ho√†n th√†nh. Nhi·ªát ƒë·ªô t·ªëi ƒëa: {self.max_temp}¬∞C")

class HardDriveSpeedStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "T·ªëc ƒê·ªô ·ªî C·ª©ng", "T·ªëc ƒë·ªô ƒë·ªçc/ghi ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn hi·ªáu nƒÉng h·ªá th·ªëng.", "Nh·∫•n 'B·∫Øt ƒë·∫ßu Test' ƒë·ªÉ ki·ªÉm tra t·ªëc ƒë·ªô ·ªï c·ª©ng th·ª±c t·∫ø.", **kwargs)
        self.create_disk_test()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=3, column=0, sticky="sew", pady=(20,0))
        
    def create_disk_test(self):
        control_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        control_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        ctk.CTkLabel(control_frame, text="Test T·ªëc ƒê·ªô ·ªî C·ª©ng", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=10)
        
        self.start_btn = ctk.CTkButton(control_frame, text="B·∫Øt ƒë·∫ßu Test", command=self.start_disk_test, fg_color=Theme.ACCENT, height=Theme.BUTTON_HEIGHT)
        self.start_btn.pack(pady=10)
        
        self.status_label = ctk.CTkLabel(control_frame, text="S·∫µn s√†ng test", font=Theme.BODY_FONT)
        self.status_label.pack(pady=5)
        
        self.progress_bar = ctk.CTkProgressBar(self.action_frame, progress_color=Theme.ACCENT)
        self.progress_bar.grid(row=1, column=0, sticky="ew", padx=20, pady=10)
        self.progress_bar.set(0)
        
        self.results_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.results_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=10)
    
    def start_disk_test(self):
        import threading
        import time
        import os
        import tempfile
        
        def real_disk_test():
            try:
                self.start_btn.configure(state="disabled")
                self.status_label.configure(text="ƒêang t·∫°o file test...")
                
                # Create test file
                test_size = 100 * 1024 * 1024  # 100MB for more accurate results
                test_data = b'\x00' * test_size  # Use zeros for faster generation
                
                with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                    temp_path = temp_file.name
                
                # Write test
                self.status_label.configure(text="ƒêang test ghi...")
                self.progress_bar.set(0.3)
                start_time = time.time()
                
                with open(temp_path, 'wb') as f:
                    f.write(test_data)
                    f.flush()
                    os.fsync(f.fileno())
                
                write_time = time.time() - start_time
                write_speed = (test_size / (1024 * 1024)) / write_time
                
                # Read test
                self.status_label.configure(text="ƒêang test ƒë·ªçc...")
                self.progress_bar.set(0.7)
                start_time = time.time()
                
                with open(temp_path, 'rb') as f:
                    _ = f.read()
                
                read_time = time.time() - start_time
                read_speed = (test_size / (1024 * 1024)) / read_time
                
                # Cleanup
                os.unlink(temp_path)
                
                self.progress_bar.set(1.0)
                self.status_label.configure(text="Test ho√†n th√†nh")
                self.show_results(int(write_speed), int(read_speed))
                
            except Exception as e:
                self.status_label.configure(text=f"L·ªói: {e}")
                self.start_btn.configure(state="normal")
        
        threading.Thread(target=real_disk_test, daemon=True).start()
    
    def show_results(self, write_speed, read_speed):
        for widget in self.results_frame.winfo_children():
            widget.destroy()
        
        result_frame = ctk.CTkFrame(self.results_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        result_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(result_frame, text="K·∫øt qu·∫£ Test:", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=10)
        ctk.CTkLabel(result_frame, text=f"T·ªëc ƒë·ªô Ghi: {write_speed} MB/s", font=Theme.BODY_FONT).pack()
        ctk.CTkLabel(result_frame, text=f"T·ªëc ƒë·ªô ƒê·ªçc: {read_speed} MB/s", font=Theme.BODY_FONT).pack(pady=(0,10))
        
        self.show_result_choices(write_speed, read_speed)
        self.start_btn.configure(state="normal")
    
    def show_result_choices(self, write_speed, read_speed):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.result_container, text="T·ªëc ƒë·ªô ·ªï c·ª©ng c√≥ ƒë·∫°t y√™u c·∫ßu kh√¥ng?", font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        ctk.CTkButton(button_bar, text="T·ªëc ƒë·ªô t·ªët", command=lambda: self.mark_completed({"K·∫øt qu·∫£": f"Ghi: {write_speed}MB/s, ƒê·ªçc: {read_speed}MB/s", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
        ctk.CTkButton(button_bar, text="T·ªëc ƒë·ªô ch·∫≠m", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "T·ªëc ƒë·ªô ch·∫≠m", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)

class GPUStressTestStep(BaseStressTestStep):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm Tra GPU & T·∫£n nhi·ªát", "GPU l√† tr√°i tim c·ªßa ƒë·ªì h·ªça v√† game. M·ªôt GPU l·ªói ho·∫∑c qu√° nhi·ªát c√≥ th·ªÉ g√¢y ra hi·ªán t∆∞·ª£ng 'r√°c' h√¨nh (artifacts), treo m√°y ho·∫∑c s·ª•t gi·∫£m FPS nghi√™m tr·ªçng.", "B√†i test s·∫Ω t·∫°o ra m·ªôt c·ª≠a s·ªï ƒë·ªì h·ªça n·∫∑ng trong 60 gi√¢y. H√£y quan s√°t:\n  ‚Ä¢ C√≥ hi·ªán t∆∞·ª£ng ch·ªõp gi·∫≠t, s·ªçc ngang, hay c√°c ƒë·ªëm m√†u l·∫° kh√¥ng?\n  ‚Ä¢ M√°y c√≥ b·ªã treo ho·∫∑c t·ª± kh·ªüi ƒë·ªông l·∫°i kh√¥ng?", **kwargs)
        self.TEST_DURATION = 60
        self.start_button.configure(image=self.icon_manager.GPU, compound="left")
    
    def start_test(self):
        import threading
        import time
        import tkinter as tk
        
        def gpu_stress_test():
            # Create stress test window
            test_win = tk.Toplevel()
            test_win.attributes('-fullscreen', True)
            test_win.configure(bg='black')
            
            canvas = tk.Canvas(test_win, bg='black', highlightthickness=0)
            canvas.pack(fill='both', expand=True)
            
            # Animate graphics to stress GPU
            for i in range(self.TEST_DURATION * 10):  # 10 FPS
                if not self.is_testing:
                    break
                
                canvas.delete('all')
                # Draw moving patterns
                for j in range(50):
                    x = (i * 5 + j * 20) % 1920
                    y = (i * 3 + j * 15) % 1080
                    canvas.create_rectangle(x, y, x+10, y+10, fill=f'#{j*5:02x}{(i*3)%255:02x}{(j*7)%255:02x}', outline='')
                
                canvas.update()
                self.progress_bar.set(i / (self.TEST_DURATION * 10))
                self.status_label.configure(text=f"GPU Stress Test: {i//10}s/{self.TEST_DURATION}s")
                time.sleep(0.1)
            
            test_win.destroy()
            self.show_gpu_results()
        
        self.is_testing = True
        self.start_button.configure(state="disabled")
        self.stop_button.configure(state="normal")
        threading.Thread(target=gpu_stress_test, daemon=True).start()
    
    def show_gpu_results(self):
        for widget in self.results_frame.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.results_frame, text="K·∫øt qu·∫£ GPU Test:", font=Theme.SUBHEADING_FONT).pack(pady=10)
        ctk.CTkLabel(self.results_frame, text="Test ho√†n th√†nh - Ki·ªÉm tra xem c√≥ artifacts kh√¥ng", font=Theme.BODY_FONT).pack()
        
        button_bar = ctk.CTkFrame(self.results_frame)
        button_bar.pack(pady=15)
        
        ctk.CTkButton(button_bar, text="GPU ho·∫°t ƒë·ªông t·ªët", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "GPU ·ªïn ƒë·ªãnh", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), 
                     fg_color=Theme.SUCCESS).pack(side="left", padx=10)
        
        ctk.CTkButton(button_bar, text="GPU c√≥ v·∫•n ƒë·ªÅ", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "GPU kh√¥ng ·ªïn ƒë·ªãnh", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), 
                     fg_color=Theme.ERROR).pack(side="left", padx=10)
        
        self.is_testing = False
        self.start_button.configure(state="normal")
        self.stop_button.configure(state="disabled")

# Removed duplicate ScreenTestStep - using the improved version above
        
# Removed duplicate KeyboardVisualTestStep class - using the improved version above
        
class PortsConnectivityStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "C·ªïng K·∫øt N·ªëi", "C√°c c·ªïng USB, HDMI, audio l√† ƒëi·ªÉm k·∫øt n·ªëi quan tr·ªçng v·ªõi thi·∫øt b·ªã ngo·∫°i vi. C·ªïng h·ªèng c√≥ th·ªÉ g√¢y b·∫•t ti·ªán l·ªõn trong s·ª≠ d·ª•ng.", "Ki·ªÉm tra t·ª´ng c·ªïng b·∫±ng c√°ch c·∫Øm thi·∫øt b·ªã th·ª≠. ƒê√°nh d·∫•u c√°c c·ªïng ho·∫°t ƒë·ªông b√™n d∆∞·ªõi.", **kwargs)
        self.create_ports_checklist()
        
    def create_ports_checklist(self):
        checklist_frame = ctk.CTkFrame(self.action_frame)
        checklist_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        ctk.CTkLabel(checklist_frame, text="Checklist C·ªïng K·∫øt N·ªëi:", font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        self.port_vars = {}
        ports = [
            ("USB-A (c·∫Øm chu·ªôt/USB)", "usb_a"),
            ("USB-C (c·∫Øm s·∫°c/thi·∫øt b·ªã)", "usb_c"),
            ("HDMI (k·∫øt n·ªëi m√†n h√¨nh)", "hdmi"),
            ("Audio 3.5mm (c·∫Øm tai nghe)", "audio"),
            ("C·ªïng s·∫°c (s·∫°c pin)", "power"),
            ("Ethernet (d√¢y m·∫°ng)", "ethernet"),
            ("SD Card (th·∫ª nh·ªõ)", "sd_card")
        ]
        
        for port_name, port_key in ports:
            port_frame = ctk.CTkFrame(checklist_frame)
            port_frame.pack(fill="x", padx=20, pady=5)
            
            var = tk.BooleanVar()
            self.port_vars[port_key] = var
            
            checkbox = ctk.CTkCheckBox(port_frame, text=port_name, variable=var, font=Theme.BODY_FONT)
            checkbox.pack(side="left", padx=20, pady=10)
            
            status_label = ctk.CTkLabel(port_frame, text="Ch∆∞a ki·ªÉm tra", font=Theme.SMALL_FONT, text_color=Theme.TEXT_SECONDARY)
            status_label.pack(side="right", padx=20, pady=10)
            
            # Update status when checked
            def update_status(var=var, label=status_label):
                if var.get():
                    label.configure(text="‚úì Ho·∫°t ƒë·ªông", text_color=Theme.SUCCESS)
                else:
                    label.configure(text="Ch∆∞a ki·ªÉm tra", text_color=Theme.TEXT_SECONDARY)
            
            var.trace('w', lambda *args, func=update_status: func())
        
        self.show_result_choices()
        
    def show_result_choices(self):
        result_frame = ctk.CTkFrame(self.action_frame)
        result_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(result_frame, text="C√°c c·ªïng ƒë√£ ki·ªÉm tra c√≥ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng kh√¥ng?", font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(result_frame)
        button_bar.pack(pady=15)
        
        ctk.CTkButton(button_bar, text="T·∫•t c·∫£ c·ªïng ho·∫°t ƒë·ªông t·ªët", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "T·∫•t c·∫£ c·ªïng ho·∫°t ƒë·ªông", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), 
                     fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
        ctk.CTkButton(button_bar, text="C√≥ c·ªïng kh√¥ng ho·∫°t ƒë·ªông", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "M·ªôt s·ªë c·ªïng c√≥ v·∫•n ƒë·ªÅ", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), 
                     fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
class BatteryHealthStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Pin Laptop", "Pin l√† ngu·ªìn nƒÉng l∆∞·ª£ng di ƒë·ªông c·ªßa laptop. Pin h·ªèng ho·∫∑c chai s·∫Ω gi·∫£m th·ªùi gian s·ª≠ d·ª•ng v√† c√≥ th·ªÉ g√¢y nguy hi·ªÉm.", "Th√¥ng tin pin s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông thu th·∫≠p. Ki·ªÉm tra c√°c th√¥ng s·ªë d∆∞·ªõi ƒë√¢y v√† ƒë√°nh gi√° t√¨nh tr·∫°ng pin.", **kwargs)
        self.get_battery_info()
        
    def get_battery_info(self):
        info_frame = ctk.CTkFrame(self.action_frame)
        info_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        ctk.CTkLabel(info_frame, text="Th√¥ng Tin Pin Chi Ti·∫øt:", font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        try:
            import psutil
            battery = psutil.sensors_battery()
            
            if battery:
                # Battery status
                status_frame = ctk.CTkFrame(info_frame)
                status_frame.pack(fill="x", padx=20, pady=10)
                
                # Current charge
                charge_frame = ctk.CTkFrame(status_frame)
                charge_frame.pack(fill="x", padx=10, pady=5)
                ctk.CTkLabel(charge_frame, text="M·ª©c pin hi·ªán t·∫°i:", font=Theme.BODY_FONT).pack(side="left")
                
                charge_bar = ctk.CTkProgressBar(charge_frame, width=200)
                charge_bar.set(battery.percent / 100)
                charge_bar.pack(side="right", padx=10)
                ctk.CTkLabel(charge_frame, text=f"{battery.percent:.1f}%", font=Theme.BODY_FONT).pack(side="right")
                
                # Power status
                power_status = "S·∫°c ƒëi·ªán" if battery.power_plugged else "D√πng pin"
                power_color = Theme.SUCCESS if battery.power_plugged else Theme.WARNING
                
                info_items = [
                    ("Tr·∫°ng th√°i ngu·ªìn:", power_status, power_color),
                    ("Th·ªùi gian c√≤n l·∫°i:", f"{battery.secsleft // 3600}h {(battery.secsleft % 3600) // 60}m" if battery.secsleft != psutil.POWER_TIME_UNLIMITED else "Kh√¥ng gi·ªõi h·∫°n", Theme.TEXT),
                ]
                
                # Additional battery details (mock data)
                additional_info = [
                    ("Dung l∆∞·ª£ng thi·∫øt k·∫ø:", "50.0 Wh", Theme.TEXT),
                    ("Dung l∆∞·ª£ng hi·ªán t·∫°i:", "47.2 Wh", Theme.TEXT),
                    ("S·ª©c kh·ªèe pin:", "94.4%", Theme.SUCCESS),
                    ("S·ªë chu k·ª≥ s·∫°c:", "127 chu k·ª≥", Theme.TEXT),
                    ("C√¥ng ngh·ªá pin:", "Li-ion", Theme.TEXT),
                    ("Nh√† s·∫£n xu·∫•t:", "LGC", Theme.TEXT),
                    ("Nhi·ªát ƒë·ªô pin:", "32¬∞C", Theme.TEXT),
                    ("ƒêi·ªán √°p:", "11.4V", Theme.TEXT),
                ]
                
                all_info = info_items + additional_info
                
                for label, value, color in all_info:
                    item_frame = ctk.CTkFrame(status_frame)
                    item_frame.pack(fill="x", padx=10, pady=2)
                    ctk.CTkLabel(item_frame, text=label, font=Theme.BODY_FONT).pack(side="left")
                    ctk.CTkLabel(item_frame, text=value, font=Theme.BODY_FONT, text_color=color).pack(side="right")
                
                # Health assessment
                health_frame = ctk.CTkFrame(info_frame)
                health_frame.pack(fill="x", padx=20, pady=15)
                
                ctk.CTkLabel(health_frame, text="ƒê√°nh Gi√° S·ª©c Kh·ªèe Pin:", font=Theme.SUBHEADING_FONT).pack(pady=10)
                
                health_score = 94.4  # Mock health score
                health_color = Theme.SUCCESS if health_score > 80 else Theme.WARNING if health_score > 60 else Theme.ERROR
                health_text = "T·ªët" if health_score > 80 else "Trung b√¨nh" if health_score > 60 else "K√©m"
                
                health_bar = ctk.CTkProgressBar(health_frame, width=300, progress_color=health_color)
                health_bar.set(health_score / 100)
                health_bar.pack(pady=5)
                
                ctk.CTkLabel(health_frame, text=f"S·ª©c kh·ªèe: {health_score}% ({health_text})", 
                           font=Theme.BODY_FONT, text_color=health_color).pack()
                
            else:
                ctk.CTkLabel(info_frame, text="Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin pin", 
                           font=Theme.BODY_FONT, text_color=Theme.ERROR).pack(pady=20)
                
        except Exception as e:
            ctk.CTkLabel(info_frame, text=f"L·ªói ƒë·ªçc th√¥ng tin pin: {e}", 
                       font=Theme.BODY_FONT, text_color=Theme.ERROR).pack(pady=20)
        
        self.show_result_choices()
    
    def show_result_choices(self):
        result_frame = ctk.CTkFrame(self.action_frame)
        result_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(result_frame, text="D·ª±a tr√™n th√¥ng tin tr√™n, pin c√≥ ho·∫°t ƒë·ªông t·ªët kh√¥ng?", font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(result_frame)
        button_bar.pack(pady=15)
        
        ctk.CTkButton(button_bar, text="Pin ho·∫°t ƒë·ªông t·ªët (>80%)", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "Pin s·ª©c kh·ªèe t·ªët", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), 
                     fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
        ctk.CTkButton(button_bar, text="Pin b·ªã chai/h·ªèng (<80%)", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "Pin c·∫ßn thay th·∫ø", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), 
                     fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
class SpeakerTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Loa & Micro", "H·ªá th·ªëng √¢m thanh quan tr·ªçng cho gi·∫£i tr√≠ v√† h·ªçp tr·ª±c tuy·∫øn. Loa b·ªã r√®, micro kh√¥ng ho·∫°t ƒë·ªông s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn tr·∫£i nghi·ªám multimedia.", "1. Nh·∫•n c√°c n√∫t test √¢m thanh\n2. ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng ki·ªÉm tra\n3. Test micro b·∫±ng c√°ch n√≥i\n4. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng √¢m thanh", **kwargs)
        self.create_audio_tests()
        
    def create_audio_tests(self):
        test_frame = ctk.CTkFrame(self.action_frame)
        test_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Speaker tests
        ctk.CTkLabel(test_frame, text="Test Loa:", font=Theme.SUBHEADING_FONT).pack(pady=10)
        
        speaker_frame = ctk.CTkFrame(test_frame)
        speaker_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkButton(speaker_frame, text="Test T·∫ßn S·ªë Th·∫•p", command=lambda: self.play_test_tone("low")).pack(side="left", padx=5)
        ctk.CTkButton(speaker_frame, text="Test T·∫ßn S·ªë Trung", command=lambda: self.play_test_tone("mid")).pack(side="left", padx=5)
        ctk.CTkButton(speaker_frame, text="Test T·∫ßn S·ªë Cao", command=lambda: self.play_test_tone("high")).pack(side="left", padx=5)
        ctk.CTkButton(speaker_frame, text="Test Stereo", command=lambda: self.play_test_tone("stereo")).pack(side="left", padx=5)
        
        # Volume control
        volume_frame = ctk.CTkFrame(test_frame)
        volume_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(volume_frame, text="√Çm l∆∞·ª£ng:").pack(side="left", padx=10)
        self.volume_slider = ctk.CTkSlider(volume_frame, from_=0, to=100, number_of_steps=100)
        self.volume_slider.set(50)
        self.volume_slider.pack(side="left", fill="x", expand=True, padx=10)
        
        # Microphone test
        ctk.CTkLabel(test_frame, text="Test Micro:", font=Theme.SUBHEADING_FONT).pack(pady=(20,10))
        
        mic_frame = ctk.CTkFrame(test_frame)
        mic_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkButton(mic_frame, text="B·∫Øt ƒë·∫ßu ghi √¢m", command=self.start_recording).pack(side="left", padx=10)
        ctk.CTkButton(mic_frame, text="D·ª´ng ghi √¢m", command=self.stop_recording).pack(side="left", padx=10)
        ctk.CTkButton(mic_frame, text="Ph√°t l·∫°i", command=self.play_recording).pack(side="left", padx=10)
        
        self.recording_status = ctk.CTkLabel(test_frame, text="Ch∆∞a ghi √¢m", font=Theme.BODY_FONT)
        self.recording_status.pack(pady=10)
        
        self.show_result_choices()
    
    def play_test_tone(self, tone_type):
        # Mock audio test - in real implementation would use pygame or other audio library
        import threading
        import time
        
        def mock_play():
            self.recording_status.configure(text=f"ƒêang ph√°t {tone_type} tone...")
            time.sleep(2)
            self.recording_status.configure(text="Ho√†n th√†nh ph√°t √¢m thanh")
        
        threading.Thread(target=mock_play, daemon=True).start()
    
    def start_recording(self):
        self.recording_status.configure(text="üé§ ƒêang ghi √¢m... N√≥i v√†o micro")
    
    def stop_recording(self):
        self.recording_status.configure(text="‚úì ƒê√£ d·ª´ng ghi √¢m")
    
    def play_recording(self):
        self.recording_status.configure(text="üîä ƒêang ph√°t l·∫°i b·∫£n ghi...")
        
    def show_result_choices(self):
        result_frame = ctk.CTkFrame(self.action_frame)
        result_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(result_frame, text="Loa v√† micro ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng kh√¥ng?", font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(result_frame)
        button_bar.pack(pady=15)
        
        ctk.CTkButton(button_bar, text="√Çm thanh r√µ r√†ng, kh√¥ng r√®", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "H·ªá th·ªëng √¢m thanh t·ªët", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), 
                     fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
        ctk.CTkButton(button_bar, text="C√≥ ti·∫øng r√®/m√©o/kh√¥ng nghe", 
                     command=lambda: self.mark_completed({"K·∫øt qu·∫£": "H·ªá th·ªëng √¢m thanh c√≥ v·∫•n ƒë·ªÅ", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), 
                     fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
class MicrophoneTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ki·ªÉm tra micro", "", "", **kwargs)
        self.mark_completed({}, auto_advance=False)
    def show_result_choices(self): pass
        
class NetworkTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "M·∫°ng & WiFi", "K·∫øt n·ªëi m·∫°ng ·ªïn ƒë·ªãnh l√† y·∫øu t·ªë quan tr·ªçng cho c√¥ng vi·ªác v√† gi·∫£i tr√≠. WiFi y·∫øu ho·∫∑c m·∫•t k·∫øt n·ªëi th∆∞·ªùng xuy√™n s·∫Ω g√¢y gi√°n ƒëo·∫°n.", "Test s·∫Ω ki·ªÉm tra k·∫øt n·ªëi Internet, t·ªëc ƒë·ªô m·∫°ng, ƒë·ªô tr·ªÖ ping v√† th√¥ng tin WiFi chi ti·∫øt.", **kwargs)
        from network_test_step import NetworkTestStep as NetworkTester
        self.network_tester = NetworkTester(self)
        self.network_tester.create_network_test_ui(self.action_frame)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=3, column=0, sticky="sew", pady=(Theme.SECTION_SPACING, 0))
        self.show_result_choices()
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="M·∫°ng v√† WiFi c√≥ ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh kh√¥ng?", font=Theme.SUBHEADING_FONT).pack(pady=Theme.ELEMENT_SPACING)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=Theme.ELEMENT_SPACING)
        ctk.CTkButton(button_bar, text="M·∫°ng ho·∫°t ƒë·ªông t·ªët", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "M·∫°ng ·ªïn ƒë·ªãnh", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        ctk.CTkButton(button_bar, text="M·∫°ng c√≥ v·∫•n ƒë·ªÅ", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "M·∫°ng kh√¥ng ·ªïn ƒë·ªãnh", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)

class ThermalPerformanceStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Thermal Monitor", "Gi√°m s√°t nhi·ªát ƒë·ªô v√† hi·ªáu nƒÉng real-time gi√∫p ph√°t hi·ªán v·∫•n ƒë·ªÅ qu√° nhi·ªát, throttling v√† ƒë√°nh gi√° kh·∫£ nƒÉng t·∫£n nhi·ªát.", "Monitor s·∫Ω ch·∫°y li√™n t·ª•c v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì real-time. C√≥ th·ªÉ ch·∫°y Stress Test ƒë·ªÉ ki·ªÉm tra ·ªü t·∫£i cao.", **kwargs)
        from thermal_performance_step import ThermalPerformanceStep as ThermalTester
        self.thermal_tester = ThermalTester(self)
        self.thermal_tester.create_thermal_ui(self.action_frame)
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=3, column=0, sticky="sew", pady=(Theme.SECTION_SPACING, 0))
        self.show_result_choices()
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        ctk.CTkLabel(self.result_container, text="H·ªá th·ªëng t·∫£n nhi·ªát c√≥ ho·∫°t ƒë·ªông hi·ªáu qu·∫£ kh√¥ng?", font=Theme.SUBHEADING_FONT).pack(pady=Theme.ELEMENT_SPACING)
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=Theme.ELEMENT_SPACING)
        ctk.CTkButton(button_bar, text="T·∫£n nhi·ªát t·ªët", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "T·∫£n nhi·ªát hi·ªáu qu·∫£", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        ctk.CTkButton(button_bar, text="Qu√° nhi·ªát", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "H·ªá th·ªëng qu√° nhi·ªát", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)

class WebcamTestStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Webcam", "Webcam c·∫ßn thi·∫øt cho video call v√† h·ªçp tr·ª±c tuy·∫øn. Camera kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c ch·∫•t l∆∞·ª£ng k√©m s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn giao ti·∫øp.", "Nh·∫•n 'B·∫Øt ƒë·∫ßu Test' ƒë·ªÉ m·ªü camera. Ki·ªÉm tra ch·∫•t l∆∞·ª£ng h√¨nh ·∫£nh, ƒë·ªô ph√¢n gi·∫£i v√† che camera ƒë·ªÉ test ph√°t hi·ªán v·∫≠t c·∫£n.", **kwargs)
        self.create_webcam_test()
        self.result_container = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.result_container.grid(row=2, column=0, sticky="sew", pady=(20,0))
        self.show_result_choices()
    
    def create_webcam_test(self):
        test_frame = ctk.CTkFrame(self.action_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        test_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=10)
        
        ctk.CTkLabel(test_frame, text="Test Webcam", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=10)
        
        # Preview area
        self.preview_frame = ctk.CTkFrame(test_frame, width=320, height=240, fg_color="#E0E0E0")
        self.preview_frame.pack(pady=10)
        
        self.preview_label = ctk.CTkLabel(self.preview_frame, text="Camera ch∆∞a kh·ªüi ƒë·ªông", font=Theme.BODY_FONT)
        self.preview_label.pack(expand=True)
        
        # Controls
        control_frame = ctk.CTkFrame(test_frame, fg_color="transparent")
        control_frame.pack(pady=10)
        
        self.start_btn = ctk.CTkButton(control_frame, text="B·∫Øt ƒë·∫ßu Test Camera", command=self.start_camera_test, fg_color=Theme.ACCENT)
        self.start_btn.pack(side="left", padx=5)
        
        self.stop_btn = ctk.CTkButton(control_frame, text="D·ª´ng Camera", command=self.stop_camera_test, fg_color=Theme.ERROR, state="disabled")
        self.stop_btn.pack(side="left", padx=5)
        
        self.status_label = ctk.CTkLabel(test_frame, text="S·∫µn s√†ng test camera", font=Theme.BODY_FONT)
        self.status_label.pack(pady=5)
    
    def start_camera_test(self):
        try:
            import cv2
            from PIL import Image, ImageTk
            
            # Try multiple camera indices
            self.cap = None
            for i in range(3):
                cap = cv2.VideoCapture(i)
                if cap.isOpened():
                    ret, frame = cap.read()
                    if ret:
                        self.cap = cap
                        break
                    cap.release()
            
            if not self.cap:
                self.status_label.configure(text="‚ùå Kh√¥ng t√¨m th·∫•y camera ho·∫°t ƒë·ªông", text_color=Theme.ERROR)
                return
            
            # Set camera properties for better performance
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)
            self.cap.set(cv2.CAP_PROP_FPS, 15)
            
            self.camera_running = True
            self.start_btn.configure(state="disabled")
            self.stop_btn.configure(state="normal")
            self.status_label.configure(text="‚úÖ Camera ƒëang ho·∫°t ƒë·ªông - Ki·ªÉm tra h√¨nh ·∫£nh b√™n d∆∞·ªõi", text_color=Theme.SUCCESS)
            
            self.update_camera_feed()
        except ImportError:
            self.status_label.configure(text="‚ùå C·∫ßn c√†i ƒë·∫∑t: pip install opencv-python", text_color=Theme.ERROR)
        except Exception as e:
            self.status_label.configure(text=f"‚ùå L·ªói camera: {e}", text_color=Theme.ERROR)
    
    def update_camera_feed(self):
        if not hasattr(self, 'camera_running') or not self.camera_running:
            return
        
        try:
            ret, frame = self.cap.read()
            if ret:
                import cv2
                from PIL import Image, ImageTk
                
                # Resize frame for display
                frame = cv2.resize(frame, (320, 240))
                
                # Convert BGR to RGB
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                
                # Detect brightness
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                brightness = gray.mean()
                
                # Convert to PIL Image and then to PhotoImage
                pil_image = Image.fromarray(frame_rgb)
                photo = ImageTk.PhotoImage(pil_image)
                
                # Update preview label with actual image
                self.preview_label.configure(image=photo, text="")
                self.preview_label.image = photo  # Keep a reference
                
                # Update status based on brightness
                if brightness < 15:
                    self.status_label.configure(text="‚ö†Ô∏è Camera b·ªã che ho·∫∑c qu√° t·ªëi", text_color=Theme.WARNING)
                elif brightness > 200:
                    self.status_label.configure(text="‚ö†Ô∏è Camera b·ªã ch√≥i s√°ng", text_color=Theme.WARNING)
                else:
                    self.status_label.configure(text=f"‚úÖ Camera ho·∫°t ƒë·ªông t·ªët (ƒê·ªô s√°ng: {int(brightness)})", text_color=Theme.SUCCESS)
            else:
                self.status_label.configure(text="‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera", text_color=Theme.ERROR)
            
            # Continue updating
            self.after(50, self.update_camera_feed)  # 20 FPS
        except Exception as e:
            self.status_label.configure(text=f"‚ùå L·ªói ƒë·ªçc camera: {e}", text_color=Theme.ERROR)
            self.camera_running = False
    
    def stop_camera_test(self):
        self.camera_running = False
        if hasattr(self, 'cap'):
            self.cap.release()
        
        self.start_btn.configure(state="normal")
        self.stop_btn.configure(state="disabled")
        self.preview_label.configure(text="Camera ƒë√£ d·ª´ng")
        self.status_label.configure(text="Camera ƒë√£ d·ª´ng", text_color=Theme.TEXT_SECONDARY)
    
    def show_result_choices(self):
        for widget in self.result_container.winfo_children():
            widget.destroy()
        
        ctk.CTkLabel(self.result_container, text="Webcam c√≥ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng kh√¥ng?", font=Theme.SUBHEADING_FONT).pack(pady=15)
        
        button_bar = ctk.CTkFrame(self.result_container, fg_color="transparent")
        button_bar.pack(pady=15)
        
        ctk.CTkButton(button_bar, text="Webcam ho·∫°t ƒë·ªông t·ªët", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "Webcam ho·∫°t ƒë·ªông t·ªët", "Tr·∫°ng th√°i": "T·ªët"}, auto_advance=True), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
        
        ctk.CTkButton(button_bar, text="Webcam c√≥ v·∫•n ƒë·ªÅ", command=lambda: self.mark_completed({"K·∫øt qu·∫£": "Webcam c√≥ l·ªói", "Tr·∫°ng th√°i": "L·ªói"}, auto_advance=True), fg_color=Theme.ERROR, height=Theme.BUTTON_HEIGHT).pack(side="left", padx=10)
    
    def stop_tasks(self):
        super().stop_tasks()
        if hasattr(self, 'camera_running'):
            self.stop_camera_test()
# Dummy WelcomeStep v√† ResearchGuideStep cho logic is_skippable
class WelcomeStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Ch√†o m·ª´ng", "", "", **kwargs)
        self.mark_completed({}, auto_advance=True)
class ResearchGuideStep(BaseStepFrame):
    def __init__(self, master, **kwargs):
        super().__init__(master, "Nghi√™n c·ª©u model b·∫±ng AI", 
            "AI s·∫Ω gi√∫p b·∫°n t·ªïng h·ª£p c√°c l·ªói ph·ªï bi·∫øn, c·∫£nh b√°o, review v√† checklist ki·ªÉm tra ƒë·∫∑c th√π cho model laptop b·∫°n ƒëang ki·ªÉm tra.",
            "1. Nh·∫≠p t√™n model laptop (v√≠ d·ª•: ThinkPad X1 Carbon Gen 9, Dell XPS 13 9310, ...).\n2. B·∫•m 'Ph√¢n t√≠ch AI'.\n3. ƒê·ªçc k·ªπ c√°c c·∫£nh b√°o, l·ªói ph·ªï bi·∫øn v√† checklist AI g·ª£i √Ω.\n4. Quay l·∫°i c√°c b∆∞·ªõc test t∆∞∆°ng ·ª©ng ƒë·ªÉ ki·ªÉm tra k·ªπ c√°c ƒëi·ªÉm AI c·∫£nh b√°o.", **kwargs)
        self.input_frame = ctk.CTkFrame(self.action_frame, fg_color="transparent")
        self.input_frame.pack(pady=10)
        ctk.CTkLabel(self.input_frame, text="Nh·∫≠p model laptop ƒë·ªÉ AI ph√¢n t√≠ch:", font=Theme.BODY_FONT).pack(side="left", padx=(0,8))
        self.model_var = tk.StringVar()
        self.model_entry = ctk.CTkEntry(self.input_frame, textvariable=self.model_var, width=320)
        self.model_entry.pack(side="left")
        self.analyze_btn = ctk.CTkButton(self.input_frame, text="Ph√¢n t√≠ch AI", command=self.run_ai_analysis, fg_color=Theme.ACCENT)
        self.analyze_btn.pack(side="left", padx=8)
        self.ai_result_box = ctk.CTkTextbox(self.action_frame, font=Theme.BODY_FONT, wrap="word", height=180, fg_color="#f7fafd", text_color="#005a9e")
        self.ai_result_box.pack(fill="both", expand=True, padx=10, pady=10)
        self.mark_completed({}, auto_advance=False)

    def run_ai_analysis(self):
        model = self.model_var.get().strip()
        if not model:
            self.ai_result_box.delete("0.0", "end")
            self.ai_result_box.insert("0.0", "Vui l√≤ng nh·∫≠p t√™n model laptop.")
            return
        self.ai_result_box.delete("0.0", "end")
        self.ai_result_box.insert("0.0", f"ƒêang ph√¢n t√≠ch AI cho model: {model} ...\n")
        self.analyze_btn.configure(state="disabled")
        def ai_task():
            try:
                ai_summary = ai_analyzer.ai_diagnoser.analyze_model(model)
                text = ""
                if ai_summary.get('ai_summary'):
                    for item in ai_summary['ai_summary']:
                        if item.get('ai_warning'):
                            text += f"- {item['ai_warning']}\n"
                        if item.get('ai_checklist'):
                            text += f"  Checklist: {item['ai_checklist']}\n"
                else:
                    text = "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu AI cho model n√†y.\n"
                self.ai_result_box.delete("0.0", "end")
                self.ai_result_box.insert("0.0", text)
            except Exception as e:
                self.ai_result_box.delete("0.0", "end")
                self.ai_result_box.insert("0.0", f"L·ªói AI: {e}")
            finally:
                self.analyze_btn.configure(state="normal")
        threading.Thread(target=ai_task, daemon=True).start()

class TestMenuFrame(ctk.CTkFrame):
    def __init__(self, master, mode, icon_manager, wizard_callback):
        super().__init__(master, fg_color="transparent")
        self.mode = mode
        self.icon_manager = icon_manager
        self.wizard_callback = wizard_callback
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        # Header
        header = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=80)
        header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20,10))
        header.grid_columnconfigure(1, weight=1)
        
        ctk.CTkLabel(header, text="Ch·ªçn lo·∫°i test", font=Theme.HEADING_FONT, text_color=Theme.ACCENT).grid(row=0, column=0, padx=20, pady=20)
        
        # Test options
        options_frame = ctk.CTkFrame(self, fg_color="transparent")
        options_frame.grid(row=1, column=0, sticky="nsew", padx=20, pady=10)
        options_frame.grid_columnconfigure((0,1), weight=1)
        
        # Full test
        full_card = ctk.CTkFrame(options_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        full_card.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        
        ctk.CTkLabel(full_card, text="Test To√†n Di·ªán", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        ctk.CTkLabel(full_card, text="Ch·∫°y t·∫•t c·∫£ c√°c b∆∞·ªõc test theo th·ª© t·ª±", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=10)
        ctk.CTkButton(full_card, text="B·∫Øt ƒë·∫ßu Test To√†n Di·ªán", command=lambda: self.wizard_callback("full"), fg_color=Theme.SUCCESS, height=Theme.BUTTON_HEIGHT).pack(pady=20)
        
        # Individual tests
        individual_card = ctk.CTkFrame(options_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        individual_card.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
        
        ctk.CTkLabel(individual_card, text="Test T·ª´ng Ph·∫ßn", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT).pack(pady=15)
        ctk.CTkLabel(individual_card, text="Ch·ªçn test ri√™ng t·ª´ng t√≠nh nƒÉng", font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=10)
        ctk.CTkButton(individual_card, text="Ch·ªçn Test Ri√™ng L·∫ª", command=lambda: self.wizard_callback("individual"), fg_color=Theme.ACCENT, height=Theme.BUTTON_HEIGHT).pack(pady=20)

class WizardFrame(ctk.CTkFrame):
    def __init__(self, master, mode, icon_manager, app=None):
        super().__init__(master, fg_color="transparent")
        self.mode = mode
        self.icon_manager = icon_manager
        self.app = app
        self.current_step = 0
        self.steps = self._get_steps_for_mode(mode)
        self.all_results = {}
        
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        self.grid_rowconfigure(2, weight=0)  # Navigation row
        
        # Header v·ªõi progress
        self.create_header()
        self.create_navigation()
        self.show_step(0)
    
    def create_navigation(self):
        # Navigation lu√¥n hi·ªÉn th·ªã v√† c·ªë ƒë·ªãnh - ƒë·∫£m b·∫£o lu√¥n tr√™n m√†n h√¨nh
        nav_frame = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=80)
        nav_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=(10,20))
        nav_frame.grid_columnconfigure(1, weight=1)
        nav_frame.grid_propagate(False)  # Gi·ªØ k√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh
        nav_frame.lift()  # ƒê·∫£m b·∫£o lu√¥n ·ªü tr√™n c√πng
        
        # Previous button
        self.prev_btn = ctk.CTkButton(nav_frame, text="‚Üê Tr∆∞·ªõc", command=self.go_previous, 
                                     fg_color=Theme.SKIP, width=130, height=50, font=Theme.BODY_FONT)
        self.prev_btn.grid(row=0, column=0, padx=20, pady=15)
        
        # Skip button - lu√¥n hi·ªÉn th·ªã
        self.skip_btn = ctk.CTkButton(nav_frame, text="B·ªè qua", command=self.skip_current_step,
                                     fg_color=Theme.WARNING, width=110, height=50, font=Theme.BODY_FONT)
        self.skip_btn.grid(row=0, column=1, pady=15)
        
        # Next button  
        self.next_btn = ctk.CTkButton(nav_frame, text="Ti·∫øp theo ‚Üí", command=self.go_to_next_step, 
                                     fg_color=Theme.ACCENT, width=130, height=50, font=Theme.BODY_FONT)
        self.next_btn.grid(row=0, column=2, padx=20, pady=15)
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i ban ƒë·∫ßu
        self.update_navigation_state()
    
    def skip_current_step(self):
        """B·ªè qua b∆∞·ªõc hi·ªán t·∫°i"""
        # ƒê√°nh d·∫•u b∆∞·ªõc hi·ªán t·∫°i l√† b·ªè qua
        if self.current_step < len(self.steps):
            step_name, _ = self.steps[self.current_step]
            self.record_result(step_name, {"K·∫øt qu·∫£": "B·ªè qua", "Tr·∫°ng th√°i": "B·ªè qua"})
        self.go_to_next_step()
    
    def go_previous(self):
        if self.current_step > 0:
            self.current_step -= 1
            self.show_step(self.current_step)
            self.update_navigation_state()
    
    def create_header(self):
        header = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=80)
        header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20,10))
        header.grid_columnconfigure(1, weight=1)
        
        # Step counter
        self.step_label = ctk.CTkLabel(header, text="", font=Theme.SUBHEADING_FONT, text_color=Theme.ACCENT)
        self.step_label.grid(row=0, column=0, padx=20, pady=20)
        
        # Progress bar
        self.progress_bar = ctk.CTkProgressBar(header, progress_color=Theme.ACCENT)
        self.progress_bar.grid(row=0, column=1, sticky="ew", padx=20, pady=20)
        
        # Mode indicator
        mode_text = "Ch·∫ø ƒë·ªô Chuy√™n gia" if self.mode == "expert" else "Ch·∫ø ƒë·ªô C∆° b·∫£n"
        self.mode_label = ctk.CTkLabel(header, text=mode_text, font=Theme.BODY_FONT, text_color=Theme.TEXT_SECONDARY)
        self.mode_label.grid(row=0, column=2, padx=20, pady=20)
    
    def _get_steps_for_mode(self, mode):
        basic_steps = [
            ("ƒê·ªãnh danh ph·∫ßn c·ª©ng", HardwareFingerprintStep),
            ("B·∫£n quy·ªÅn Windows", LicenseCheckStep), 
            ("C·∫•u h√¨nh h·ªá th·ªëng", SystemInfoStep),
            ("S·ª©c kh·ªèe ·ªï c·ª©ng", HardDriveHealthStep),
            ("Ki·ªÉm tra m√†n h√¨nh", ScreenTestStep),
            ("B√†n ph√≠m & Touchpad", KeyboardVisualTestStep),
            ("C·ªïng k·∫øt n·ªëi", PortsConnectivityStep),
            ("Pin laptop", BatteryHealthStep),
            ("Loa & Micro", SpeakerTestStep),
            ("Webcam", WebcamTestStep),
            ("M·∫°ng & WiFi", NetworkTestStep)
        ]
        
        expert_steps = basic_steps + [
            ("CPU Stress Test", CPUStressTestStep),
            ("T·ªëc ƒë·ªô ·ªï c·ª©ng", HardDriveSpeedStep), 
            ("GPU Stress Test", GPUStressTestStep),
            ("Thermal Monitor", ThermalPerformanceStep),
            ("Ki·ªÉm tra BIOS", BIOSCheckStep),
            ("Ki·ªÉm tra ngo·∫°i h√¨nh", PhysicalInspectionStep)
        ]
        
        return expert_steps if mode == "expert" else basic_steps
    
    def show_step(self, step_index):
        # Clear content area only - keep header and navigation
        for widget in self.winfo_children():
            if widget not in [self.winfo_children()[0], self.winfo_children()[-1]]:  # Keep header and navigation
                widget.destroy()
        
        # Recreate navigation if it doesn't exist
        if not hasattr(self, 'prev_btn') or not self.prev_btn.winfo_exists():
            self.create_navigation()
        
        # Update header
        total_steps = len(self.steps)
        if step_index < total_steps:
            step_name, step_class = self.steps[step_index]
            self.step_label.configure(text=f"B∆∞·ªõc {step_index + 1}/{total_steps}: {step_name}")
            self.progress_bar.set((step_index + 1) / total_steps)
            
            step_frame = step_class(
                self,
                record_result_callback=self.record_result,
                enable_next_callback=self.enable_next,
                go_to_next_step_callback=self.go_to_next_step,
                icon_manager=self.icon_manager,
                all_results=self.all_results
            )
            step_frame.grid(row=1, column=0, sticky="nsew")
        else:
            self.step_label.configure(text=f"T·ªïng k·∫øt ({total_steps} b∆∞·ªõc ho√†n th√†nh)")
            self.progress_bar.set(1.0)
            
            summary_step = SummaryStep(
                self,
                record_result_callback=self.record_result,
                enable_next_callback=self.enable_next,
                go_to_next_step_callback=self.go_to_next_step,
                icon_manager=self.icon_manager,
                all_results=self.all_results
            )
            summary_step.display_summary(self.all_results)
            summary_step.grid(row=1, column=0, sticky="nsew")
        
        # Ensure navigation is always visible and on top
        self.update_navigation_state()
        if hasattr(self, 'prev_btn'):
            self.prev_btn.lift()
            self.skip_btn.lift()
            self.next_btn.lift()
    
    def record_result(self, step_name, result_data):
        self.all_results[step_name] = result_data
        print(f"[DEBUG] Recorded result for {step_name}: {result_data}")
    
    def enable_next(self):
        pass
    
    def go_to_next_step(self):
        self.current_step += 1
        self.show_step(self.current_step)
        self.update_navigation_state()
    
    def update_navigation_state(self):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t navigation"""
        # Previous button
        if self.current_step <= 0:
            self.prev_btn.configure(state="disabled")
        else:
            self.prev_btn.configure(state="normal")
        
        # Next button - lu√¥n enable
        self.next_btn.configure(state="normal")
        
        # Skip button - disable ·ªü b∆∞·ªõc cu·ªëi
        if self.current_step >= len(self.steps):
            self.skip_btn.configure(state="disabled")
            self.next_btn.configure(text="Ho√†n th√†nh")
        else:
            self.skip_btn.configure(state="normal")
            self.next_btn.configure(text="Ti·∫øp theo ‚Üí")

class App(ctk.CTk):
    def __init__(self):
        print("[DEBUG] App.__init__ called")
        super().__init__(fg_color=Theme.BACKGROUND)
        self.title("Laptop Tester Pro")
        self.state('zoomed')
        self.minsize(1400, 900)
        try:
            self.iconbitmap(asset_path("icons/logo.ico"))
        except:
            pass  # Skip icon if not found
        self.icon_manager = IconManager()
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=20)  # header nh·ªè, main_content l·ªõn
        self.current_main_frame = None
        self.all_results = {}  # Store all test results here

        # --- HEADER BAR ---
        self.header = ctk.CTkFrame(self, fg_color=Theme.FRAME, height=70, corner_radius=0)
        self.header.grid(row=0, column=0, sticky="ew")
        self.header.grid_columnconfigure(0, minsize=80)
        self.header.grid_columnconfigure(1, weight=1)
        self.header.grid_columnconfigure(2, minsize=80)
        logo = self.icon_manager.LOGO_SMALL or None
        self.logo_label = ctk.CTkLabel(self.header, image=logo, text="", width=60)
        self.logo_label.grid(row=0, column=0, padx=(20,0), pady=10)
        self.title_label = ctk.CTkLabel(self.header, text="Laptop Tester Pro", font=Theme.HEADING_FONT, text_color=Theme.ACCENT)
        self.title_label.grid(row=0, column=1, sticky="w", padx=10)
        self.exit_btn = ctk.CTkButton(self.header, text="Tho√°t", command=self.quit_app, font=Theme.BODY_FONT, fg_color=Theme.ERROR, width=80)
        self.exit_btn.grid(row=0, column=2, padx=(0,20), pady=10)

        # --- MAIN CONTENT ---
        self.main_content = ctk.CTkFrame(self, fg_color=Theme.BACKGROUND)
        self.main_content.grid(row=1, column=0, sticky="nsew")
        self.main_content.grid_columnconfigure(0, weight=1)
        self.main_content.grid_rowconfigure(0, weight=1)
        # Add debug label
        self.debug_label = ctk.CTkLabel(self.main_content, text="[DEBUG] App loaded", font=Theme.BODY_FONT, text_color=Theme.ERROR)
        self.debug_label.grid(row=0, column=0, sticky="nsew", padx=100, pady=100)

        self.show_mode_selection()

    def clear_window(self):
        if self.current_main_frame:
            if hasattr(self.current_main_frame, 'cleanup'):
                self.current_main_frame.cleanup()
            self.current_main_frame.destroy()
        self.current_main_frame = None

    def show_mode_selection(self):
        self.clear_window()
        self.current_main_frame = ModeSelectionFrame(self.main_content, self.start_wizard, self.icon_manager)
        self.current_main_frame.grid(row=0, column=0, sticky="nsew", padx=30, pady=30)

    def start_wizard(self, mode):
        if mode == "individual":
            self.show_test_menu(mode)
        else:
            self.clear_window()
            self.current_main_frame = WizardFrame(self.main_content, mode, self.icon_manager, app=self)
            self.current_main_frame.grid(row=0, column=0, sticky="nsew")
            self.main_content.grid_rowconfigure(0, weight=1)
            self.main_content.grid_columnconfigure(0, weight=1)
    
    def show_test_menu(self, mode):
        self.clear_window()
        self.current_main_frame = TestMenuFrame(self.main_content, mode, self.icon_manager, self.start_wizard)
        self.current_main_frame.grid(row=0, column=0, sticky="nsew", padx=30, pady=30)

    def quit_app(self):
        self.clear_window()
        self.destroy()

class ModeSelectionFrame(ctk.CTkFrame):
    def __init__(self, master, mode_callback, icon_manager):
        super().__init__(master, fg_color="transparent")
        self.mode_callback = mode_callback
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # T·∫°o tabview cho Overview v√† Mode Selection
        self.tabview = ctk.CTkTabview(self, width=1200, height=700)
        self.tabview.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        
        # Tab T·ªïng quan
        self.tabview.add("üè† T·ªïng Quan")
        overview_frame = AppOverviewFrame(self.tabview.tab("üè† T·ªïng Quan"), self.mode_callback)
        overview_frame.pack(fill="both", expand=True)
        
        # Tab Ch·ªçn ch·∫ø ƒë·ªô
        self.tabview.add("üéØ Ch·ªçn Ch·∫ø ƒê·ªô")
        self.create_mode_selection()
        
        # M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã tab T·ªïng quan
        self.tabview.set("üè† T·ªïng Quan")
    
    def create_mode_selection(self):
        """T·∫°o giao di·ªán ch·ªçn ch·∫ø ƒë·ªô"""
        mode_frame = self.tabview.tab("üéØ Ch·ªçn Ch·∫ø ƒê·ªô")
        mode_frame.grid_columnconfigure(0, weight=1)
        mode_frame.grid_rowconfigure(1, weight=1)
        
        header_frame = ctk.CTkFrame(mode_frame, fg_color="transparent")
        header_frame.grid(row=0, column=0, pady=(20, 10), sticky="ew")
        ctk.CTkLabel(header_frame, text="Ch·ªçn Ch·∫ø ƒê·ªô Ki·ªÉm Tra", font=Theme.TITLE_FONT, text_color=Theme.TEXT).pack(pady=(0, 10))
        ctk.CTkLabel(header_frame, text="L·ª±a ch·ªçn ch·∫ø ƒë·ªô ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô chuy√™n m√¥n c·ªßa b·∫°n", font=Theme.HEADING_FONT, text_color=Theme.TEXT_SECONDARY).pack(pady=(0, 20))
        # Card ch·ªçn ch·∫ø ƒë·ªô
        card_frame = ctk.CTkFrame(mode_frame, fg_color="transparent")
        card_frame.grid(row=1, column=0, sticky="nsew")
        card_frame.grid_columnconfigure((0,1), weight=1)
        # Basic mode card
        card_basic = ctk.CTkFrame(card_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        card_basic.grid(row=0, column=0, padx=30, pady=20, sticky="nsew")
        ctk.CTkLabel(card_basic, text="Ch·∫ø ƒê·ªô C∆° B·∫£n", font=Theme.HEADING_FONT, text_color=Theme.ACCENT).pack(pady=(20, 10))
        ctk.CTkLabel(card_basic, text="D√†nh cho m·ªçi ng∆∞·ªùi d√πng.\nNhanh ch√≥ng, an to√†n v√† d·ªÖ hi·ªÉu, t·∫≠p trung v√†o c√°c ch·ª©c nƒÉng ch√≠nh.", font=Theme.BODY_FONT, wraplength=450, text_color=Theme.TEXT_SECONDARY).pack(padx=30, pady=10, expand=True)
        ctk.CTkButton(card_basic, text="Ch·ªçn Ch·∫ø ƒê·ªô C∆° B·∫£n", command=lambda: self.mode_callback("basic"), height=Theme.BUTTON_HEIGHT, font=Theme.SUBHEADING_FONT, fg_color=Theme.SUCCESS).pack(padx=30, pady=30, fill="x", side="bottom")
        # Expert mode card
        card_expert = ctk.CTkFrame(card_frame, fg_color=Theme.FRAME, corner_radius=Theme.CORNER_RADIUS)
        card_expert.grid(row=0, column=1, padx=30, pady=20, sticky="nsew")
        ctk.CTkLabel(card_expert, text="Ch·∫ø ƒê·ªô Chuy√™n Gia", font=Theme.HEADING_FONT, text_color=Theme.ERROR).pack(pady=(20, 10))
        ctk.CTkLabel(card_expert, text="D√†nh cho k·ªπ thu·∫≠t vi√™n, ng∆∞·ªùi ki·ªÉm tra chuy√™n s√¢u. ƒê·∫ßy ƒë·ªß c√°c b∆∞·ªõc test ph·∫ßn c·ª©ng, stress test, benchmark.", font=Theme.BODY_FONT, wraplength=450, text_color=Theme.TEXT_SECONDARY).pack(padx=30, pady=10, expand=True)
        ctk.CTkButton(card_expert, text="Ch·ªçn Ch·∫ø ƒê·ªô Chuy√™n Gia", command=lambda: self.mode_callback("expert"), height=Theme.BUTTON_HEIGHT, font=Theme.SUBHEADING_FONT, fg_color=Theme.ERROR).pack(padx=30, pady=30, fill="x", side="bottom")

if __name__ == "__main__":
    try:
        app = App()
        app.mainloop()
    except Exception as e:
        print(f"Error starting application: {e}")
        import traceback
        traceback.print_exc()